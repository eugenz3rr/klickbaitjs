import Console from "./Console";
import FileSystem from "./FileSystem";

export default class Installer extends Console {

     constructor(fileSystem: FileSystem) {
        super(fileSystem);
     }
     public async install(): Promise<any> {

         await this.fileSystem.write('/modules/core/core.components.json', '{\r\n  "regions": {\r\n    "content": {\r\n      "title": "Content",\r\n      "description": "Is used to display data.",\r\n      "path": "src/regions/content/Content.js"\r\n    },\r\n    "form": {\r\n      "title": "Form",\r\n      "description": "Is used to alter data.",\r\n      "path": "src/regions/form/Form.js"\r\n    }\r\n  },\r\n  "containers": {\r\n    "accordion": {\r\n      "title": "Accordion",\r\n      "description": "An element which contains elements in a specific arrangement.",\r\n      "path": "src/containers/Accordion.js"\r\n    },\r\n    "list": {\r\n      "title": "List",\r\n      "description": "An element which contains elements in a specific arrangement.",\r\n      "path": "src/containers/List.js"\r\n    },\r\n    "tab": {\r\n      "title": "Tab",\r\n      "description": "An element which contains elements in a specific arrangement.",\r\n      "path": "src/containers/Tab.js"\r\n    },\r\n    "two_column": {\r\n      "title": "Two Column",\r\n      "description": "An element which enables to split content on the left and content on the right.",\r\n      "path": "src/containers/layouts/TwoColumn.js"\r\n    }\r\n  },\r\n  "elements": {\r\n    "tile": {\r\n      "title": "Tile",\r\n      "description": "Displays the tile.",\r\n      "path": "src/elements/custom/Tile.js"\r\n    },\r\n    "textfield": {\r\n      "title": "Textfield",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Textfield.js"\r\n    },\r\n    "button": {\r\n      "title": "Textfield",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Textfield.js"\r\n    },\r\n    "textarea": {\r\n      "title": "Textarea",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Textarea.js"\r\n    },\r\n    "colorpicker": {\r\n      "title": "Color-Picker",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Colorpicker.js"\r\n    },\r\n    "switch": {\r\n      "title": "Switch",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Switch.js"\r\n    },\r\n    "headline": {\r\n      "title": "Headline",\r\n      "description": "An element which should resemble the headline.",\r\n      "path": "src/elements/Headline.js"\r\n    },\r\n    "paragraph": {\r\n      "title": "Paragraph",\r\n      "description": "An element which should resemble a paragraph.",\r\n      "path": "src/elements/Paragraph.js"\r\n    },\r\n    "dropdown": {\r\n      "title": "Dropdown",\r\n      "description": "An element which should resemble a paragraph.",\r\n      "path": "src/elements/Dropdown.js"\r\n    }\r\n  }\r\n}')
         await this.fileSystem.write('/modules/core/core.info.json', '{\r\n  "name": "Klickbait - Mymodule",\r\n  "description": "This module is supposed to be an example module.",\r\n  "group": "klickbait",\r\n  "type": "module",\r\n  "version": "1.0.0",\r\n  "dependencies": []\r\n}')
         await this.fileSystem.write('/modules/core/core.routing.json', '{\r\n  "core.tile.add": {\r\n    "path": "/tile/:board/add",\r\n    "title": "Add Tile",\r\n    "description": "Adds a tile to the current board.",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Tile form",\r\n        "description": "Edit / add current tile.",\r\n        "path": "src/regions/form/AddTile.js"\r\n      }\r\n    ]\r\n  },\r\n  "core.settings": {\r\n    "path": "/core/settings",\r\n    "title": "Settings",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Tile form",\r\n        "description": "Edit / add current tile.",\r\n        "path": "src/regions/form/Settings.js"\r\n      }\r\n    ]\r\n  },\r\n  "core.board": {\r\n    "path": "/core/board",\r\n    "title": "Board",\r\n    "description": "Board where the tiles are located at.",\r\n    "regions": [\r\n      {\r\n        "type": "content",\r\n        "title": "Tile display",\r\n        "description": "This part displays the currently edited / added tile.",\r\n        "path": "src/regions/content/Board.js",\r\n        "icon": "home"\r\n      }\r\n    ]\r\n  },\r\n  "core.modules": {\r\n    "path": "/core/modules",\r\n    "title": "Modules",\r\n    "description": "This displays all modules.",\r\n    "regions": [\r\n      {\r\n        "type": "content",\r\n        "title": "",\r\n        "description": "",\r\n        "path": "src/regions/content/Modules.js"\r\n      }\r\n    ]\r\n  }\r\n}')
         await this.fileSystem.write('/modules/core/src/containers/Accordion.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-Accordion\',\r\n        components,\r\n        template:\r\n            \'  <v-expansion-panels :accordion="accordion"\\n\' +\r\n            \'                      :popout="popout"\\n\' +\r\n            \'                      :inset="inset"\\n\' +\r\n            \'                      :multiple="multiple"\\n\' +\r\n            \'                      :focusable="focusable"\\n\' +\r\n            \'                      :disabled="disabled"\\n\' +\r\n            \'                      :readonly="readonly"\\n\' +\r\n            \'                      :flat="flat"\\n\' +\r\n            \'                      :hover="hover"\\n\' +\r\n            \'                      :tile="tile">\\n\' +\r\n            \'    <v-expansion-panel v-for="(panel, key) in panels" :key="`${key}-accordion-${panels.length}`">\\n\' +\r\n            \'      <v-expansion-panel-header>{{ panel[\\\'#title\\\'] }}</v-expansion-panel-header>\\n\' +\r\n            \'\\n\' +\r\n            \'      <v-expansion-panel-content>\\n\' +\r\n            \'        <component v-for="(renderElement, element) in panel[\\\'#content\\\']"\\n\' +\r\n            \'                   :is="`as-${renderElement[\\\'#type\\\']}`"\\n\' +\r\n            \'                   :renderElement="renderElement"\\n\' +\r\n            \'                   :element="element"\\n\' +\r\n            \'                   :key="`${element}.${changed}`"\\n\' +\r\n            \'                   :region="region"/>\\n\' +\r\n            \'      </v-expansion-panel-content>\\n\' +\r\n            \'    </v-expansion-panel>\\n\' +\r\n            \'  </v-expansion-panels>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                panels: {},\r\n                accordion: true,\r\n                popout: false,\r\n                inset: false,\r\n                multiple: false,\r\n                disabled: false,\r\n                readonly: false,\r\n                focusable: false,\r\n                flat: true,\r\n                hover: false,\r\n                tile: false,\r\n                changed: 0,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            this.panels = this.element[\'#panels\'];\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`.v-expansion-panels {\r\n          z-index: 0 !important;\r\n          margin-top: 20px;\r\n          margin-bottom: 20px;\r\n    }\r\n    .v-expansion-panels :before {\r\n      border: solid 1px var(--accent);\r\n      box-shadow: none !important;\r\n    }\r\n    .v-expansion-panels :first-child:before {\r\n      border-bottom: none;\r\n    }`);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/containers/layouts/TwoColumn.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-TwoColumn\',\r\n        components,\r\n        template:\r\n            \'<div class="two-column mt-2">\' +\r\n            \'   <v-card class="first-column">\' +\r\n            \'       <v-card-text>\' +\r\n            \'             <component v-for="(renderElement, element) in first"\' +\r\n            \'                        :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'                        :renderElement="renderElement"\' +\r\n            \'                        :element="element"\' +\r\n            \'                        :key="`${element}.${changed}`"\' +\r\n            \'                        :region="region"/>\' +\r\n            \'       </v-card-text>\' +\r\n            \'   </v-card>\' +\r\n            \'   <v-card class="second-column">\' +\r\n            \'       <v-card-text>\' +\r\n            \'             <component v-for="(renderElement, element) in second"\' +\r\n            \'                        :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'                        :renderElement="renderElement"\' +\r\n            \'                        :element="element"\' +\r\n            \'                        :key="`${element}.${changed}`"\' +\r\n            \'                        :region="region"/>\' +\r\n            \'       </v-card-text>\' +\r\n            \'   </v-card>\' +\r\n            \'</div>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                first: {},\r\n                second: {},\r\n                changed: 0\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // this.first = Module.fallback(this.element, \'#first\', {});\r\n            // this.second = Module.fallback(this.element, \'#second\', {});\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n        .two-column {\r\n            display: grid;\r\n            grid-template-columns: 50% 50%;\r\n            grid-template-rows: auto;\r\n            column-gap: 10px;\r\n            grid-template-areas: \r\n              "first second";\r\n        }\r\n        \r\n        .first-column {\r\n            grid-area: first;\r\n        }\r\n        \r\n        .second-column {\r\n            grid-area: second;\r\n        }\r\n    `)\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/containers/List.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-List\',\r\n        components,\r\n        template:\r\n            \'  <v-list\\n\' +\r\n            \'      :disabled="disabled"\\n\' +\r\n            \'      :dense="dense"\\n\' +\r\n            \'      :two-line="twoLine"\\n\' +\r\n            \'      :three-line="threeLine"\\n\' +\r\n            \'      :shaped="shaped"\\n\' +\r\n            \'      :flat="flat"\\n\' +\r\n            \'      :subheader="subheader"\\n\' +\r\n            \'      :sub-group="subGroup"\\n\' +\r\n            \'      :nav="nav"\\n\' +\r\n            \'      :avatar="avatar"\\n\' +\r\n            \'      :rounded="rounded">\\n\' +\r\n            \'\\n\' +\r\n            \'    <v-list-item v-for="(panel, key) in panels" :key="`${key}-list-${panels.length}`">\\n\' +\r\n            \'      <v-list-item-content>\\n\' +\r\n            \'        <component v-for="(renderElement, element) in panel[\\\'#content\\\']"\\n\' +\r\n            \'                  :is="`as-${renderElement[\\\'#type\\\']}`"\\n\' +\r\n            \'                   :renderElement="renderElement"\\n\' +\r\n            \'                   :element="element"\\n\' +\r\n            \'                   :key="`${element}.${changed}`"\\n\' +\r\n            \'                   :region="region"/>\\n\' +\r\n            \'      </v-list-item-content>\\n\' +\r\n            \'    </v-list-item>\\n\' +\r\n            \'  </v-list>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                panels: {},\r\n                disabled: false,\r\n                dense: false,\r\n                twoLine: false,\r\n                threeLine: false,\r\n                shaped: false,\r\n                flat: false,\r\n                subheader: false,\r\n                inactive: false,\r\n                subGroup: false,\r\n                nav: false,\r\n                avatar: false,\r\n                rounded: false,\r\n                changed: 0,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            this.panels = this.element[\'#panels\'];\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n    .v-expansion-panels {\r\n      z-index: 0 !important;\r\n      margin-top: 20px;\r\n      margin-bottom: 20px;\r\n    }\r\n    .v-expansion-panels :before {\r\n      border: solid 1px var(--accent);\r\n      box-shadow: none !important;\r\n    }\r\n    .v-expansion-panels :first-child:before {\r\n      border-bottom: none;\r\n    }\r\n    `);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/containers/Tab.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-Tab\',\r\n        components,\r\n        template:\r\n            \'  <v-card>\\n\' +\r\n            \'    <v-tabs v-model="panel"\\n\' +\r\n            \'            :centered="centered"\\n\' +\r\n            \'            :grow="grow"\\n\' +\r\n            \'            :vertical="vertical"\\n\' +\r\n            \'            :right="right">\\n\' +\r\n            \'      <v-tab v-for="(panel, key) in panels" :key="`${key}-tab-header-${panels.length}`">\\n\' +\r\n            \'        {{ panel[\\\'#title\\\'] }}\\n\' +\r\n            \'      </v-tab>\\n\' +\r\n            \'    </v-tabs>\\n\' +\r\n            \'\\n\' +\r\n            \'    <v-tabs-items v-model="panel">\\n\' +\r\n            \'      <v-tab-item v-for="(panel, key) in panels" :key="`${key}-tab-content-${panels.length}`">\\n\' +\r\n            \'        <v-card flat>\\n\' +\r\n            \'          <v-card-text>\\n\' +\r\n            \'            <component v-for="(renderElement, element) in panel[\\\'#content\\\']"\\n\' +\r\n            \'                       :is="`as-${renderElement[\\\'#type\\\']}`"\\n\' +\r\n            \'                       :renderElement="renderElement"\\n\' +\r\n            \'                       :element="element"\\n\' +\r\n            \'                       :key="`${element}.${changed}`"\\n\' +\r\n            \'                       :region="region"/>\\n\' +\r\n            \'          </v-card-text>\\n\' +\r\n            \'        </v-card>\\n\' +\r\n            \'      </v-tab-item>\\n\' +\r\n            \'    </v-tabs-items>\\n\' +\r\n            \'  </v-card>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                panels: {},\r\n                panel: 1,\r\n                centered: false,\r\n                grow: true,\r\n                vertical: false,\r\n                right: false,\r\n                changed: 0,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            this.panels = this.element[\'#panels\'];\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n    .v-tabs {\r\n      margin-top: 20px;\r\n    }\r\n    .v-tabs .v-tabs-slider {\r\n      background-color: var(--accent) !important;\r\n    }\r\n    .v-tabs .v-tabs-bar {\r\n      background-color: var(--secondary) !important;\r\n    }\r\n    .v-tabs .v-tabs-bar .v-tab {\r\n      color: var(--font) !important;\r\n    }\r\n    \r\n    .v-window {\r\n      margin-bottom: 20px;\r\n    }\r\n    .v-window .v-card {\r\n      background-color: var(--primary) !important;\r\n    }\r\n    `);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/elements/Button.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Button\',\r\n        template:\r\n            \'<v-button>\' +\r\n            \'{{ title }}\' +\r\n            \'</v-button>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                absolute: false,\r\n                \r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n    div.v-text-field {\r\n      margin-top: 20px;\r\n      margin-bottom: 20px;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot {\r\n      background-color: var(--background) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot input,\r\n    div.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\n    div.v-text-field > .v-input__control div.v-messages {\r\n      color: var(--font) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\n    div.v-text-field > .v-input__control > .v-input__slot:before,\r\n    div.v-text-field > .v-input__control > .v-input__slot:after,\r\n    div.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n      color: var(--accent) !important;\r\n      border-color: var(--accent) !important;\r\n    }`);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/elements/Colorpicker.js', 'Module => {\r\n    const component = {\r\n        name: \'Color-Picker\',\r\n        template:\r\n            \'<v-color-picker\\n\' +\r\n            \'      v-model="value"\\n\' +\r\n            \'      :canvas-height="canvasHeight"\\n\' +\r\n            \'      :hide-canvas="hideCanvas"\\n\' +\r\n            \'      :hide-inputs="hideInputs"\\n\' +\r\n            \'      :hide-mode-switch="hideModeSwitch"\\n\' +\r\n            \'      :mode="mode"\\n\' +\r\n            \'      :show-swatches="showSwatches"\\n\' +\r\n            \'      :swatches="swatches"\\n\' +\r\n            \'      :swatches-max-height="swatchesMaxHeight"\\n\' +\r\n            \'      :width="canvasHeight"\\n\' +\r\n            \'  />\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        data() {\r\n            return {\r\n                value: "",\r\n                canvasHeight: "",\r\n                hideCanvas: false,\r\n                hideModeSwitch: false,\r\n                hideInputs: false,\r\n                mode: \'rgba\',\r\n                showSwatches: false,\r\n                swatches: undefined,\r\n                swatchesMaxHeight: 150,\r\n                width: 300\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            const info = this.region.regionRaw.info;\r\n\r\n            Module.emit(`register.receive.${info.id}`);\r\n\r\n            Module.on(`submit.event.${info.id}`, () => {\r\n                Module.emit(`submit.receive.${info.id}`, {\r\n                    key: this.element,\r\n                    value: this.value\r\n                });\r\n            });\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n    div.v-text-field > .v-input__control > .v-input__slot {\r\n        background - color: var(--background) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot input,\r\n        div.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\n        div.v-text-field > .v-input__control div.v-messages {\r\n        color: var(--font) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\n        div.v-text-field > .v-input__control > .v-input__slot:before,\r\n        div.v-text-field > .v-input__control > .v-input__slot:after,\r\n        div.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n        color: var(--accent) !important;\r\n        border-color: var(--accent) !important;\r\n    }`);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/elements/custom/Tile.js', 'Module => {\r\n    const component = {\r\n        name: \'Tile\',\r\n        template:\r\n            \'<v-card>\' +\r\n            \'<v-card-text>{{ test }}</v-card-text>\' +\r\n            \'</v-card>\',\r\n        data() {\r\n            return {};\r\n        },\r\n        mounted: async function () {\r\n\r\n        }\r\n    };\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/elements/Dropdown.js', 'Module => {\r\n    const component = {\r\n        name: \'Dropdown\',\r\n        template:\r\n            \'<v-select\' +\r\n            \'   v-model="value"\' +\r\n            \'   :label="title"\' +\r\n            \'   :hint="description"\' +\r\n            \'   :append-icon="appendIcon"\' +\r\n            \'   :append-outer-icon="appendOuterIcon"\' +\r\n            \'   :attach="attach"\' +\r\n            \'   :autofocus="autofocus"\' +\r\n            \'   :background-color="backgroundColor"\' +\r\n            \'   :cache-items="cacheItems"\' +\r\n            \'   :chips="chips"\' +\r\n            \'   :clear-icon="clearIcon"\' +\r\n            \'   :clearable="clearable"\' +\r\n            \'   :color="color"\' +\r\n            \'   :counter="counter"\' +\r\n            \'   :counter-value="counterValue"\' +\r\n            \'   :dark="dark"\' +\r\n            \'   :deletable-chips="deletableChips"\' +\r\n            \'   :dense="dense"\' +\r\n            \'   :disable-lookup="disableLookup"\' +\r\n            \'   :disabled="disabled"\' +\r\n            \'   :eager="eager"\' +\r\n            \'   :error="error"\' +\r\n            \'   :error-count="errorCount"\' +\r\n            \'   :error-messages="errorMessages"\' +\r\n            \'   :filled="filled"\' +\r\n            \'   :flat="flat"\' +\r\n            \'   :full-width="fullWidth"\' +\r\n            \'   :height="height"\' +\r\n            \'   :hide-details="hideDetails"\' +\r\n            \'   :hide-selected="hideSelected"\' +\r\n            \'   :id="id"\' +\r\n            \'   :item-color="itemColor"\' +\r\n            \'   :item-disabled="itemDisabled"\' +\r\n            \'   :item-text="itemText"\' +\r\n            \'   :item-value="itemValue"\' +\r\n            \'   :items="items"\' +\r\n            \'   :light="light"\' +\r\n            \'   :loader-height="loaderHeight"\' +\r\n            \'   :loading="loading"\' +\r\n            \'   :menu-props="menuProps"\' +\r\n            \'   :messages="messages"\' +\r\n            \'   :multiple="multiple"\' +\r\n            \'   :no-data-text="noDataText"\' +\r\n            \'   :open-on-clear="openOnClear"\' +\r\n            \'   :outlined="outlined"\' +\r\n            \'   :persistent-hint="persistentHint"\' +\r\n            \'   :placeholder="placeholder"\' +\r\n            \'   :prefix="prefix"\' +\r\n            \'   :prepend-icon="prependIcon"\' +\r\n            \'   :prepend-inner-icon="prependInnerIcon"\' +\r\n            \'   :readonly="readonly"\' +\r\n            \'   :return-object="returnObject"\' +\r\n            \'   :reverse="reverse"\' +\r\n            \'   :rounded="rounded"\' +\r\n            \'   :rules="rules"\' +\r\n            \'   :shaped="shaped"\' +\r\n            \'   :single-line="singleLine"\' +\r\n            \'   :small-chips="smallChips"\' +\r\n            \'   :solo="solo"\' +\r\n            \'   :solo-inverted="soloInverted"\' +\r\n            \'   :success="success"\' +\r\n            \'   :success-messages="successMessages"\' +\r\n            \'   :suffix="suffix"\' +\r\n            \'   :type="type"\' +\r\n            \'   :validate-on-blur="validateOnBlur"\' +\r\n            \'></v-select>\',\r\n        data() {\r\n            return {\r\n                value: "",\r\n                title: "",\r\n                description: "",\r\n                appendIcon: \'$dropdown\',\r\n                appendOuterIcon: undefined,\r\n                attach: false,\r\n                autofocus: false,\r\n                backgroundColor: undefined,\r\n                cacheItems: false,\r\n                chips: false,\r\n                clearIcon: \'$clear\',\r\n                clearable: false,\r\n                color: undefined,\r\n                counter: undefined,\r\n                counterValue: null,\r\n                dark: false,\r\n                deletableChips: false,\r\n                dense: false,\r\n                disableLookup: false,\r\n                disabled: false,\r\n                eager: false,\r\n                error: false,\r\n                errorCount: 1,\r\n                errorMessages: [],\r\n                filled: false,\r\n                flat: false,\r\n                fullWidth: false,\r\n                height: undefined,\r\n                hideDetails: undefined,\r\n                hideSelected: false,\r\n                hint: undefined,\r\n                id: undefined,\r\n                itemColor: \'primary\',\r\n                itemDisabled: "disabled",\r\n                itemText: "text",\r\n                itemValue: "value",\r\n                items: [],\r\n                label: undefined,\r\n                light: false,\r\n                loaderHeight: "2",\r\n                loading: false,\r\n                menuProps: {\r\n                    \'closeOnClick\': false,\r\n                    \'closeOnContentClick\': false,\r\n                    \'disableKeys\': true,\r\n                    \'openOnClick\': false,\r\n                    \'maxHeight\': 304\r\n                },\r\n                messages: [],\r\n                multiple: false,\r\n                noDataText: \'$vuetify.noDataText\',\r\n                openOnClear: false,\r\n                outlined: false,\r\n                persistentHint: true,\r\n                placeholder: undefined,\r\n                prefix: undefined,\r\n                prependIcon: undefined,\r\n                prependInnerIcon: undefined,\r\n                readonly: false,\r\n                returnObject: false,\r\n                reverse: false,\r\n                rounded: false,\r\n                rules: [],\r\n                shaped: false,\r\n                singleLine: false,\r\n                smallChips: false,\r\n                solo: false,\r\n                soloInverted: false,\r\n                success: false,\r\n                successMessages: [],\r\n                suffix: undefined,\r\n                type: \'text\',\r\n                validateOnBlur: false,\r\n            };\r\n        },\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            const info = this.region.regionRaw.info;\r\n\r\n            Module.emit(`register.receive.${info.id}`);\r\n\r\n            Module.on(`submit.event.${info.id}`, () => {\r\n                Module.emit(`submit.receive.${info.id}`, {\r\n                    key: this.element,\r\n                    value: this.value\r\n                });\r\n            });\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(``);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/elements/Headline.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Headline\',\r\n        template:\r\n            \'<v-card class="ma-4">\\n\' +\r\n            \'    <v-card-title v-html="title"/>\\n\' +\r\n            \'    <v-card-subtitle v-html="description"/>\\n\' +\r\n            \'</v-card>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                description: "",\r\n                size: 1,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/elements/Paragraph.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Paragraph\',\r\n        template:\r\n            \'  <v-card class="ma-4">\\n\' +\r\n            \'    <v-card-title v-html="title"/>\\n\' +\r\n            \'    <v-card-subtitle v-html="description"/>\\n\' +\r\n            \'    <v-card-text v-html="value"/>\\n\' +\r\n            \'  </v-card>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                description: "",\r\n                value: "",\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n    div.v-text-field {\r\n      margin-top: 20px;\r\n      margin-bottom: 20px;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot {\r\n      background-color: var(--background) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot input,\r\n    div.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\n    div.v-text-field > .v-input__control div.v-messages {\r\n      color: var(--font) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\n    div.v-text-field > .v-input__control > .v-input__slot:before,\r\n    div.v-text-field > .v-input__control > .v-input__slot:after,\r\n    div.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n      color: var(--accent) !important;\r\n      border-color: var(--accent) !important;\r\n    }`);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/elements/Switch.js', 'Module => {\r\n  const component = {\r\n    name: \'S-Switch\',\r\n    template:\r\n        \'<v-switch\\n\' +\r\n        \'      v-model="value"\\n\' +\r\n        \'      :label="title"\\n\' +\r\n        \'      :hint="description"\\n\' +\r\n        \'      :persistent-hint="persistentHint"/>\',\r\n    props: {\r\n\r\n      /**\r\n       * @description Render element. Usually an array with key value pairs for options.\r\n       */\r\n      renderElement: Object,\r\n\r\n      /**\r\n       * @description Element key. The key provided to map submitted values.\r\n       */\r\n      element: String,\r\n\r\n      /**\r\n       * @description Form id to identify events.\r\n       */\r\n      region: Object,\r\n    },\r\n    data() {\r\n      return {\r\n        value: false,\r\n        title: "",\r\n        description: "",\r\n        persistentHint: true,\r\n      };\r\n    },\r\n    mounted: async function () {\r\n\r\n      // Iterate trough all items and set them.\r\n      const keys = Object.keys(this.renderElement);\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n        const value = this.renderElement[key];\r\n        const dataKey = key.replace(\'#\', \'\');\r\n\r\n        // Check if data is mappable.\r\n        if (!this.hasOwnProperty(dataKey)) {\r\n          continue;\r\n        }\r\n\r\n        // Check if element is empty.\r\n        if (!value || value === false || value === undefined || value === null) {\r\n          continue;\r\n        }\r\n\r\n        // Set the new value.\r\n        this[key.replace(\'#\', \'\')] = value;\r\n      }\r\n\r\n      const info = this.region.regionRaw.info;\r\n\r\n      Module.emit(`register.receive.${info.id}`);\r\n\r\n      Module.on(`submit.event.${info.id}`, () => {\r\n        Module.emit(`submit.receive.${info.id}`, {\r\n          key: this.element,\r\n          value: this.value\r\n        });\r\n      });\r\n    },\r\n  };\r\n\r\n  function addStyle(styleString) {\r\n    const style = document.createElement(\'style\');\r\n    style.textContent = styleString;\r\n    style.setAttribute(\'data-module\', component.name);\r\n    document.head.append(style);\r\n  }\r\n\r\n  addStyle(`\r\n  div.v-input--switch {\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  div.v-input--switch > .v-input__control > .v-input__slot {\r\n    background-color: var(--background) !important;\r\n  }\r\n  \r\n  div.v-input--switch > .v-input__control > .v-input__slot label.v-label,\r\n    div.v-input--switch > .v-input__control div.v-messages {\r\n    color: var(--font) !important;\r\n  }\r\n  \r\n  div.v-input--switch > .v-input__control > .v-input__slot button.v-icon,\r\n  div.v-input--switch > .v-input__control > .v-input__slot .primary--text {\r\n    color: var(--accent) !important;\r\n    border-color: var(--accent) !important;\r\n  }`);\r\n\r\n  return component;\r\n};\r\n')
         await this.fileSystem.write('/modules/core/src/elements/Textarea.js', 'Module => {\r\n    const component = {\r\n        name: \'Textarea\',\r\n        template:\r\n            \'<v-textarea\\n\' +\r\n            \'      v-model="value"\\n\' +\r\n            \'      :label="title"\\n\' +\r\n            \'      :hint="description"\\n\' +\r\n            \'      :placeholder="placeholder"\\n\' +\r\n            \'      :auto-grow="autoGrow"\\n\' +\r\n            \'      :clearable="clearable"\\n\' +\r\n            \'      :filled="filled"\\n\' +\r\n            \'      :flat="flat"\\n\' +\r\n            \'      :no-resize="noResize"\\n\' +\r\n            \'      :outlined="outlined"\\n\' +\r\n            \'      :persistent-hint="persistentHint"\\n\' +\r\n            \'      :rounded="rounded"\\n\' +\r\n            \'      :row-height="rowHeight"\\n\' +\r\n            \'      :rows="rows"\\n\' +\r\n            \'      :shaped="shaped"\\n\' +\r\n            \'      :single-line="singleLine"\\n\' +\r\n            \'      :solo="solo"\\n\' +\r\n            \'  />\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        data() {\r\n            return {\r\n                value: "",\r\n                title: "",\r\n                description: "",\r\n                placeholder: "",\r\n                autoGrow: false,\r\n                autofocus: true,\r\n                clearable: false,\r\n                filled: false,\r\n                flat: false,\r\n                noResize: false,\r\n                outlined: false,\r\n                persistentHint: true,\r\n                rounded: false,\r\n                rowHeight: 24,\r\n                rows: 1,\r\n                shaped: false,\r\n                singleLine: false,\r\n                solo: false,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            const info = this.region.regionRaw.info;\r\n\r\n            Module.emit(`register.receive.${info.id}`);\r\n\r\n            Module.on(`submit.event.${info.id}`, () => {\r\n                Module.emit(`submit.receive.${info.id}`, {\r\n                    key: this.element,\r\n                    value: this.value\r\n                });\r\n            });\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n    div.v-textarea {\r\n      margin-top: 20px;\r\n      margin-bottom: 20px;\r\n    }\r\n    div.v-textarea > .v-input__control > .v-input__slot {\r\n      background-color: var(--background) !important;\r\n    }\r\n    div.v-textarea > .v-input__control > .v-input__slot textarea, div.v-textarea > .v-input__control > .v-input__slot label, div.v-textarea > .v-input__control > .v-input__slot div.v-messages {\r\n      color: var(--font) !important;\r\n    }\r\n    div.v-textarea > .v-input__control > .v-input__slot button.v-icon, div.v-textarea > .v-input__control > .v-input__slot > fieldset {\r\n      color: var(--accent) !important;\r\n      border-color: var(--accent) !important;\r\n    }`);\r\n\r\n    return component;\r\n};\r\n')
         await this.fileSystem.write('/modules/core/src/elements/Textfield.js', 'Module => {\r\n    const component = {\r\n        name: \'Textfield\',\r\n        template:\r\n            \'  <v-text-field\\n\' +\r\n            \'      v-model="value"\\n\' +\r\n            \'      :label="title"\\n\' +\r\n            \'      :hint="description"\\n\' +\r\n            \'      :placeholder="placeholder"\\n\' +\r\n            \'      :min="min"\\n\' +\r\n            \'      :max="max"\\n\' +\r\n            \'      :persistent-hint="persistentHint"\\n\' +\r\n            \'  />\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        data() {\r\n            return {\r\n                value: "",\r\n                title: "",\r\n                description: "",\r\n                placeholder: "",\r\n                min: 0,\r\n                max: 16,\r\n                persistentHint: true\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            const info = this.region.regionRaw.info;\r\n\r\n            Module.emit(`register.receive.${info.id}`);\r\n\r\n            Module.on(`submit.event.${info.id}`, () => {\r\n                Module.emit(`submit.receive.${info.id}`, {\r\n                    key: this.element,\r\n                    value: this.value\r\n                });\r\n            });\r\n        },\r\n    };\r\n\r\n    function addStyle(styleString) {\r\n        const style = document.createElement(\'style\');\r\n        style.textContent = styleString;\r\n        style.setAttribute(\'data-module\', component.name);\r\n        document.head.append(style);\r\n    }\r\n\r\n    addStyle(`\r\n    div.v-text-field {\r\n      margin-top: 20px;\r\n      margin-bottom: 20px;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot {\r\n      background-color: var(--background) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot input,\r\n    div.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\n    div.v-text-field > .v-input__control div.v-messages {\r\n      color: var(--font) !important;\r\n    }\r\n    \r\n    div.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\n    div.v-text-field > .v-input__control > .v-input__slot:before,\r\n    div.v-text-field > .v-input__control > .v-input__slot:after,\r\n    div.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n      color: var(--accent) !important;\r\n      border-color: var(--accent) !important;\r\n    }`);\r\n\r\n    return component;\r\n};')
         await this.fileSystem.write('/modules/core/src/regions/content/Board.js', 'const Board = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    info: {\r\n        title: "Tile Board",\r\n        description: "Configure your settings here.",\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param Module\r\n     * @param values\r\n     * @returns {{}}\r\n     */\r\n    "build": (Module) => {\r\n        let build = {};\r\n\r\n        build.headline = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': \'Tiles\',\r\n            \'#description\': \'Tiles are usually located here.\',\r\n        };\r\n\r\n        return build;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Board;\r\n})();')
         await this.fileSystem.write('/modules/core/src/regions/content/Modules.js', 'const Modules = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    info: {\r\n        title: "Tile Board",\r\n        description: "Configure your settings here.",\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param Module\r\n     * @param values\r\n     * @returns {{}}\r\n     */\r\n    build: (Module) => {\r\n        let build = {};\r\n\r\n        build.headline = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': \'Modules\',\r\n            \'#description\': \'Shows the current installed modules.\',\r\n        };\r\n\r\n        const modules = Module.moduleManager.modules;\r\n\r\n        for (let i = 0; i < modules.length; i++) {\r\n            const module = modules[i];\r\n\r\n            build[`${module.id}-module-list`] = {\r\n                \'#type\': \'paragraph\',\r\n                \'#title\': module.info.name,\r\n                \'#description\': module.info.description,\r\n                \'#value\': `Version: ${module.info.version}`\r\n            };\r\n        }\r\n\r\n\r\n        return build;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Modules;\r\n})();')
         await this.fileSystem.write('/modules/core/src/regions/form/AddTile.js', 'const AddTile = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Tile Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "example_form",\r\n        "tab": "misc",\r\n        "location": "settings"\r\n    },\r\n\r\n    "build": (Module, values) => {\r\n        let build = {};\r\n\r\n        build.tile = {\r\n            \'#type\': \'tile\',\r\n            \'#title\': \'#tile_name\',\r\n        };\r\n\r\n        build.tile_name = {\r\n            \'#type\': \'textfield\',\r\n            \'#title\': \'Default Tile name\',\r\n            \'#description\': \'This name will be used as default for each tile.\',\r\n            \'#value\': Module.fallback(values, \'tile_name\', \'Rüdiger\'),\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: (Module, values) => {\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return AddTile;\r\n})();')
         await this.fileSystem.write('/modules/core/src/regions/form/Settings.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Tile Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "example_form",\r\n        "tab": "misc",\r\n        "location": "settings"\r\n    },\r\n\r\n    "build": (Module, values) => {\r\n        let build = {};\r\n\r\n        build.two_column = {\r\n            \'#type\': \'two_column\',\r\n            \'#first\': {\r\n                dropdown_special: {\r\n                    \'#type\': \'dropdown\',\r\n                    \'#title\': \'Default Tile name\',\r\n                    \'#description\': \'This name will be used as default for each tile.\',\r\n                    \'#items\': [\r\n                        {\r\n                            text: "Default tile", value: "default",\r\n                        },\r\n                        {\r\n                            text: "Board tile", value: "board",\r\n                        }\r\n                    ],\r\n                    \'#value\': Module.fallback(values, \'dropdown_special\', \'board\')\r\n                },\r\n            },\r\n            \'#second\': {\r\n                tile_name: {\r\n                    \'#type\': \'textfield\',\r\n                    \'#title\': \'Default Tile name\',\r\n                    \'#description\': \'This name will be used as default for each tile.\',\r\n                    \'#value\': Module.fallback(values, \'tile_name\', \'Rüdiger\'),\r\n                }\r\n            },\r\n        };\r\n\r\n        build.tile_description = {\r\n            \'#type\': \'textarea\',\r\n            \'#title\': \'Default Tile description\',\r\n            \'#description\': \'This description will be used for describing ur tile.\',\r\n            \'#value\': Module.fallback(values, \'tile_description\', \'NICHT SO TIEF RÜDIGER!\'),\r\n            \'#autoGrow\': true,\r\n            \'#clearable\': true,\r\n        };\r\n\r\n        build.tile_enabled = {\r\n            \'#type\': \'switch\',\r\n            \'#title\': \'Enable this module\',\r\n            \'#description\': \'This enables the module.\',\r\n            \'#value\': Module.fallback(values, \'tile_enabled\', false),\r\n        };\r\n\r\n        build.my_accordion = {\r\n            \'#type\': \'accordion\',\r\n            \'#panels\': [{\r\n                \'#title\': \'My first tab lol\',\r\n                \'#content\': {\r\n                    \'my_accordion_switch\': {\r\n                        \'#type\': \'switch\',\r\n                        \'#title\': \'Enable this module\',\r\n                        \'#description\': \'This enables the module.\',\r\n                        \'#value\': Module.fallback(values, \'my_accordion_switch\', false),\r\n                    },\r\n                    \'my_accordion_description\': {\r\n                        \'#type\': \'textarea\',\r\n                        \'#title\': \'Default Tile description\',\r\n                        \'#description\': \'This description will be used for describing ur tile.\',\r\n                        \'#value\': Module.fallback(values, \'my_accordion_description\', \'NICHT SO TIEF RÜDIGER!\'),\r\n                        \'#autoGrow\': true,\r\n                        \'#clearable\': true,\r\n                    }\r\n                }\r\n            }, {\r\n                \'#title\': \'My second tab lol\',\r\n                \'#content\': {\r\n                    \'my_second_accordion_switch\': {\r\n                        \'#type\': \'switch\',\r\n                        \'#title\': \'Enable this module\',\r\n                        \'#description\': \'This enables the module.\',\r\n                        \'#value\': Module.fallback(values, \'my_second_accordion_switch\', false),\r\n                    },\r\n                    \'my_second_accordion_description\': {\r\n                        \'#type\': \'textarea\',\r\n                        \'#title\': \'Default Tile description\',\r\n                        \'#description\': \'This description will be used for describing ur tile.\',\r\n                        \'#value\': Module.fallback(values, \'my_second_accordion_description\', \'NICHT SO TIEF RÜDIGER!\'),\r\n                        \'#autoGrow\': true,\r\n                        \'#clearable\': true,\r\n                    }\r\n                }\r\n            },\r\n            ],\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: (Module, values) => {\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();')
     }
}