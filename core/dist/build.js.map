{"version":3,"sources":["webpack://Core/webpack/bootstrap","webpack://Core/./../common/lib/Console.js","webpack://Core/./../common/lib/Components.js","webpack://Core/./../common/lib/Helper.js","webpack://Core/./../common/lib/Form.js","webpack://Core/./../common/lib/Render/Region/Region.js","webpack://Core/./node_modules/cordova-promise-fs/index.js","webpack://Core/(webpack)/buildin/global.js","webpack://Core/./node_modules/promiscuous/promiscuous.js","webpack://Core/./../common/lib/Render/Component/Component.js","webpack://Core/./node_modules/timers-browserify/main.js","webpack://Core/./node_modules/setimmediate/setImmediate.js","webpack://Core/./node_modules/process/browser.js","webpack://Core/./../common/lib/Info.js","webpack://Core/./../common/lib/Render/Route/Manager.js","webpack://Core/./../common/lib/Render/Region/Manager.js","webpack://Core/./../common/lib/Render/Route/Route.js","webpack://Core/./../common/lib/Render/Component/Manager.js","webpack://Core/./../common/lib/Module/Module.js","webpack://Core/./../common/lib/Installer.js","webpack://Core/./../common/lib/Module/Manager.js","webpack://Core/./../common/lib/Manager.js","webpack://Core/./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Console","Helper","constructor","fileSystem","super","log","data","console","debug","join","emit","event","detail","off","alterEvent","dispatchEvent","CustomEvent","on","callback","Components","components","this","forms","load","fallback","then","catch","err","length","location","path","contents","read","undefined","push","Form","id","eval","item","formFile","changed","form","info","values","readJSON","error","write","JSON","stringify","loadValues","build","validate","submit","Region","route","type","title","description","regionRaw","renderArray","regionManager","regions","force","keys","region","dirname","str","substr","lastIndexOf","filename","normalize","tokens","split","last","splice","indexOf","transferQueue","inprogress","options","Promise","window","CDV_INTERNAL_URL_ROOT","persistent","CDV_URL_ROOT","Error","crosswalk","storageSize","concurrency","retry","deviceready","isCordova","cordova","isCrosswalk","ResolvedPromise","resolve","reject","document","addEventListener","setTimeout","webkitRequestFileSystem","requestFileSystem","x","y","z","fail","FileTransfer","download","url","file","win","xhr","XMLHttpRequest","open","responseType","onreadystatechange","onSuccess","onError","cb","readyState","status","_aborted","response","send","abort","ProgressEvent","FileEntry","toInternalURL","toInternalURLSync","toURLSync","fs","system","xwalk","experimental","native_file_system","requestNativeFileSystem","navigator","webkitPersistentStorage","requestQuota","grantedBytes","isNaN","resolveLocalFileSystemURL","directory","filesystem","ensure","folders","filter","folder","__createDir","rootDirEntry","success","getDirectory","dirEntry","slice","root","getFile","dir","exists","fileEntry","code","toURL","__fs","origin","method","reader","FileReader","onloadend","result","blob","mimeType","createWriter","writer","onwriteend","onerror","createBlob","Blob","parts","BlobBuilder","bb","e","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","nextTransfer","args","pop","ft","fileTransfer","isDownload","serverUrl","localPath","trustAllHosts","transferOptions","onprogress","upload","popTransferQueue","filetransfer","concat","fileName","promise","attempt","transferJob","unshift","timeout","shift","progress","parse","move","src","dest","moveTo","moveDir","replace","destDir","copy","copyTo","remove","mustExist","val","removeDir","removeRecursively","list","recursive","getAsEntries","onlyFiles","onlyDirs","entries","dirReader","createReader","fetchEntries","readEntries","newEntries","apply","promises","entry","isDirectory","forEach","fullPath","all","isFile","map","existsDir","source","toDataURL","g","Function","func","obj","is","handler","pendingHandler","resolved","rejected","queue","q","j","1","0","reason","transferState","Resolved","Rejected","finalize","transform","setImmediate","TypeError","count","index","race","Component","component","raw","async","componentManager","containers","elements","getComponent","self","Timeout","clearFn","_id","_clearFn","scope","arguments","clearTimeout","setInterval","clearInterval","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","port2","createElement","documentElement","script","removeChild","appendChild","Math","random","attachEvent","Array","task","run","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","len","marker","runClearTimeout","Item","array","noop","browser","env","argv","version","versions","addListener","once","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","Info","group","dependencies","RouteManager","routes","defaultPage","RegionManager","Route","icon","hide","routeManager","Date","now","ComponentManager","getAll","getComponentById","getComponentsByType","getVueComponentByType","results","Module","moduleManager","ids","types","groupCollapsed","groupEnd","appendStyle","querySelector","style","textContent","setAttribute","head","Installer","ModuleManager","manager","discover","install","directories","initialize","summary","Manager","cordovaExists","CordovaPromiseFS","cacheDirectory","promiscuous","localStorage","getItem","content","setItem","optionString","includes","target","localSystem","Common"],"mappings":"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","file":"build.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","import Helper from \"./Helper\";\r\nexport default class Console extends Helper {\r\n    constructor(fileSystem) {\r\n        super(fileSystem);\r\n    }\r\n    log(...data) {\r\n        console.debug(data.join('\\n'));\r\n    }\r\n    emit(event, detail) {\r\n        // @ts-ignore\r\n        //window.EventBus.$emit(event, detail);\r\n    }\r\n    off(event, detail) {\r\n        // @ts-ignore\r\n        //window.EventBus.$off(event, detail);\r\n    }\r\n    alterEvent(event, detail) {\r\n        dispatchEvent(new CustomEvent(`${event}.alter`, {\r\n            detail,\r\n        }));\r\n    }\r\n    on(event, callback) {\r\n        // @ts-ignore\r\n        //window.EventBus.$on(event, callback);\r\n    }\r\n}\r\n","import Console from \"./Console\";\r\nimport Form from \"./Form\";\r\nexport default class Components extends Console {\r\n    constructor(module, components) {\r\n        super(module.fileSystem);\r\n        this.forms = [];\r\n        this.module = module;\r\n        this.load(this.fallback(components, 'forms', [])).then(() => {\r\n            this.log('Regions loaded.');\r\n        }).catch(err => {\r\n            this.log('Fatal error loading the forms.');\r\n        });\r\n    }\r\n    async load(forms) {\r\n        for (let i = 0; i < forms.length; i++) {\r\n            const location = forms[i];\r\n            this.log(`Reading > ${this.module.path}${location}`);\r\n            const contents = await this.fileSystem.read(`${this.module.path}${location}`);\r\n            if (contents !== undefined) {\r\n                this.forms.push(new Form(this.module, this.module.id, eval(contents)));\r\n            }\r\n            else {\r\n                this.log(`${this.module.path}${location} => not found.`);\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default class Helper {\r\n    constructor(fileSystem) {\r\n        this.fileSystem = fileSystem;\r\n    }\r\n    fallback(object, item, fallback) {\r\n        // Check if item exists if not use the fallback.\r\n        if (item in object) {\r\n            return object[item];\r\n        }\r\n        return fallback;\r\n    }\r\n}\r\n","import Console from \"./Console\";\r\nexport default class Form extends Console {\r\n    /**\r\n     *\r\n     * @param module\r\n     * @param id\r\n     * @param formFile\r\n     */\r\n    constructor(module, id, formFile) {\r\n        super(module.fileSystem);\r\n        /**\r\n         *\r\n         */\r\n        this.id = '';\r\n        /**\r\n         *\r\n         */\r\n        this.location = '';\r\n        /**\r\n         *\r\n         */\r\n        this.changed = 0;\r\n        // Execute the form to get the \r\n        this.form = formFile(module, id);\r\n        this.module = module;\r\n        this.id = this.form.info.id;\r\n        this.location = this.form.info.location;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    async loadValues() {\r\n        let values = {};\r\n        try {\r\n            values = await this.fileSystem.readJSON(`${this.module.path}values/form.${this.id}.json`);\r\n        }\r\n        catch (error) {\r\n            await this.fileSystem.write(`${this.module.path}values/form.${this.id}.json`, JSON.stringify({}));\r\n            /*\r\n             * At this point we know that there is nothing in the fileSystem about this file.\r\n             * So it's ok to set value empty.\r\n             */\r\n            values = {};\r\n        }\r\n        if (values === undefined)\r\n            return {};\r\n        return values;\r\n    }\r\n    ;\r\n    /**\r\n     *\r\n     */\r\n    async build() {\r\n        let values = await this.loadValues();\r\n        return this.form.build(values);\r\n    }\r\n    ;\r\n    /**\r\n     *\r\n     * @param values\r\n     */\r\n    async validate(values) {\r\n        this.form.validate(values);\r\n    }\r\n    ;\r\n    /**\r\n     *\r\n     * @param values\r\n     */\r\n    async submit(values) {\r\n        values = this.form.submit(values);\r\n        await this.fileSystem.write(`${this.module.path}values/form.${this.id}.json`, JSON.stringify(values));\r\n    }\r\n    ;\r\n}\r\n","import Console from \"../../Console\";\r\nexport default class Region extends Console {\r\n    constructor(route, data) {\r\n        super(route.fileSystem);\r\n        this.type = \"\";\r\n        this.title = \"\";\r\n        this.description = \"\";\r\n        this.path = \"\";\r\n        this.regionRaw = {};\r\n        this.renderArray = [];\r\n        this.regionManager = route.regionManager;\r\n        this.module = route.module;\r\n        this.fileSystem = route.module.fileSystem;\r\n        this.regionManager = route.regionManager;\r\n        // Map values.\r\n        this.type = this.fallback(data, 'type', 'content');\r\n        this.title = this.fallback(data, 'title', 'No title.');\r\n        this.description = this.fallback(data, 'description', 'No description.');\r\n        this.path = this.fallback(data, 'path', '404');\r\n        this.regionManager.regions.push(this);\r\n    }\r\n    async load(force = false) {\r\n        if (Object.keys(this.regionRaw).length !== 0 && !force) {\r\n            return;\r\n        }\r\n        let region = await this.fileSystem.read(`${this.module.path}${this.path}`);\r\n        console.debug(`${this.module.path}${this.path}`);\r\n        if (typeof region !== 'undefined') {\r\n            // Interpret code and execute it.\r\n            this.regionRaw = eval(region);\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    async build() {\r\n        if (this.path === '404') {\r\n            return {};\r\n        }\r\n        await this.load();\r\n        this.renderArray = this.regionRaw.build(this.module);\r\n    }\r\n}\r\n","/**\n * Static Private functions\n */\n\n/* createDir, recursively */\nfunction __createDir(rootDirEntry, folders, success,error) {\n  rootDirEntry.getDirectory(folders[0], {create: true}, function(dirEntry) {\n    // Recursively add the new subfolder (if we still have another to create).\n    if (folders.length > 1) {\n      __createDir(dirEntry, folders.slice(1),success,error);\n    } else {\n      success(dirEntry);\n    }\n  }, error);\n}\n\nfunction dirname(str) {\n  str = str.substr(0,str.lastIndexOf('/')+1);\n  if(str[0] === '/') str = str.substr(1);\n  return str;\n}\n\nfunction filename(str) {\n  return str.substr(str.lastIndexOf('/')+1);\n}\n\nfunction normalize(str){\n  str = str || '';\n  if(str[0] === '/') str = str.substr(1);\n\n  var tokens = str.split('/'), last = tokens[0];\n\n  // check tokens for instances of .. and .\n  for(var i=1;i < tokens.length;i++) {\n    last = tokens[i];\n    if (tokens[i] === '..') {\n      // remove the .. and the previous token\n      tokens.splice(i-1,2);\n      // rewind 'cursor' 2 tokens\n      i = i - 2;\n    } else if (tokens[i] === '.') {\n      // remove the .. and the previous token\n      tokens.splice(i,1);\n      // rewind 'cursor' 1 token\n      i--;\n    }\n  }\n\n  str = tokens.join('/');\n  if(str === './') {\n    str = '';\n  } else if(last && last.indexOf('.') < 0 && str[str.length - 1] != '/'){\n    str += '/';\n  }\n  return str;\n}\n\nvar transferQueue = [], // queued fileTransfers\n    inprogress = 0;     // currently active filetransfers\n\n/**\n * Factory function: Create a single instance (based on single FileSystem)\n */\nmodule.exports = function(options){\n  /* Promise implementation */\n  var Promise = options.Promise || window.Promise;\n  var CDV_INTERNAL_URL_ROOT = 'cdvfile://localhost/'+(options.persistent? 'persistent/':'temporary/');\n  var CDV_URL_ROOT = '';\n  if(!Promise) { throw new Error(\"No Promise library given in options.Promise\"); }\n\n  /* default options */\n  options = options || {};\n  options.crosswalk = !!options.crosswalk;\n  options.persistent = options.persistent !== undefined? options.persistent: true;\n  options.storageSize = options.storageSize || 20*1024*1024;\n  options.concurrency = options.concurrency || 3;\n  options.retry = options.retry || [];\n  options.debug = !!options.debug;\n\n  /* Cordova deviceready promise */\n  var deviceready,\n      isCordova = typeof cordova !== 'undefined' && !options.crosswalk,\n      isCrosswalk = options.crosswalk;\n  if(isCordova){\n    deviceready = new Promise(function(resolve,reject){\n      document.addEventListener(\"deviceready\", resolve, false);\n      setTimeout(function(){ reject(new Error('deviceready has not fired after 5 seconds.')); },5100);\n    });\n  } else if(isCrosswalk) {\n    deviceready = ResolvedPromise(true);\n  } else {\n    /* FileTransfer implementation for Chrome */\n    deviceready = ResolvedPromise(true);\n    if(typeof webkitRequestFileSystem !== 'undefined'){\n      window.requestFileSystem = webkitRequestFileSystem;\n    } else {\n      window.requestFileSystem = function(x,y,z,fail){\n        fail(new Error('requestFileSystem not supported!'));\n      };\n    }\n  }\n\n  // Polyfill Filetransfer\n  if(!isCordova){\n    window.FileTransfer = function FileTransfer(){};\n    FileTransfer.prototype.download = function download(url,file,win,fail) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url);\n      xhr.responseType = \"blob\";\n      xhr.onreadystatechange = function(onSuccess, onError, cb) {\n        if (xhr.readyState == 4) {\n          if(xhr.status === 200 && !this._aborted){\n            write(file,xhr.response).then(win,fail);\n          } else {\n            fail(xhr.status);\n          }\n        }\n      };\n      xhr.send();\n      return xhr;\n    };\n    FileTransfer.prototype.abort = function(){\n      this._aborted = true;\n    };\n    window.ProgressEvent = function ProgressEvent(){};\n    window.FileEntry = function FileEntry(){};\n  }\n\n  /* Promise resolve helper */\n  function ResolvedPromise(value){\n    return new Promise(function(resolve){\n      return resolve(value);\n    });\n  }\n\n  /* the filesystem! */\n  var fs = new Promise(function(resolve,reject){\n    deviceready.then(function(){\n      var type = options.persistent? 1: 0;\n      if(options.fileSystem && isCordova){\n        type = options.fileSystem;\n      }\n      // Crosswalk\n      if(isCrosswalk){\n        var system = options.fileSystem || 'cachedir';\n        xwalk.experimental.native_file_system.requestNativeFileSystem(system,resolve,reject);\n      // On chrome, request quota to store persistent files\n      } else if (!isCordova && type === 1 && navigator.webkitPersistentStorage) {\n        navigator.webkitPersistentStorage.requestQuota(options.storageSize, function(grantedBytes) {\n          window.requestFileSystem(type, grantedBytes, resolve, reject);\n        }, reject);\n\n      // Exotic Cordova Directories (options.fileSystem = string)\n      } else if(isNaN(type)) {\n        window.resolveLocalFileSystemURL(type,function(directory){\n            resolve(directory.filesystem);\n        },reject);\n      // Normal browser usage\n      } else {\n        window.requestFileSystem(type, options.storageSize, resolve, reject);\n      }\n\n      setTimeout(function(){ reject(new Error('Could not retrieve FileSystem after 5 seconds.')); },5100);\n    },reject);\n  });\n\n  /* debug */\n  fs.then(function(fs){\n    CDV_URL_ROOT = fs.root.toURL();\n    CDV_INTERNAL_URL_ROOT = isCordova? fs.root.toInternalURL(): CDV_URL_ROOT;\n    window.__fs = fs;\n  },function(err){\n    console.error('Could not get Cordova FileSystem:',err);\n  });\n\n  /* ensure directory exists */\n  function ensure(folders) {\n    return new Promise(function(resolve,reject){\n      return fs.then(function(fs){\n          if(!folders) {\n            resolve(fs.root);\n          } else {\n            folders = folders.split('/').filter(function(folder) {\n              return folder && folder.length > 0 && folder !== '.' && folder !== '..';\n            });\n            __createDir(fs.root,folders,resolve,reject);\n          }\n        },reject);\n    });\n  }\n\n    /* get file file */\n  function file(path,options){\n    return new Promise(function(resolve,reject){\n      if(typeof path === 'object') {\n        return resolve(path);\n      }\n      path = normalize(path);\n      options = options || {};\n      return fs.then(function(fs){\n        fs.root.getFile(path,options,resolve,reject);\n      },reject);\n    });\n  }\n\n  /* get directory entry */\n  function dir(path,options){\n    path = normalize(path);\n    options = options || {};\n    return new Promise(function(resolve,reject){\n      return fs.then(function(fs){\n        if(!path || path === '/') {\n          resolve(fs.root);\n        } else {\n          fs.root.getDirectory(path,options,resolve,reject);\n        }\n      },reject);\n    });\n  }\n\n  /* list contents of a directory */\n  function list(path,mode) {\n    mode = mode || '';\n    var recursive = mode.indexOf('r') > -1;\n    var getAsEntries = mode.indexOf('e') > -1;\n    var onlyFiles = mode.indexOf('f') > -1;\n    var onlyDirs = mode.indexOf('d') > -1;\n    if(onlyFiles && onlyDirs) {\n      onlyFiles = false;\n      onlyDirs = false;\n    }\n\n    return dir(path)\n      .then(function(dirEntry){\n        return new Promise(function(resolve, reject){\n          var entries = [];\n          var dirReader = dirEntry.createReader();\n          var fetchEntries = function(){\n            dirReader.readEntries(function(newEntries){\n              if(newEntries.length === 0) {\n                resolve(entries);\n              } else {\n                var args = [0,0].concat(newEntries);\n                entries.splice.apply(entries,args);\n                fetchEntries();\n              }\n            });\n          }\n          fetchEntries();\n        });\n      })\n      .then(function(entries){\n        var promises = [ResolvedPromise(entries)];\n        if(recursive) {\n          entries\n            .filter(function(entry){return entry.isDirectory; })\n            .forEach(function(entry){\n              promises.push(list(entry.fullPath,'re'));\n            });\n        }\n        return Promise.all(promises);\n      })\n      .then(function(values){\n        var entries = [];\n        entries = entries.concat.apply(entries,values);\n        if(onlyFiles) entries = entries.filter(function(entry) { return entry.isFile; });\n        if(onlyDirs) entries = entries.filter(function(entry) { return entry.isDirectory; });\n        if(!getAsEntries) entries = entries.map(function(entry) { return entry.fullPath; });\n        return entries;\n      });\n  }\n\n  /* does file exist? If so, resolve with fileEntry, if not, resolve with false. */\n  function exists(path){\n    return new Promise(function(resolve,reject){\n      file(path).then(\n        function(fileEntry){\n          resolve(fileEntry);\n        },\n        function(err){\n          if(err.code === 1) {\n            resolve(false);\n          } else {\n            reject(err);\n          }\n        }\n      );\n    });\n  }\n\n  /* does dir exist? If so, resolve with fileEntry, if not, resolve with false. */\n  function existsDir(path){\n    return new Promise(function(resolve,reject){\n      dir(path).then(\n        function(dirEntry){\n          resolve(dirEntry);\n        },\n        function(err){\n          if(err.code === 1) {\n            resolve(false);\n          } else {\n            reject(err);\n          }\n        }\n      );\n    });\n  }\n\n  function create(path){\n    return ensure(dirname(path)).then(function(){\n      return file(path,{create:true});\n    });\n  }\n\n  /* convert path to URL to be used in JS/CSS/HTML */\n  function toURL(path) {\n    return file(path).then(function(fileEntry) {\n      return fileEntry.toURL();\n    });\n  }\n\n  /* convert path to URL to be used in JS/CSS/HTML */\n  var toInternalURL,toInternalURLSync,toURLSync;\n  if(isCordova) {\n    /* synchronous helper to get internal URL. */\n    toInternalURLSync = function(path){\n      path = normalize(path);\n      return path.indexOf('://') < 0? CDV_INTERNAL_URL_ROOT + path: path;\n    };\n    /* synchronous helper to get native URL. */\n    toURLSync = function(path){\n      path = normalize(path);\n      return path.indexOf('://') < 0? CDV_URL_ROOT + path: path;\n    };\n\n    toInternalURL = function(path) {\n      return file(path).then(function(fileEntry) {\n        return fileEntry.toInternalURL();\n      });\n    };\n  } else if(isCrosswalk){\n    var system = options.fileSystem || 'cachedir';\n    /* synchronous helper to get internal URL. */\n    toInternalURLSync = function(path){\n      path = normalize(path);\n      return path.indexOf(system) < 0? '/'+system+'/' + path: path;\n    };\n    toInternalURL = function(path) {\n      return file(path).then(function(fileEntry) {\n        return fileEntry.toURL();\n      });\n    };\n    toURLSync = toInternalURLSync;\n  } else {\n    /* synchronous helper to get internal URL. */\n    toInternalURLSync = function(path){\n      path = normalize(path);\n      return 'filesystem:'+location.origin+(options.persistent? '/persistent/':'/temporary/') + path;\n    };\n\n    toInternalURL = function(path) {\n      return file(path).then(function(fileEntry) {\n        return fileEntry.toURL();\n      });\n    };\n    toURLSync = toInternalURLSync;\n  }\n\n  /* return contents of a file */\n  function read(path,method) {\n    method = method || 'readAsText';\n    return file(path).then(function(fileEntry) {\n      return new Promise(function(resolve,reject){\n        fileEntry.file(function(file){\n          var reader = new FileReader();\n          reader.onloadend = function(){\n            resolve(this.result);\n          };\n          reader[method](file);\n        },reject);\n      });\n    });\n  }\n\n  /* convert path to base64 date URI */\n  function toDataURL(path) {\n    return read(path,'readAsDataURL');\n  }\n\n\n  function readJSON(path){\n    return read(path).then(JSON.parse);\n  }\n\n  /* write contents to a file */\n  function write(path,blob,mimeType) {\n    return ensure(dirname(path))\n      .then(function() { return file(path,{create:true}); })\n      .then(function(fileEntry) {\n        return new Promise(function(resolve,reject){\n          fileEntry.createWriter(function(writer){\n            writer.onwriteend = resolve;\n            writer.onerror = reject;\n            if(typeof blob === 'string') {\n              blob = createBlob([blob], mimeType || 'text/plain');\n            } else if(blob instanceof Blob !== true){\n              blob = createBlob([JSON.stringify(blob,null,4)], mimeType || 'application/json');\n            }\n            writer.write(blob);\n          },reject);\n        });\n      });\n    }\n\n  function createBlob(parts, type) {\n    var BlobBuilder,\n        bb;\n    try {\n      return new Blob(parts, {type: type});\n    } catch(e) {\n      BlobBuilder = window.BlobBuilder ||\n        window.WebKitBlobBuilder ||\n        window.MozBlobBuilder ||\n        window.MSBlobBuilder;\n      if(BlobBuilder) {\n        bb = new BlobBuilder();\n        bb.append(parts);\n        return bb.getBlob(type);\n      } else {\n        throw new Error(\"Unable to create blob\");\n      }\n    }\n  }\n\n  /* move a file */\n  function move(src,dest) {\n    return ensure(dirname(dest))\n      .then(function(dir) {\n        return file(src).then(function(fileEntry){\n          return new Promise(function(resolve,reject){\n            fileEntry.moveTo(dir,filename(dest),resolve,reject);\n          });\n        });\n      });\n  }\n\n  /* move a dir */\n  function moveDir(src,dest) {\n    src = src.replace(/\\/$/, '');\n    dest = dest.replace(/\\/$/, '');\n    return ensure(dirname(dest))\n      .then(function(destDir) {\n        return dir(src).then(function(dirEntry){\n          return new Promise(function(resolve,reject){\n            dirEntry.moveTo(destDir,filename(dest),resolve,reject);\n          });\n        });\n      });\n  }\n\n  /* copy a file */\n  function copy(src,dest) {\n    return ensure(dirname(dest))\n      .then(function(dir) {\n        return file(src).then(function(fileEntry){\n          return new Promise(function(resolve,reject){\n            fileEntry.copyTo(dir,filename(dest),resolve,reject);\n          });\n        });\n      });\n  }\n\n  /* delete a file */\n  function remove(path,mustExist) {\n    var method = mustExist? file:exists;\n    return new Promise(function(resolve,reject){\n        method(path).then(function(fileEntry){\n        if(fileEntry !== false) {\n          fileEntry.remove(resolve,reject);\n        } else {\n          resolve(1);\n        }\n      },reject);\n    }).then(function(val){\n      return val === 1? false: true;\n    });\n  }\n\n  /* delete a directory */\n  function removeDir(path) {\n    return dir(path).then(function(dirEntry){\n      return new Promise(function(resolve,reject) {\n        dirEntry.removeRecursively(resolve,reject);\n      });\n    });\n  }\n\n  // Whenever we want to start a transfer, we call popTransferQueue\n  function popTransferQueue(){\n    // while we are not at max concurrency\n    while(transferQueue.length > 0 && inprogress < options.concurrency){\n      // increment activity counter\n      inprogress++;\n\n      // fetch filetranfer, method-type (isDownload) and arguments\n      var args = transferQueue.pop();\n\t  var ft = args.fileTransfer,\n\t      isDownload = args.isDownload,\n\t      serverUrl = args.serverUrl,\n\t      localPath = args.localPath,\n\t      trustAllHosts = args.trustAllHosts,\n\t      transferOptions = args.transferOptions,\n\t      win = args.win,\n\t      fail = args.fail;\n\n      if(ft._aborted) {\n        inprogress--;\n      } else if(isDownload){\n        ft.download.call(ft,serverUrl,localPath,win,fail,trustAllHosts,transferOptions);\n        if(ft.onprogress) ft.onprogress(new ProgressEvent());\n      } else {\n        ft.upload.call(ft,localPath,serverUrl,win,fail,transferOptions,trustAllHosts);\n      }\n    }\n    // if we are at max concurrency, popTransferQueue() will be called whenever\n    // the transfer is ready and there is space avaialable.\n  }\n\n  // Promise callback to check if there are any more queued transfers\n  function nextTransfer(result){\n    inprogress--; // decrement counter to free up one space to start transfers again!\n    popTransferQueue(); // check if there are any queued transfers\n    return result;\n  }\n\n  function filetransfer(isDownload,serverUrl,localPath,transferOptions,onprogress){\n    if(typeof transferOptions === 'function') {\n      onprogress = transferOptions;\n      transferOptions = {};\n    }\n    if(isCordova && localPath.indexOf('://') < 0) localPath = toURLSync(localPath);\n\n    transferOptions = transferOptions || {};\n    if(!transferOptions.retry || !transferOptions.retry.length) {\n      transferOptions.retry = options.retry;\n    }\n    transferOptions.retry = transferOptions.retry.concat();\n    if(!transferOptions.file && !isDownload){\n      transferOptions.fileName = filename(localPath);\n    }\n\n    var ft = new FileTransfer();\n    onprogress = onprogress || transferOptions.onprogress;\n    if(typeof onprogress === 'function') ft.onprogress = onprogress;\n    var promise = new Promise(function(resolve,reject){\n      var attempt = function(err){\n        if(transferOptions.retry.length === 0) {\n          if(options.debug) console.log('FileTransfer Error: '+serverUrl,err);\n          reject(err);\n        } else {\n\n    \t\t  var transferJob = {\n    \t\t    fileTransfer:ft,\n    \t\t    isDownload:isDownload,\n    \t\t    serverUrl:serverUrl,\n    \t\t    localPath:localPath,\n    \t\t    trustAllHosts:transferOptions.trustAllHosts || false,\n    \t\t    transferOptions:transferOptions,\n    \t\t    win:resolve,\n    \t\t    fail:attempt\n    \t\t  };\n          transferQueue.unshift(transferJob);\n          var timeout = transferOptions.retry.shift();\n          if(timeout > 0) {\n            setTimeout(nextTransfer,timeout);\n          } else {\n            nextTransfer();\n          }\n        }\n      };\n      transferOptions.retry.unshift(0);\n      inprogress++;\n      attempt();\n    });\n    promise.then(nextTransfer,nextTransfer);\n    promise.progress = function(onprogress){\n      ft.onprogress = onprogress;\n      return promise;\n    };\n    promise.abort = function(){\n      ft._aborted = true;\n      ft.abort();\n      return promise;\n    };\n    return promise;\n  }\n\n  function download(url,dest,options,onprogress){\n    return filetransfer(true,url,dest,options,onprogress);\n  }\n\n  function upload(source,dest,options,onprogress){\n    return filetransfer(false,dest,source,options,onprogress);\n  }\n\n  return {\n    fs: fs,\n    normalize: normalize,\n    file: file,\n    filename: filename,\n    dir: dir,\n    dirname: dirname,\n    create:create,\n    read: read,\n    readJSON: readJSON,\n    write: write,\n    move: move,\n    moveDir: moveDir,\n    copy: copy,\n    remove: remove,\n    removeDir: removeDir,\n    list: list,\n    ensure: ensure,\n    exists: exists,\n    existsDir: existsDir,\n    download: download,\n    upload: upload,\n    toURL:toURL,\n    toURLSync: toURLSync,\n    isCordova:isCordova,\n    toInternalURLSync: toInternalURLSync,\n    toInternalURL:toInternalURL,\n    toDataURL:toDataURL,\n    deviceready: deviceready,\n    options: options,\n    Promise: Promise\n  };\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**@license MIT-promiscuous-©Ruben Verborgh*/\n(function (func, obj) {\n  // Type checking utility function\n  function is(type, item) { return (typeof item)[0] == type; }\n\n  // Creates a promise, calling callback(resolve, reject), ignoring other parameters.\n  function Promise(callback, handler) {\n    // The `handler` variable points to the function that will\n    // 1) handle a .then(resolved, rejected) call\n    // 2) handle a resolve or reject call (if the first argument === `is`)\n    // Before 2), `handler` holds a queue of callbacks.\n    // After 2), `handler` is a finalized .then handler.\n    handler = function pendingHandler(resolved, rejected, value, queue, then, i) {\n      queue = pendingHandler.q;\n\n      // Case 1) handle a .then(resolved, rejected) call\n      if (resolved != is) {\n        return Promise(function (resolve, reject) {\n          queue.push({ p: this, r: resolve, j: reject, 1: resolved, 0: rejected });\n        });\n      }\n\n      // Case 2) handle a resolve or reject call\n      // (`resolved` === `is` acts as a sentinel)\n      // The actual function signature is\n      // .re[ject|solve](<is>, success, value)\n\n      // Check if the value is a promise and try to obtain its `then` method\n      if (value && (is(func, value) | is(obj, value))) {\n        try { then = value.then; }\n        catch (reason) { rejected = 0; value = reason; }\n      }\n      // If the value is a promise, take over its state\n      if (is(func, then)) {\n        try { then.call(value, transferState(1), rejected = transferState(0)); }\n        catch (reason) { rejected(reason); }\n      }\n      // The value is not a promise; handle resolve/reject\n      else {\n        // Replace this handler with a finalized resolved/rejected handler\n        handler = function (Resolved, Rejected) {\n          // If the Resolved or Rejected parameter is not a function,\n          // return the original promise (now stored in the `callback` variable)\n          if (!is(func, (Resolved = rejected ? Resolved : Rejected)))\n            return callback;\n          // Otherwise, return a finalized promise, transforming the value with the function\n          return Promise(function (resolve, reject) { finalize(this, resolve, reject, value, Resolved); });\n        };\n        // Resolve/reject pending callbacks\n        i = 0;\n        while (i < queue.length) {\n          then = queue[i++];\n          // If no callback, just resolve/reject the promise\n          if (!is(func, resolved = then[rejected]))\n            (rejected ? then.r : then.j)(value);\n          // Otherwise, resolve/reject the promise with the result of the callback\n          else\n            finalize(then.p, then.r, then.j, value, resolved);\n        }\n      }\n      // Returns a function that transfers the state of the promise\n      function transferState(resolved) {\n        return function (value) { then && (then = 0, pendingHandler(is, resolved, value)); };\n      }\n    };\n    // The queue of pending callbacks; garbage-collected when handler is resolved/rejected\n    handler.q = [];\n\n    // Create and return the promise (reusing the callback variable)\n    callback.call(callback = { then:    function (resolved, rejected) { return handler(resolved, rejected); },\n                               \"catch\": function (rejected)           { return handler(0,        rejected); } },\n                  function (value)  { handler(is, 1,  value); },\n                  function (reason) { handler(is, 0, reason); });\n    return callback;\n  }\n\n  // Finalizes the promise by resolving/rejecting it with the transformed value\n  function finalize(promise, resolve, reject, value, transform) {\n    setImmediate(function () {\n      try {\n        // Transform the value through and check whether it's a promise\n        value = transform(value);\n        transform = value && (is(obj, value) | is(func, value)) && value.then;\n        // Return the result if it's not a promise\n        if (!is(func, transform))\n          resolve(value);\n        // If it's a promise, make sure it's not circular\n        else if (value == promise)\n          reject(TypeError());\n        // Take over the promise's state\n        else\n          transform.call(value, resolve, reject);\n      }\n      catch (error) { reject(error); }\n    });\n  }\n\n  // Export the main module\n  module.exports = Promise;\n\n  // Creates a resolved promise\n  Promise.resolve = ResolvedPromise;\n  function ResolvedPromise(value) { return Promise(function (resolve) { resolve(value); }); }\n\n  // Creates a rejected promise\n  Promise.reject = function (reason) { return Promise(function (resolve, reject) { reject(reason); }); };\n\n  // Transforms an array of promises into a promise for an array\n  Promise.all = function (promises) {\n    return Promise(function (resolve, reject, count, values) {\n      // Array of collected values\n      values = [];\n      // Resolve immediately if there are no promises\n      count = promises.length || resolve(values);\n      // Transform all elements (`map` is shorter than `forEach`)\n      promises.map(function (promise, index) {\n        ResolvedPromise(promise).then(\n          // Store the value and resolve if it was the last\n          function (value) {\n            values[index] = value;\n            --count || resolve(values);\n          },\n          // Reject if one element fails\n          reject);\n      });\n    });\n  };\n\n  // Returns a promise that resolves or rejects as soon as one promise in the array does\n  Promise.race = function (promises) {\n    return Promise(function (resolve, reject) {\n      // Register to all promises in the array\n      promises.map(function (promise) {\n        ResolvedPromise(promise).then(resolve, reject);\n      });\n    });\n  };\n})('f', 'o');\n","import Console from \"../../Console\";\r\nexport default class Component extends Console {\r\n    constructor(module, id, component) {\r\n        super(module.fileSystem);\r\n        this.id = '';\r\n        this.title = '';\r\n        this.description = '';\r\n        this.path = '';\r\n        this.type = '';\r\n        this.raw = () => { };\r\n        this.component = {};\r\n        /**\r\n         * A function to load the component.\r\n         */\r\n        this.load = async () => {\r\n            const component = await this.fileSystem.read(this.module.path + this.path);\r\n            // Execute order 66.\r\n            this.raw = eval(component);\r\n            this.component = this.raw(this.module);\r\n            switch (this.type) {\r\n                case 'regions':\r\n                    this.module.componentManager.regions.push(this);\r\n                    break;\r\n                case 'containers':\r\n                    this.module.componentManager.containers.push(this);\r\n                    break;\r\n                case 'elements':\r\n                    this.module.componentManager.elements.push(this);\r\n                    break;\r\n            }\r\n        };\r\n        // Set access;\r\n        this.module = module;\r\n        // Set default value.\r\n        this.id = id;\r\n        this.title = this.fallback(component, 'title', 'No title set');\r\n        this.description = this.fallback(component, 'description', 'No description set');\r\n        this.path = this.fallback(component, 'path', 'No path set');\r\n        this.type = this.fallback(component, 'type', 'elements');\r\n    }\r\n    getComponent() {\r\n        this.component = this.raw(this.module);\r\n        return this.component;\r\n    }\r\n}\r\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import Console from \"./Console\";\r\nexport default class Info extends Console {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param module {Module}\r\n     * @param info {Object}\r\n     */\r\n    constructor(module, info) {\r\n        super(module.fileSystem);\r\n        /**\r\n         * Contains the module name.\r\n         */\r\n        this.name = '';\r\n        /**\r\n         * Contains the module description.\r\n         */\r\n        this.description = '';\r\n        /**\r\n         * Defines in what group the module belongs. (core, theme)\r\n         */\r\n        this.group = '';\r\n        /**\r\n         * Defines what the module implements on a very basic level.\r\n         */\r\n        this.type = '';\r\n        /**\r\n         * Defines the current version of the module.\r\n         */\r\n        this.version = '';\r\n        /**\r\n         * Defines the module dependencies.\r\n         */\r\n        this.dependencies = [];\r\n        // Match all items.\r\n        this.name = this.fallback(info, 'name', 'undefined');\r\n        this.description = this.fallback(info, 'description', 'undefined');\r\n        this.group = this.fallback(info, 'group', 'undefined');\r\n        this.type = this.fallback(info, 'type', 'undefined');\r\n        this.version = this.fallback(info, 'version', 'undefined');\r\n        this.dependencies = this.fallback(info, 'dependencies', []);\r\n    }\r\n}\r\n","import Console from \"../../Console\";\r\nexport default class RouteManager extends Console {\r\n    constructor(fileSystem) {\r\n        super(fileSystem);\r\n        this.routes = [];\r\n        this.fileSystem = fileSystem;\r\n        this.defaultPage = '';\r\n        // Alter the default page.\r\n        this.alterEvent('manager.page.defaultPage', this.defaultPage);\r\n        this.alterEvent('manager.page', this);\r\n    }\r\n}\r\n","import Console from \"../../Console\";\r\nexport default class RegionManager extends Console {\r\n    constructor(fileSystem) {\r\n        super(fileSystem);\r\n        this.regions = [];\r\n        this.fileSystem = fileSystem;\r\n    }\r\n}\r\n","import Console from \"../../Console\";\r\nimport RegionManager from \"../Region/Manager\";\r\nimport Region from \"../Region/Region\";\r\nexport default class Route extends Console {\r\n    constructor(module, id, data) {\r\n        super(module.fileSystem);\r\n        this.id = '';\r\n        this.path = '';\r\n        this.title = '';\r\n        this.description = '';\r\n        this.icon = '';\r\n        this.hide = true;\r\n        this.module = module;\r\n        this.routeManager = module.routeManager;\r\n        this.routeManager.routes.push(this);\r\n        this.regionManager = new RegionManager(this.fileSystem);\r\n        const regions = this.fallback(data, 'regions', []);\r\n        for (let i = 0; i < regions.length; i++) {\r\n            const region = regions[i];\r\n            new Region(this, region);\r\n        }\r\n        this.id = id;\r\n        this.path = this.fallback(data, 'path', `/${id}/${Date.now()}`);\r\n        this.title = this.fallback(data, 'title', 'No title');\r\n        this.description = this.fallback(data, 'description', 'No description.');\r\n        this.icon = this.fallback(data, 'icon', '');\r\n        this.hide = this.fallback(data, 'hide', true);\r\n    }\r\n}\r\n","import Console from \"../../Console\";\r\nexport default class ComponentManager extends Console {\r\n    constructor(fileSystem) {\r\n        super(fileSystem);\r\n        this.regions = [];\r\n        this.containers = [];\r\n        this.elements = [];\r\n    }\r\n    getAll() {\r\n        return [...this.regions, ...this.containers, ...this.elements];\r\n    }\r\n    /**\r\n     * A function to fetch a component by id.\r\n     *\r\n     * @param id {String}\r\n     *   Expects an id to search for.\r\n     * @param components {Component}\r\n     *   Optional: A collection of components to search in, instead of the array provided by \"getAll\".\r\n     *\r\n     * @return\r\n     *   Returns an Component or undefined when not found.\r\n     */\r\n    getComponentById(id, components = this.getAll()) {\r\n        for (let i = 0; i < components.length; i++) {\r\n            const component = components[i];\r\n            if (component.id === id) {\r\n                return component;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * A function to fetch a collection of components by type.\r\n     *\r\n     * @param type {String}\r\n     *   Expects a type to search for.\r\n     * @param components {Component}\r\n     *   Optional: A collection of components to search in, instead of the array provided by \"getAll\".\r\n     *\r\n     * @return\r\n     *   Returns a collection of Components.\r\n     */\r\n    getComponentsByType(type = 'all', components = this.getAll()) {\r\n        return components.filter(component => (component.type === type || type === 'all'));\r\n    }\r\n    getVueComponentByType(type = 'all', components = this.getAll()) {\r\n        let results = components.filter(component => (component.type === type || type === 'all'));\r\n        results = results.map(component => component.getComponent());\r\n        return results;\r\n    }\r\n}\r\n","import Components from \"../Components\";\r\nimport Console from \"../Console\";\r\nimport Info from \"../Info\";\r\nimport RouteManager from \"../Render/Route/Manager\";\r\nimport Route from \"../Render/Route/Route\";\r\nimport ComponentManager from \"../Render/Component/Manager\";\r\nimport Component from \"../Render/Component/Component\";\r\nexport default class Module extends Console {\r\n    /**\r\n     *\r\n     * @param moduleManager\r\n     * @param path\r\n     * @param id\r\n     */\r\n    constructor(moduleManager, path, id) {\r\n        super(moduleManager.fileSystem);\r\n        this.routeManager = new RouteManager(this.fileSystem);\r\n        this.componentManager = new ComponentManager(this.fileSystem);\r\n        /**\r\n         *\r\n         */\r\n        this.components = new Components(this, {});\r\n        /**\r\n         *\r\n         */\r\n        this.info = new Info(this, {});\r\n        this.moduleManager = moduleManager;\r\n        this.moduleManager.modules.push(this);\r\n        this.id = id;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    async initialize() {\r\n        this.log(`Reading > ${this.path}${this.id}.info.json`);\r\n        const info = await this.fileSystem.readJSON(`${this.path}${this.id}.info.json`);\r\n        if (info !== undefined) {\r\n            this.info = new Info(this, info);\r\n        }\r\n        this.log(`Reading > ${this.path}${this.id}.routing.json`);\r\n        const routes = await this.fileSystem.readJSON(`${this.path}${this.id}.routing.json`);\r\n        if (routes !== undefined) {\r\n            const ids = Object.keys(routes);\r\n            for (let i = 0; i < ids.length; i++) {\r\n                const id = ids[i];\r\n                const route = routes[id];\r\n                new Route(this, id, route);\r\n            }\r\n        }\r\n        // Get all registered components.\r\n        const components = await this.fileSystem.readJSON(`${this.path}${this.id}.components.json`);\r\n        // Sanity check.\r\n        if (components !== undefined) {\r\n            const types = ['elements', 'containers', 'regions'];\r\n            console.groupCollapsed(\"Component Loading\");\r\n            for (let i = 0; i < types.length; i++) {\r\n                let type = this.fallback(components, types[i], {});\r\n                const ids = Object.keys(type);\r\n                console.debug('Loading component ->', type);\r\n                for (let j = 0; j < ids.length; j++) {\r\n                    const id = ids[j];\r\n                    let component = type[id];\r\n                    type[id]['type'] = types[i];\r\n                    component = new Component(this, id, component);\r\n                    // Start loading.\r\n                    try {\r\n                        await component.load();\r\n                        console.log(component.title, \"Component loaded.\");\r\n                    }\r\n                    catch (e) {\r\n                        console.error(component.path, 'Could not be loaded as it does not exist.');\r\n                    }\r\n                }\r\n            }\r\n            console.groupEnd();\r\n        }\r\n    }\r\n    appendStyle(path, id) {\r\n        // If the source was already appended just ignore the rest.\r\n        if (document.querySelector(`style[data-source-id=\"${id}\"]`))\r\n            return;\r\n        this.fileSystem.read(`${this.path}${path}`).then(value => {\r\n            const style = document.createElement('style');\r\n            style.textContent = value;\r\n            style.setAttribute('data-source-id', id);\r\n            document.head.append(style);\r\n        }).catch(() => { });\r\n    }\r\n}\r\n","import Console from \"./Console\";\r\nexport default class Installer extends Console {\r\n    constructor(fileSystem) {\r\n        super(fileSystem);\r\n    }\r\n    async install() {\r\n        await this.fileSystem.write('/modules/core/core.components.json', '{\\r\\n  \"regions\": {\\r\\n    \"content\": {\\r\\n      \"title\": \"Content\",\\r\\n      \"description\": \"Is used to display data.\",\\r\\n      \"path\": \"src/regions/Content.js\"\\r\\n    },\\r\\n    \"form\": {\\r\\n      \"title\": \"Form\",\\r\\n      \"description\": \"Is used to alter data.\",\\r\\n      \"path\": \"src/regions/Form.js\"\\r\\n    }\\r\\n  },\\r\\n  \"containers\": {\\r\\n    \"accordion\": {\\r\\n      \"title\": \"Accordion\",\\r\\n      \"description\": \"An element which contains elements in a specific arrangement.\",\\r\\n      \"path\": \"src/containers/Accordion.js\"\\r\\n    },\\r\\n    \"list\": {\\r\\n      \"title\": \"List\",\\r\\n      \"description\": \"An element which contains elements in a specific arrangement.\",\\r\\n      \"path\": \"src/containers/List.js\"\\r\\n    },\\r\\n    \"tab\": {\\r\\n      \"title\": \"Tab\",\\r\\n      \"description\": \"An element which contains elements in a specific arrangement.\",\\r\\n      \"path\": \"src/containers/Tab.js\"\\r\\n    },\\r\\n    \"two_column\": {\\r\\n      \"title\": \"Two Column\",\\r\\n      \"description\": \"An element which enables to split content on the left and content on the right.\",\\r\\n      \"path\": \"src/containers/layouts/TwoColumn.js\"\\r\\n    },\\r\\n    \"one_column\": {\\r\\n      \"title\": \"One Column\",\\r\\n      \"description\": \"An element which enables to split content on the left and content on the right.\",\\r\\n      \"path\": \"src/containers/layouts/OneColumn.js\"\\r\\n    },\\r\\n    \"add-tile-button\": {\\r\\n      \"title\": \"Add Tile Button\",\\r\\n      \"description\": \"An element which enables the user to upload files.\",\\r\\n      \"path\": \"src/elements/custom/tile/AddTileButton.js\"\\r\\n    }\\r\\n  },\\r\\n  \"elements\": {\\r\\n    \"tile\": {\\r\\n      \"title\": \"Tile\",\\r\\n      \"description\": \"Displays the tile.\",\\r\\n      \"path\": \"src/elements/custom/Tile.js\"\\r\\n    },\\r\\n    \"textfield\": {\\r\\n      \"title\": \"Textfield\",\\r\\n      \"description\": \"An element which changes information.\",\\r\\n      \"path\": \"src/elements/Textfield.js\"\\r\\n    },\\r\\n    \"button\": {\\r\\n      \"title\": \"Button\",\\r\\n      \"description\": \"An element which changes information.\",\\r\\n      \"path\": \"src/elements/Button.js\"\\r\\n    },\\r\\n    \"redirect_button\": {\\r\\n      \"title\": \"Redirect Button\",\\r\\n      \"description\": \"This button takes all current work and redirects the user and the content the user edited.\",\\r\\n      \"path\": \"src/elements/RedirectButton.js\"\\r\\n    },\\r\\n    \"textarea\": {\\r\\n      \"title\": \"Textarea\",\\r\\n      \"description\": \"An element which changes information.\",\\r\\n      \"path\": \"src/elements/Textarea.js\"\\r\\n    },\\r\\n    \"colorpicker\": {\\r\\n      \"title\": \"Color Picker\",\\r\\n      \"description\": \"An element which changes information.\",\\r\\n      \"path\": \"src/elements/Colorpicker.js\"\\r\\n    },\\r\\n    \"switch\": {\\r\\n      \"title\": \"Switch\",\\r\\n      \"description\": \"An element which changes information.\",\\r\\n      \"path\": \"src/elements/Switch.js\"\\r\\n    },\\r\\n    \"headline\": {\\r\\n      \"title\": \"Headline\",\\r\\n      \"description\": \"An element which should resemble the headline.\",\\r\\n      \"path\": \"src/elements/Headline.js\"\\r\\n    },\\r\\n    \"paragraph\": {\\r\\n      \"title\": \"Paragraph\",\\r\\n      \"description\": \"An element which should resemble a paragraph.\",\\r\\n      \"path\": \"src/elements/Paragraph.js\"\\r\\n    },\\r\\n    \"dropdown\": {\\r\\n      \"title\": \"Dropdown\",\\r\\n      \"description\": \"An element which should resemble a paragraph.\",\\r\\n      \"path\": \"src/elements/Dropdown.js\"\\r\\n    },\\r\\n    \"upload\": {\\r\\n      \"title\": \"Upload\",\\r\\n      \"description\": \"An element which enables the user to upload files.\",\\r\\n      \"path\": \"src/elements/Upload.js\"\\r\\n    },\\r\\n    \"sound\": {\\r\\n      \"title\": \"Sound\",\\r\\n      \"description\": \"An element which enables the user to upload files.\",\\r\\n      \"path\": \"src/elements/Sound.js\"\\r\\n    },\\r\\n    \"image\": {\\r\\n      \"title\": \"Image\",\\r\\n      \"description\": \"An element which enables the user to upload files.\",\\r\\n      \"path\": \"src/elements/Image.js\"\\r\\n    },\\r\\n    \"tile_template\": {\\r\\n      \"title\": \"TileTemplate\",\\r\\n      \"description\": \"An element which enables the user to upload files.\",\\r\\n      \"path\": \"src/elements/custom/tile/TileTemplate.js\"\\r\\n    }\\r\\n  }\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/core.info.json', '{\\r\\n  \"name\": \"Klickbait - Mymodule\",\\r\\n  \"description\": \"This module is supposed to be an example module.\",\\r\\n  \"group\": \"klickbait\",\\r\\n  \"type\": \"module\",\\r\\n  \"version\": \"1.0.0\",\\r\\n  \"dependencies\": []\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/core.routing.json', '{\\r\\n  \"core.board\": {\\r\\n    \"path\": \"/core/board\",\\r\\n    \"title\": \"Board\",\\r\\n    \"description\": \"Board where the tiles are located at.\",\\r\\n    \"hide\": false,\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"content\",\\r\\n        \"title\": \"Tile display\",\\r\\n        \"description\": \"This part displays the currently edited / added tile.\",\\r\\n        \"path\": \"src/regions/content/Board.js\",\\r\\n        \"icon\": \"home\"\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  \"core.settings\": {\\r\\n    \"path\": \"/core/settings\",\\r\\n    \"title\": \"Settings\",\\r\\n    \"description\": \"Default settings\",\\r\\n    \"hide\": false,\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"form\",\\r\\n        \"title\": \"Tile form\",\\r\\n        \"description\": \"Edit / add current tile.\",\\r\\n        \"path\": \"src/regions/form/Settings.js\"\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  \"core.modules\": {\\r\\n    \"path\": \"/core/modules\",\\r\\n    \"title\": \"Modules\",\\r\\n    \"description\": \"This displays all modules.\",\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"content\",\\r\\n        \"title\": \"\",\\r\\n        \"description\": \"\",\\r\\n        \"path\": \"src/regions/content/Modules.js\"\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  \"tile.templates\": {\\r\\n    \"path\": \"/tile/templates\",\\r\\n    \"title\": \"Templates\",\\r\\n    \"description\": \"Here you choose your tiles before adding your final stuff.\",\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"form\",\\r\\n        \"title\": \"\",\\r\\n        \"description\": \"\",\\r\\n        \"path\": \"src/regions/form/TileTemplates.js\"\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  \"core.sound\": {\\r\\n    \"path\": \"/tile/sound\",\\r\\n    \"title\": \"Sound\",\\r\\n    \"description\": \"Here you choose your tiles before adding your final stuff.\",\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"form\",\\r\\n        \"title\": \"\",\\r\\n        \"description\": \"\",\\r\\n        \"path\": \"src/regions/form/EditSound.js\"\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  \"add.tile.image\": {\\r\\n    \"path\": \"/tile/image\",\\r\\n    \"title\": \"Image\",\\r\\n    \"description\": \"Here you choose your tiles before adding your final stuff.\",\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"form\",\\r\\n        \"title\": \"\",\\r\\n        \"description\": \"\",\\r\\n        \"path\": \"src/regions/form/EditImage.js\"\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  \"add.tile\": {\\r\\n    \"path\": \"/add/tile\",\\r\\n    \"title\": \"Add Tile\",\\r\\n    \"description\": \"Default settings\",\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"form\",\\r\\n        \"title\": \"Tile form\",\\r\\n        \"description\": \"Edit / add current tile.\",\\r\\n        \"path\": \"src/regions/form/tile/AddTile.js\"\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  \"add.tile.text\": {\\r\\n    \"path\": \"/add/tile/text\",\\r\\n    \"title\": \"Tile Text\",\\r\\n    \"description\": \"Here you choose the text style for your tile.\",\\r\\n    \"regions\": [\\r\\n      {\\r\\n        \"type\": \"form\",\\r\\n        \"title\": \"\",\\r\\n        \"description\": \"\",\\r\\n        \"path\": \"src/regions/form/tile/TileText.js\"\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/containers/Accordion.js', 'Module => {\\r\\n    const data = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    const component = {\\r\\n        name: \\'S-Accordion\\',\\r\\n        components,\\r\\n        template:\\r\\n            \\'  <v-expansion-panels :accordion=\"accordion\"\\\\n\\' +\\r\\n            \\'                      :popout=\"popout\"\\\\n\\' +\\r\\n            \\'                      :inset=\"inset\"\\\\n\\' +\\r\\n            \\'                      :multiple=\"multiple\"\\\\n\\' +\\r\\n            \\'                      :focusable=\"focusable\"\\\\n\\' +\\r\\n            \\'                      :disabled=\"disabled\"\\\\n\\' +\\r\\n            \\'                      :readonly=\"readonly\"\\\\n\\' +\\r\\n            \\'                      :flat=\"flat\"\\\\n\\' +\\r\\n            \\'                      :hover=\"hover\"\\\\n\\' +\\r\\n            \\'                      :tile=\"tile\">\\\\n\\' +\\r\\n            \\'    <v-expansion-panel v-for=\"(panel, key) in panels\" :key=\"`${key}-accordion-${panels.length}`\">\\\\n\\' +\\r\\n            \\'      <v-expansion-panel-header>{{ panel[\\\\\\'#title\\\\\\'] }}</v-expansion-panel-header>\\\\n\\' +\\r\\n            \\'\\\\n\\' +\\r\\n            \\'      <v-expansion-panel-content>\\\\n\\' +\\r\\n            \\'        <component v-for=\"(renderElement, element) in panel[\\\\\\'#content\\\\\\']\"\\\\n\\' +\\r\\n            \\'                   :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\\\n\\' +\\r\\n            \\'                   :renderElement=\"renderElement\"\\\\n\\' +\\r\\n            \\'                   :element=\"element\"\\\\n\\' +\\r\\n            \\'                   :key=\"`${element}.${changed}`\"\\\\n\\' +\\r\\n            \\'                   :region=\"region\"/>\\\\n\\' +\\r\\n            \\'      </v-expansion-panel-content>\\\\n\\' +\\r\\n            \\'    </v-expansion-panel>\\\\n\\' +\\r\\n            \\'  </v-expansion-panels>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            region: Object\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                panels: {},\\r\\n                accordion: true,\\r\\n                popout: false,\\r\\n                inset: false,\\r\\n                multiple: false,\\r\\n                disabled: false,\\r\\n                readonly: false,\\r\\n                focusable: false,\\r\\n                flat: true,\\r\\n                hover: false,\\r\\n                tile: false,\\r\\n                changed: 0,\\r\\n            };\\r\\n        },\\r\\n\\r\\n        mounted: async function () {\\r\\n\\r\\n            this.panels = this.element[\\'#panels\\'];\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/containers/css/Accordion.css`, component.name);\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/containers/css/Accordion.css', '.v-expansion-panels {\\r\\n    z-index: 0 !important;\\r\\n    margin-top: 20px;\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\n.v-expansion-panels :before {\\r\\n    border: solid 1px var(--accent);\\r\\n    box-shadow: none !important;\\r\\n}\\r\\n.v-expansion-panels :first-child:before {\\r\\n    border-bottom: none;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/containers/css/List.css', '.v-expansion-panels {\\r\\n    z-index: 0 !important;\\r\\n    margin-top: 20px;\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\n.v-expansion-panels :before {\\r\\n    border: solid 1px var(--accent);\\r\\n    box-shadow: none !important;\\r\\n}\\r\\n.v-expansion-panels :first-child:before {\\r\\n    border-bottom: none;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/containers/css/Tab.css', '.v-tabs {\\r\\n    margin-top: 20px;\\r\\n}\\r\\n.v-tabs .v-tabs-slider {\\r\\n    background-color: var(--accent) !important;\\r\\n}\\r\\n.v-tabs .v-tabs-bar {\\r\\n    background-color: var(--secondary) !important;\\r\\n}\\r\\n.v-tabs .v-tabs-bar .v-tab {\\r\\n    color: var(--font) !important;\\r\\n}\\r\\n\\r\\n.v-window {\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\n.v-window .v-card {\\r\\n    background-color: var(--primary) !important;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/containers/layouts/css/OneColumn.css', '.one-column {\\r\\n    display: flex;\\r\\n    flex-wrap: wrap;\\r\\n}\\r\\n\\r\\n.one-column .tile {\\r\\n\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/containers/layouts/css/TwoColumn.css', '.two-column {\\r\\n    display: grid;\\r\\n    grid-template-columns: 50% 50%;\\r\\n    grid-template-rows: auto;\\r\\n    column-gap: 10px;\\r\\n    grid-template-areas:\\r\\n              \"first second\";\\r\\n}\\r\\n\\r\\n.first-column {\\r\\n    grid-area: first;\\r\\n}\\r\\n\\r\\n.second-column {\\r\\n    grid-area: second;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/containers/layouts/OneColumn.js', 'Module => {\\r\\n    const data = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    const component = {\\r\\n        name: \\'TileContainer\\',\\r\\n        components,\\r\\n        template:\\r\\n            \\'<div class=\"one-column\">\\' +\\r\\n            \\'   <component v-for=\"(renderElement, element) in content\"\\' +\\r\\n            \\'              :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\' +\\r\\n            \\'              :renderElement=\"renderElement\"\\' +\\r\\n            \\'              :element=\"element\"\\' +\\r\\n            \\'              :key=\"`${element}.${changed}`\"\\' +\\r\\n            \\'              :region=\"region\"/>\\' +\\r\\n            \\'</div>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            region: Object\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                content: {},\\r\\n                changed: 0\\r\\n            };\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n        updated: async function () {\\r\\n            const containers = document.querySelector(\\'.one-column\\');\\r\\n            const computedWidth = containers.offsetWidth;\\r\\n\\r\\n            console.log(computedWidth)\\r\\n\\r\\n            /*const sortable = new Draggable.Swappable(containers, {\\r\\n                draggable: \\'.tile\\',\\r\\n                mirror: {\\r\\n                    appendTo: \\'.one-column\\',\\r\\n                    constrainDimensions: true,\\r\\n                },\\r\\n                plugins: [Draggable.Plugins.SwapAnimation],\\r\\n                sortAnimation: {\\r\\n                    duration: 200,\\r\\n                },\\r\\n            });*/\\r\\n        }\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/containers/layouts/css/OneColumn.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/containers/layouts/TwoColumn.js', 'Module => {\\r\\n    const data = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    const component = {\\r\\n        name: \\'S-TwoColumn\\',\\r\\n        components,\\r\\n        template:\\r\\n            \\'<div class=\"two-column mt-2\">\\' +\\r\\n            \\'   <v-card class=\"first-column\" flat>\\' +\\r\\n            \\'       <v-card-text>\\' +\\r\\n            \\'             <component v-for=\"(renderElement, element) in first\"\\' +\\r\\n            \\'                        :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\' +\\r\\n            \\'                        :renderElement=\"renderElement\"\\' +\\r\\n            \\'                        :element=\"element\"\\' +\\r\\n            \\'                        :key=\"`${element}.${changed}`\"\\' +\\r\\n            \\'                        :region=\"region\"/>\\' +\\r\\n            \\'       </v-card-text>\\' +\\r\\n            \\'   </v-card>\\' +\\r\\n            \\'   <v-card class=\"second-column\" flat>\\' +\\r\\n            \\'       <v-card-text>\\' +\\r\\n            \\'             <component v-for=\"(renderElement, element) in second\"\\' +\\r\\n            \\'                        :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\' +\\r\\n            \\'                        :renderElement=\"renderElement\"\\' +\\r\\n            \\'                        :element=\"element\"\\' +\\r\\n            \\'                        :key=\"`${element}.${changed}`\"\\' +\\r\\n            \\'                        :region=\"region\"/>\\' +\\r\\n            \\'       </v-card-text>\\' +\\r\\n            \\'   </v-card>\\' +\\r\\n            \\'</div>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            region: Object\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                first: {},\\r\\n                second: {},\\r\\n                changed: 0\\r\\n            };\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // this.first = Module.fallback(this.element, \\'#first\\', {});\\r\\n            // this.second = Module.fallback(this.element, \\'#second\\', {});\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/containers/layouts/css/TwoColumn.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/containers/List.js', 'Module => {\\r\\n    const data = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    const component = {\\r\\n        name: \\'S-List\\',\\r\\n        components,\\r\\n        template:\\r\\n            \\'  <v-list\\\\n\\' +\\r\\n            \\'      :disabled=\"disabled\"\\\\n\\' +\\r\\n            \\'      :dense=\"dense\"\\\\n\\' +\\r\\n            \\'      :two-line=\"twoLine\"\\\\n\\' +\\r\\n            \\'      :three-line=\"threeLine\"\\\\n\\' +\\r\\n            \\'      :shaped=\"shaped\"\\\\n\\' +\\r\\n            \\'      :flat=\"flat\"\\\\n\\' +\\r\\n            \\'      :subheader=\"subheader\"\\\\n\\' +\\r\\n            \\'      :sub-group=\"subGroup\"\\\\n\\' +\\r\\n            \\'      :nav=\"nav\"\\\\n\\' +\\r\\n            \\'      :avatar=\"avatar\"\\\\n\\' +\\r\\n            \\'      :rounded=\"rounded\">\\\\n\\' +\\r\\n            \\'\\\\n\\' +\\r\\n            \\'    <v-list-item v-for=\"(panel, key) in panels\" :key=\"`${key}-list-${panels.length}`\">\\\\n\\' +\\r\\n            \\'      <v-list-item-content>\\\\n\\' +\\r\\n            \\'        <component v-for=\"(renderElement, element) in panel[\\\\\\'#content\\\\\\']\"\\\\n\\' +\\r\\n            \\'                  :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\\\n\\' +\\r\\n            \\'                   :renderElement=\"renderElement\"\\\\n\\' +\\r\\n            \\'                   :element=\"element\"\\\\n\\' +\\r\\n            \\'                   :key=\"`${element}.${changed}`\"\\\\n\\' +\\r\\n            \\'                   :region=\"region\"/>\\\\n\\' +\\r\\n            \\'      </v-list-item-content>\\\\n\\' +\\r\\n            \\'    </v-list-item>\\\\n\\' +\\r\\n            \\'  </v-list>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            region: Object\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                panels: {},\\r\\n                disabled: false,\\r\\n                dense: false,\\r\\n                twoLine: false,\\r\\n                threeLine: false,\\r\\n                shaped: false,\\r\\n                flat: false,\\r\\n                subheader: false,\\r\\n                inactive: false,\\r\\n                subGroup: false,\\r\\n                nav: false,\\r\\n                avatar: false,\\r\\n                rounded: false,\\r\\n                changed: 0,\\r\\n            };\\r\\n        },\\r\\n\\r\\n        mounted: async function () {\\r\\n\\r\\n            this.panels = this.element[\\'#panels\\'];\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/containers/css/List.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/containers/Tab.js', 'Module => {\\r\\n    const data = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    const component = {\\r\\n        name: \\'S-Tab\\',\\r\\n        components,\\r\\n        template:\\r\\n            \\'  <v-card>\\\\n\\' +\\r\\n            \\'    <v-tabs v-model=\"panel\"\\\\n\\' +\\r\\n            \\'            :centered=\"centered\"\\\\n\\' +\\r\\n            \\'            :grow=\"grow\"\\\\n\\' +\\r\\n            \\'            :vertical=\"vertical\"\\\\n\\' +\\r\\n            \\'            :right=\"right\">\\\\n\\' +\\r\\n            \\'      <v-tab v-for=\"(panel, key) in panels\" :key=\"`${key}-tab-header-${panels.length}`\">\\\\n\\' +\\r\\n            \\'        {{ panel[\\\\\\'#title\\\\\\'] }}\\\\n\\' +\\r\\n            \\'      </v-tab>\\\\n\\' +\\r\\n            \\'    </v-tabs>\\\\n\\' +\\r\\n            \\'\\\\n\\' +\\r\\n            \\'    <v-tabs-items v-model=\"panel\">\\\\n\\' +\\r\\n            \\'      <v-tab-item v-for=\"(panel, key) in panels\" :key=\"`${key}-tab-content-${panels.length}`\">\\\\n\\' +\\r\\n            \\'        <v-card flat>\\\\n\\' +\\r\\n            \\'          <v-card-text>\\\\n\\' +\\r\\n            \\'            <component v-for=\"(renderElement, element) in panel[\\\\\\'#content\\\\\\']\"\\\\n\\' +\\r\\n            \\'                       :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\\\n\\' +\\r\\n            \\'                       :renderElement=\"renderElement\"\\\\n\\' +\\r\\n            \\'                       :element=\"element\"\\\\n\\' +\\r\\n            \\'                       :key=\"`${element}.${changed}`\"\\\\n\\' +\\r\\n            \\'                       :region=\"region\"/>\\\\n\\' +\\r\\n            \\'          </v-card-text>\\\\n\\' +\\r\\n            \\'        </v-card>\\\\n\\' +\\r\\n            \\'      </v-tab-item>\\\\n\\' +\\r\\n            \\'    </v-tabs-items>\\\\n\\' +\\r\\n            \\'  </v-card>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            region: Object\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                panels: {},\\r\\n                panel: 1,\\r\\n                centered: false,\\r\\n                grow: true,\\r\\n                vertical: false,\\r\\n                right: false,\\r\\n                changed: 0,\\r\\n            };\\r\\n        },\\r\\n\\r\\n        mounted: async function () {\\r\\n\\r\\n            this.panels = this.element[\\'#panels\\'];\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n    Module.appendStyle(`src/containers/css/Tab.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Button.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'S-Button\\',\\r\\n        template:\\r\\n            \\'<v-btn\\' +\\r\\n            \\'   :absolute=\"absolute\"\\' +\\r\\n            \\'   :active-class=\"activeClass\"\\' +\\r\\n            \\'   :append=\"append\"\\' +\\r\\n            \\'   :block=\"block\"\\' +\\r\\n            \\'   :bottom=\"bottom\"\\' +\\r\\n            \\'   :color=\"color\"\\' +\\r\\n            \\'   :dark=\"dark\"\\' +\\r\\n            \\'   :depressed=\"depressed\"\\' +\\r\\n            \\'   :disabled=\"disabled\"\\' +\\r\\n            \\'   :elevation=\"elevation\"\\' +\\r\\n            \\'   :exact=\"exact\"\\' +\\r\\n            \\'   :exact-active-class=\"exactActiveClass\"\\' +\\r\\n            \\'   :fab=\"fab\"\\' +\\r\\n            \\'   :fixed=\"fixed\"\\' +\\r\\n            \\'   :height=\"height\"\\' +\\r\\n            \\'   :href=\"href\"\\' +\\r\\n            \\'   :icon=\"icon\"\\' +\\r\\n            \\'   :input-value=\"inputValue\"\\' +\\r\\n            \\'   :large=\"large\"\\' +\\r\\n            \\'   :left=\"left\"\\' +\\r\\n            \\'   :light=\"light\"\\' +\\r\\n            \\'   :link=\"link\"\\' +\\r\\n            \\'   :loading=\"loading\"\\' +\\r\\n            \\'   :max-height=\"maxHeight\"\\' +\\r\\n            \\'   :max-width=\"maxWidth\"\\' +\\r\\n            \\'   :min-height=\"minHeight\"\\' +\\r\\n            \\'   :min-width=\"minWidth\"\\' +\\r\\n            \\'   :nuxt=\"nuxt\"\\' +\\r\\n            \\'   :outlined=\"outlined\"\\' +\\r\\n            \\'   :replace=\"replace\"\\' +\\r\\n            \\'   :retain-focus-on-click=\"retainFocusOnClick\"\\' +\\r\\n            \\'   :right=\"right\"\\' +\\r\\n            \\'   :ripple=\"ripple\"\\' +\\r\\n            \\'   :rounded=\"rounded\"\\' +\\r\\n            \\'   :shaped=\"shaped\"\\' +\\r\\n            \\'   :small=\"small\"\\' +\\r\\n            \\'   :tag=\"tag\"\\' +\\r\\n            \\'   :target=\"target\"\\' +\\r\\n            \\'   :text=\"text\"\\' +\\r\\n            \\'   :tile=\"tile\"\\' +\\r\\n            \\'   :to=\"to\"\\' +\\r\\n            \\'   :top=\"top\"\\' +\\r\\n            \\'   :type=\"type\"\\' +\\r\\n            \\'   :value=\"value\"\\' +\\r\\n            \\'   :width=\"width\"\\' +\\r\\n            \\'   :x-large=\"xLarge\"\\' +\\r\\n            \\'   :x-small=\"xSmall\">\\' +\\r\\n            \\'       <v-icon left v-if=\"appendIcon\">{{ appendIcon }}</v-icon>\\' +\\r\\n            \\'       {{ title }}\\' +\\r\\n            \\'       <v-icon right v-if=\"prependIcon\">{{ prependIcon }}</v-icon>\\' +\\r\\n            \\'</v-btn>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                title: \"\",\\r\\n                appendIcon: false,\\r\\n                prependIcon: false,\\r\\n                absolute: false,\\r\\n                activeClass: \\'\\',\\r\\n                append: false,\\r\\n                block: false,\\r\\n                bottom: false,\\r\\n                color: undefined,\\r\\n                dark: false,\\r\\n                depressed: false,\\r\\n                disabled: false,\\r\\n                elevation: undefined,\\r\\n                exact: false,\\r\\n                exactActiveClass: undefined,\\r\\n                fab: false,\\r\\n                fixed: false,\\r\\n                height: undefined,\\r\\n                href: undefined,\\r\\n                icon: false,\\r\\n                inputValue: undefined,\\r\\n                large: false,\\r\\n                left: false,\\r\\n                light: false,\\r\\n                link: false,\\r\\n                loading: false,\\r\\n                maxHeight: undefined,\\r\\n                maxWidth: undefined,\\r\\n                minHeight: undefined,\\r\\n                minWidth: undefined,\\r\\n                nuxt: false,\\r\\n                outlined: false,\\r\\n                replace: false,\\r\\n                retainFocusOnClick: false,\\r\\n                right: false,\\r\\n                ripple: undefined,\\r\\n                rounded: false,\\r\\n                shaped: false,\\r\\n                small: false,\\r\\n                tag: \"button\",\\r\\n                target: undefined,\\r\\n                text: false,\\r\\n                tile: false,\\r\\n                to: undefined,\\r\\n                top: false,\\r\\n                type: \"button\",\\r\\n                value: undefined,\\r\\n                width: undefined,\\r\\n                xLarge: false,\\r\\n                xSmall: false,\\r\\n            };\\r\\n        },\\r\\n\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n    Module.appendStyle(`src/elements/css/Button.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Colorpicker.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'Color-Picker\\',\\r\\n        template:\\r\\n            \\'<v-color-picker\\' +\\r\\n            \\'      :style=\"style\" \\' +\\r\\n            \\'      :class=\"classCSS\" \\' +\\r\\n            \\'      v-model=\"value\"\\' +\\r\\n            \\'      :canvas-height=\"canvasHeight\"\\' +\\r\\n            \\'      :hide-canvas=\"hideCanvas\"\\' +\\r\\n            \\'      :hide-inputs=\"hideInputs\"\\' +\\r\\n            \\'      :hide-mode-switch=\"hideModeSwitch\"\\' +\\r\\n            \\'      :mode=\"mode\"\\' +\\r\\n            \\'      :show-swatches=\"showSwatches\"\\' +\\r\\n            \\'      :swatches=\"swatches\"\\' +\\r\\n            \\'      :swatches-max-height=\"swatchesMaxHeight\"\\' +\\r\\n            \\'      :width=\"canvasHeight\"\\' +\\r\\n            \\'  />\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                value: {},\\r\\n                canvasHeight: \"\",\\r\\n                hideCanvas: false,\\r\\n                hideModeSwitch: false,\\r\\n                hideInputs: false,\\r\\n                mode: \\'rgba\\',\\r\\n                showSwatches: false,\\r\\n                swatches: undefined,\\r\\n                swatchesMaxHeight: 150,\\r\\n                width: 300,\\r\\n                info: {},\\r\\n                style: {},\\r\\n                classCSS: {},\\r\\n            };\\r\\n        },\\r\\n        watch: {\\r\\n            value: {\\r\\n                handler: function (value) {\\r\\n                    this.$route.params[this.element] = value;\\r\\n                    this.$trigger(\\'input_change\\', this.element);\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n\\r\\n            this.info = this.region.regionRaw.info;\\r\\n\\r\\n            this.$route.params[this.element] = this.value;\\r\\n        },\\r\\n    };\\r\\n    Module.appendStyle(`src/elements/css/Colorpicker.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Button.css', 'div.v-text-field {\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot {\\r\\n  background-color: var(--background) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot input,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\\r\\ndiv.v-text-field > .v-input__control div.v-messages {\\r\\n  color: var(--font) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\\r\\n  color: var(--accent) !important;\\r\\n  border-color: var(--accent) !important;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Colorpicker.css', 'div.v-text-field > .v-input__control > .v-input__slot {\\r\\n    background-color: var(--background) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot input,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\\r\\ndiv.v-text-field > .v-input__control div.v-messages {\\r\\n    color: var(--font) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\\r\\n    color: var(--accent) !important;\\r\\n    border-color: var(--accent) !important;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Image.css', '.tile-image-editor #tile-image {\\r\\n    display: block;\\r\\n    max-width: 100%;\\r\\n}\\r\\n.tile-image-editor .image-editor-item {\\r\\n    margin-top: 20px;\\r\\n    margin-bottom: 20px;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Paragraph.css', 'div.v-text-field {\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot {\\r\\n  background-color: var(--background) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot input,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\\r\\ndiv.v-text-field > .v-input__control div.v-messages {\\r\\n  color: var(--font) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\\r\\n  color: var(--accent) !important;\\r\\n  border-color: var(--accent) !important;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Sound.css', '.cursor {\\r\\n    background-color: black;\\r\\n}\\r\\n\\r\\n.selection.segment {\\r\\n    background-color: rgba(0, 0, 0, 0.2);\\r\\n}\\r\\n\\r\\n.selection.point {\\r\\n    background-color: red;\\r\\n}\\r\\n\\r\\n> h2 {\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n    border-bottom: 1px solid;\\r\\n    font-weight: initial;\\r\\n    padding-bottom: 5px;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Switch.css', 'div.v-input--switch {\\r\\n    margin-top: 20px;\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\n\\r\\ndiv.v-input--switch > .v-input__control > .v-input__slot {\\r\\n    background-color: var(--background) !important;\\r\\n}\\r\\n\\r\\ndiv.v-input--switch > .v-input__control > .v-input__slot label.v-label,\\r\\ndiv.v-input--switch > .v-input__control div.v-messages {\\r\\n    color: var(--font) !important;\\r\\n}\\r\\n\\r\\ndiv.v-input--switch > .v-input__control > .v-input__slot button.v-icon,\\r\\ndiv.v-input--switch > .v-input__control > .v-input__slot .primary--text {\\r\\n    color: var(--accent) !important;\\r\\n    border-color: var(--accent) !important;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Textarea.css', 'div.v-textarea {\\r\\n    margin-top: 20px;\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\ndiv.v-textarea > .v-input__control > .v-input__slot {\\r\\n    background-color: var(--background) !important;\\r\\n}\\r\\ndiv.v-textarea > .v-input__control > .v-input__slot textarea, div.v-textarea > .v-input__control > .v-input__slot label, div.v-textarea > .v-input__control > .v-input__slot div.v-messages {\\r\\n    color: var(--font) !important;\\r\\n}\\r\\ndiv.v-textarea > .v-input__control > .v-input__slot button.v-icon, div.v-textarea > .v-input__control > .v-input__slot > fieldset {\\r\\n    color: var(--accent) !important;\\r\\n    border-color: var(--accent) !important;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Textfield.css', 'div.v-text-field {\\r\\n    margin-top: 20px;\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot {\\r\\n    background-color: var(--background) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot input,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\\r\\ndiv.v-text-field > .v-input__control div.v-messages {\\r\\n    color: var(--font) !important;\\r\\n}\\r\\n\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\\r\\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\\r\\n    color: var(--accent) !important;\\r\\n    border-color: var(--accent) !important;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/css/Tile.css', '.tile {\\r\\n    overflow: hidden;\\r\\n}\\r\\n\\r\\n/*\\r\\n Default tile.\\r\\n*/\\r\\n\\r\\n.tile.default {\\r\\n    display: grid;\\r\\n    grid-template-areas:\\r\\n            \\'text text\\'\\r\\n            \\'text text\\';\\r\\n    grid-template-columns: 50% 50%;\\r\\n    grid-template-rows: 50% 50%;\\r\\n}\\r\\n\\r\\n.tile.default > .v-card__text {\\r\\n    grid-area: text;\\r\\n}\\r\\n\\r\\n.tile.default > .v-image {\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n/*\\r\\n Image tile.\\r\\n*/\\r\\n\\r\\n.tile.image {\\r\\n    background-color: transparent !important;\\r\\n    box-shadow: none !important;\\r\\n\\r\\n    display: grid;\\r\\n    grid-template-areas:\\r\\n            \\'image image\\'\\r\\n            \\'image image\\';\\r\\n    grid-template-columns: 50% 50%;\\r\\n    grid-template-rows: 50% 50%;\\r\\n}\\r\\n\\r\\n.tile.image > .v-card__text {\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n.tile.image > .v-image {\\r\\n    grid-area: image;\\r\\n}\\r\\n\\r\\n\\r\\n/*\\r\\n Image tile.\\r\\n*/\\r\\n\\r\\n.tile.horizontal-50-50 {\\r\\n    display: grid;\\r\\n    grid-template-areas:\\r\\n            \\'text text\\'\\r\\n            \\'image image\\';\\r\\n    grid-template-columns: 50% 50%;\\r\\n    grid-template-rows: 50% 50%;\\r\\n}\\r\\n\\r\\n.tile.horizontal-50-50 > .v-card__text {\\r\\n    grid-area: text;\\r\\n}\\r\\n\\r\\n.tile.horizontal-50-50 > .v-image {\\r\\n    grid-area: image;\\r\\n}\\r\\n\\r\\n\\r\\n/*\\r\\n Image tile.\\r\\n*/\\r\\n\\r\\n.tile.vertical-50-50 {\\r\\n    display: grid;\\r\\n    grid-template-areas:\\r\\n            \\'text image\\'\\r\\n            \\'text image\\';\\r\\n    grid-template-columns: 50% 50%;\\r\\n    grid-template-rows: 50% 50%;\\r\\n}\\r\\n\\r\\n.tile.vertical-50-50 > .v-card__text {\\r\\n    grid-area: text;\\r\\n}\\r\\n\\r\\n.tile.vertical-50-50 > .v-image {\\r\\n    grid-area: image;\\r\\n}');\r\n        await this.fileSystem.write('/modules/core/src/elements/custom/Tile.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'Tile\\',\\r\\n        template:\\r\\n            \\'<v-card \\' +\\r\\n            \\'       v-ripple\\' +\\r\\n            \\'       v-touch:tap=\"click\"\\' +\\r\\n            \\'       width=\"150px\" \\' +\\r\\n            \\'       height=\"150px\" \\' +\\r\\n            \\'       :color=\"backgroundColor\" \\' +\\r\\n            \\'       class=\"tile\" \\' +\\r\\n            \\'       :class=\"classes\">\\' +\\r\\n            \\'   <v-card-text :style=\"{ color: textColor }\">{{ title }}</v-card-text>\\' +\\r\\n            \\'   <v-img v-if=\"src !== undefined\" :src=\"src\" width=\"150px\" height=\"150px\" :color=\"backgroundColor\">\\' +\\r\\n            \\'   </v-img>\\' +\\r\\n            \\'</v-card>\\',\\r\\n        data() {\\r\\n            return {\\r\\n                title: \\'\\',\\r\\n                backgroundColor: \\'\\',\\r\\n                textColor: \\'#000000\\',\\r\\n                changed: 0,\\r\\n                src: undefined,\\r\\n                audio: [],\\r\\n                classes: [\\'default\\'],\\r\\n                images: [],\\r\\n                sounds: [],\\r\\n                update: [],\\r\\n            };\\r\\n        },\\r\\n        watch: {\\r\\n            images: {\\r\\n                handler: function (value) {\\r\\n                    if (value.length === 0) {\\r\\n                        this.src = \\'\\';\\r\\n                        return;\\r\\n                    }\\r\\n                    const fileReader = new FileReader()\\r\\n                    fileReader.onload = () => {\\r\\n                        this.src = fileReader.result;\\r\\n                    }\\r\\n                    fileReader.readAsDataURL(value[0]);\\r\\n                },\\r\\n                deep: true\\r\\n            },\\r\\n            sounds: {\\r\\n                handler: function (value) {\\r\\n                    if (value.length === 0) {\\r\\n                        this.src = \\'\\';\\r\\n                        return;\\r\\n                    }\\r\\n                    const fileReader = new FileReader()\\r\\n                    fileReader.onload = () => {\\r\\n                        this.audio = new Audio(fileReader.result);\\r\\n                    }\\r\\n                    fileReader.readAsDataURL(value[0]);\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        events: {\\r\\n            input_change: function (event, value) {\\r\\n                const params = this.$route.params;\\r\\n\\r\\n                if (!(value in params)) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                const update_length = Object.keys(this.update).length;\\r\\n                let found = undefined;\\r\\n                for (let i = 0; i < update_length; i++) {\\r\\n                    const update = this.update[i];\\r\\n\\r\\n                    if (update.value === value) {\\r\\n                        found = update;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (found === undefined) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                this[found.key] = params[value];\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                let value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (value.includes(\\'~\\')) {\\r\\n                    this.update.push({\\r\\n                        key: key.replace(\\'#\\', \\'\\'),\\r\\n                        value: value.replace(\\'~\\', \\'\\')\\r\\n                    });\\r\\n\\r\\n                    //continue;\\r\\n                    if (key.replace(\\'#\\', \\'\\') in this && value.replace(\\'~\\', \\'\\') in this.$route.params) {\\r\\n                        value = this.$route.params[value.replace(\\'~\\', \\'\\')];\\r\\n                    }\\r\\n                    else {\\r\\n                        continue;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n        methods: {\\r\\n            click: function () {\\r\\n                if (this.audio.constructor.name !== \\'HTMLAudioElement\\') {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                this.audio.pause();\\r\\n                this.audio.currentTime = 0;\\r\\n                this.audio.play();\\r\\n            }\\r\\n        },\\r\\n        destroyed: function () {\\r\\n            if (this.audio.constructor.name !== \\'HTMLAudioElement\\') {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.audio.pause();\\r\\n        }\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/elements/css/Tile.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/custom/tile/AddTileButton.js', 'Module => {\\r\\n    const data = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    /** TODO: convert this into a container. */\\r\\n    const component = {\\r\\n        name: \\'SpeedDial\\',\\r\\n        components,\\r\\n        template:\\r\\n            \\'<v-speed-dial\\' +\\r\\n            \\'      v-model=\"fab\"\\' +\\r\\n            \\'      fixed\\' +\\r\\n            \\'      bottom\\' +\\r\\n            \\'      right\\' +\\r\\n            \\'      direction=\"top\"\\' +\\r\\n            \\'    >\\' +\\r\\n            \\'      <template v-slot:activator>\\' +\\r\\n            \\'        <v-btn\\' +\\r\\n            \\'          color=\"blue darken-2\"\\' +\\r\\n            \\'          outlined\\' +\\r\\n            \\'          dark\\' +\\r\\n            \\'          fab\\' +\\r\\n            \\'        >\\' +\\r\\n            \\'          <v-icon v-if=\"fab\">\\' +\\r\\n            \\'            close\\' +\\r\\n            \\'          </v-icon>\\' +\\r\\n            \\'          <v-icon v-else>\\' +\\r\\n            \\'            more_vert\\' +\\r\\n            \\'          </v-icon>\\' +\\r\\n            \\'        </v-btn>\\' +\\r\\n            \\'      </template>\\' +\\r\\n            \\'      <component v-for=\"(renderElement, element) in content\"\\' +\\r\\n            \\'              :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\' +\\r\\n            \\'              :renderElement=\"renderElement\"\\' +\\r\\n            \\'              :element=\"element\"\\' +\\r\\n            \\'              :key=\"`${element}.${changed}`\"\\' +\\r\\n            \\'              :region=\"region\"/>\\' +\\r\\n            \\'</v-speed-dial>\\',\\r\\n        data() {\\r\\n            return {\\r\\n                title: \\'\\',\\r\\n                backgroundColor: \\'\\',\\r\\n                content: [],\\r\\n                textColor: \\'#000000\\',\\r\\n                changed: 0,\\r\\n                src: undefined,\\r\\n                audio: [],\\r\\n                to: {},\\r\\n                classes: [\\'default\\'],\\r\\n                images: [],\\r\\n                update: [],\\r\\n                fab: false,\\r\\n            };\\r\\n        },\\r\\n        watch: {\\r\\n            images: {\\r\\n                handler: function (value) {\\r\\n                    if (value.length === 0) {\\r\\n                        this.src = \\'\\';\\r\\n                        return;\\r\\n                    }\\r\\n                    const fileReader = new FileReader()\\r\\n                    fileReader.onload = () => {\\r\\n                        this.src = fileReader.result;\\r\\n                    }\\r\\n                    fileReader.readAsDataURL(value[0]);\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                let value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n        methods: {\\r\\n            addtile: function () {\\r\\n                let path;\\r\\n\\r\\n                if (\\'path\\' in this.$route.params) {\\r\\n                    path = this.$route.params[\\'path\\'] || \\'/soundboard\\';\\r\\n                }\\r\\n\\r\\n\\r\\n                if (\\'path\\' in this.$route.params) {\\r\\n                    path = this.$route.params[\\'path\\'] || \\'/soundboard\\';\\r\\n                }\\r\\n\\r\\n                this.$router.push({\\r\\n                    name: \"tile.templates\",\\r\\n                })\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/custom/tile/TileTemplate.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'TileTemplate\\',\\r\\n        template:\\r\\n            \\'<v-card \\' +\\r\\n            \\'       v-ripple\\' +\\r\\n            \\'       v-touch:tap=\"click\"\\' +\\r\\n            \\'       :width=\"size\" \\' +\\r\\n            \\'       :height=\"size\" \\' +\\r\\n            \\'       :color=\"backgroundColor\" \\' +\\r\\n            \\'       class=\"tile\" \\' +\\r\\n            \\'       :class=\"classes\"\\' +\\r\\n            \\'       :style=\"style\">\\' +\\r\\n            \\'   <v-card-text :style=\"{ color: textColor }\">{{ title }}</v-card-text>\\' +\\r\\n            \\'   <v-img v-if=\"src !== undefined\" :src=\"src\" width=\"150px\" height=\"150px\" :color=\"backgroundColor\">\\' +\\r\\n            \\'   </v-img>\\' +\\r\\n            \\'</v-card>\\',\\r\\n        data() {\\r\\n            return {\\r\\n                title: \\'\\',\\r\\n                backgroundColor: \\'\\',\\r\\n                size: `${window.innerWidth / 4}px`,\\r\\n                textColor: \\'#000000\\',\\r\\n                changed: 0,\\r\\n                src: undefined,\\r\\n                audio: [],\\r\\n                classes: [\\'default\\'],\\r\\n                style: {\\r\\n\\r\\n                },\\r\\n                images: [],\\r\\n                update: [],\\r\\n                to: [],\\r\\n            };\\r\\n        },\\r\\n        watch: {\\r\\n            images: {\\r\\n                handler: function (value) {\\r\\n                    if (value.length === 0) {\\r\\n                        this.src = \\'\\';\\r\\n                        return;\\r\\n                    }\\r\\n                    const fileReader = new FileReader()\\r\\n                    fileReader.onload = () => {\\r\\n                        this.src = fileReader.result;\\r\\n                    }\\r\\n                    fileReader.readAsDataURL(value[0]);\\r\\n                },\\r\\n                deep: true\\r\\n            },\\r\\n        },\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        events: {\\r\\n            input_change: function (event, value) {\\r\\n                const params = this.$route.params;\\r\\n\\r\\n                if (!(value in params)) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                const update_length = Object.keys(this.update).length;\\r\\n                let found = undefined;\\r\\n                for (let i = 0; i < update_length; i++) {\\r\\n                    const update = this.update[i];\\r\\n\\r\\n                    if (update.value === value) {\\r\\n                        found = update;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (found === undefined) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                this[found.key] = params[value];\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                let value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n        updated: async function () {\\r\\n            const containers = document.querySelector(\\'.one-column\\');\\r\\n            const computedWidth = containers.offsetWidth;\\r\\n\\r\\n            // todo: Look into this.\\r\\n            this.size = `${(window.innerWidth - 50)/ 4}px`\\r\\n            this.style.margin = \\'2px\\';\\r\\n\\r\\n            /*const sortable = new Draggable.Swappable(containers, {\\r\\n                draggable: \\'.tile\\',\\r\\n                mirror: {\\r\\n                    appendTo: \\'.one-column\\',\\r\\n                    constrainDimensions: true,\\r\\n                },\\r\\n                plugins: [Draggable.Plugins.SwapAnimation],\\r\\n                sortAnimation: {\\r\\n                    duration: 200,\\r\\n                },\\r\\n            });*/\\r\\n        },\\r\\n        methods: {\\r\\n            click: function () {\\r\\n                this.$router.push(this.to)\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/elements/css/Tile.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Dropdown.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'Dropdown\\',\\r\\n        template:\\r\\n            \\'<v-select\\' +\\r\\n            \\'   v-model=\"value\"\\' +\\r\\n            \\'   :label=\"title\"\\' +\\r\\n            \\'   :hint=\"description\"\\' +\\r\\n            \\'   :append-icon=\"appendIcon\"\\' +\\r\\n            \\'   :append-outer-icon=\"appendOuterIcon\"\\' +\\r\\n            \\'   :attach=\"attach\"\\' +\\r\\n            \\'   :autofocus=\"autofocus\"\\' +\\r\\n            \\'   :background-color=\"backgroundColor\"\\' +\\r\\n            \\'   :cache-items=\"cacheItems\"\\' +\\r\\n            \\'   :chips=\"chips\"\\' +\\r\\n            \\'   :clear-icon=\"clearIcon\"\\' +\\r\\n            \\'   :clearable=\"clearable\"\\' +\\r\\n            \\'   :color=\"color\"\\' +\\r\\n            \\'   :counter=\"counter\"\\' +\\r\\n            \\'   :counter-value=\"counterValue\"\\' +\\r\\n            \\'   :dark=\"dark\"\\' +\\r\\n            \\'   :deletable-chips=\"deletableChips\"\\' +\\r\\n            \\'   :dense=\"dense\"\\' +\\r\\n            \\'   :disable-lookup=\"disableLookup\"\\' +\\r\\n            \\'   :disabled=\"disabled\"\\' +\\r\\n            \\'   :eager=\"eager\"\\' +\\r\\n            \\'   :error=\"error\"\\' +\\r\\n            \\'   :error-count=\"errorCount\"\\' +\\r\\n            \\'   :error-messages=\"errorMessages\"\\' +\\r\\n            \\'   :filled=\"filled\"\\' +\\r\\n            \\'   :flat=\"flat\"\\' +\\r\\n            \\'   :full-width=\"fullWidth\"\\' +\\r\\n            \\'   :height=\"height\"\\' +\\r\\n            \\'   :hide-details=\"hideDetails\"\\' +\\r\\n            \\'   :hide-selected=\"hideSelected\"\\' +\\r\\n            \\'   :id=\"id\"\\' +\\r\\n            \\'   :item-color=\"itemColor\"\\' +\\r\\n            \\'   :item-disabled=\"itemDisabled\"\\' +\\r\\n            \\'   :item-text=\"itemText\"\\' +\\r\\n            \\'   :item-value=\"itemValue\"\\' +\\r\\n            \\'   :items=\"items\"\\' +\\r\\n            \\'   :light=\"light\"\\' +\\r\\n            \\'   :loader-height=\"loaderHeight\"\\' +\\r\\n            \\'   :loading=\"loading\"\\' +\\r\\n            \\'   :menu-props=\"menuProps\"\\' +\\r\\n            \\'   :messages=\"messages\"\\' +\\r\\n            \\'   :multiple=\"multiple\"\\' +\\r\\n            \\'   :no-data-text=\"noDataText\"\\' +\\r\\n            \\'   :open-on-clear=\"openOnClear\"\\' +\\r\\n            \\'   :outlined=\"outlined\"\\' +\\r\\n            \\'   :persistent-hint=\"persistentHint\"\\' +\\r\\n            \\'   :placeholder=\"placeholder\"\\' +\\r\\n            \\'   :prefix=\"prefix\"\\' +\\r\\n            \\'   :prepend-icon=\"prependIcon\"\\' +\\r\\n            \\'   :prepend-inner-icon=\"prependInnerIcon\"\\' +\\r\\n            \\'   :readonly=\"readonly\"\\' +\\r\\n            \\'   :return-object=\"returnObject\"\\' +\\r\\n            \\'   :reverse=\"reverse\"\\' +\\r\\n            \\'   :rounded=\"rounded\"\\' +\\r\\n            \\'   :rules=\"rules\"\\' +\\r\\n            \\'   :shaped=\"shaped\"\\' +\\r\\n            \\'   :single-line=\"singleLine\"\\' +\\r\\n            \\'   :small-chips=\"smallChips\"\\' +\\r\\n            \\'   :solo=\"solo\"\\' +\\r\\n            \\'   :solo-inverted=\"soloInverted\"\\' +\\r\\n            \\'   :success=\"success\"\\' +\\r\\n            \\'   :success-messages=\"successMessages\"\\' +\\r\\n            \\'   :suffix=\"suffix\"\\' +\\r\\n            \\'   :type=\"type\"\\' +\\r\\n            \\'   :validate-on-blur=\"validateOnBlur\"\\' +\\r\\n            \\'></v-select>\\',\\r\\n        data() {\\r\\n            return {\\r\\n                value: \"\",\\r\\n                title: \"\",\\r\\n                description: \"\",\\r\\n                appendIcon: \\'$dropdown\\',\\r\\n                appendOuterIcon: undefined,\\r\\n                attach: false,\\r\\n                autofocus: false,\\r\\n                backgroundColor: undefined,\\r\\n                cacheItems: false,\\r\\n                chips: false,\\r\\n                clearIcon: \\'$clear\\',\\r\\n                clearable: false,\\r\\n                color: undefined,\\r\\n                counter: undefined,\\r\\n                counterValue: null,\\r\\n                dark: false,\\r\\n                deletableChips: false,\\r\\n                dense: false,\\r\\n                disableLookup: false,\\r\\n                disabled: false,\\r\\n                eager: false,\\r\\n                error: false,\\r\\n                errorCount: 1,\\r\\n                errorMessages: [],\\r\\n                filled: false,\\r\\n                flat: false,\\r\\n                fullWidth: false,\\r\\n                height: undefined,\\r\\n                hideDetails: undefined,\\r\\n                hideSelected: false,\\r\\n                hint: undefined,\\r\\n                id: undefined,\\r\\n                itemColor: \\'primary\\',\\r\\n                itemDisabled: \"disabled\",\\r\\n                itemText: \"text\",\\r\\n                itemValue: \"value\",\\r\\n                items: [],\\r\\n                label: undefined,\\r\\n                light: false,\\r\\n                loaderHeight: \"2\",\\r\\n                loading: false,\\r\\n                menuProps: {\\r\\n                    \\'closeOnClick\\': false,\\r\\n                    \\'closeOnContentClick\\': false,\\r\\n                    \\'disableKeys\\': true,\\r\\n                    \\'openOnClick\\': false,\\r\\n                    \\'maxHeight\\': 304\\r\\n                },\\r\\n                messages: [],\\r\\n                multiple: false,\\r\\n                noDataText: \\'$vuetify.noDataText\\',\\r\\n                openOnClear: false,\\r\\n                outlined: false,\\r\\n                persistentHint: true,\\r\\n                placeholder: undefined,\\r\\n                prefix: undefined,\\r\\n                prependIcon: undefined,\\r\\n                prependInnerIcon: undefined,\\r\\n                readonly: false,\\r\\n                returnObject: false,\\r\\n                reverse: false,\\r\\n                rounded: false,\\r\\n                rules: [],\\r\\n                shaped: false,\\r\\n                singleLine: false,\\r\\n                smallChips: false,\\r\\n                solo: false,\\r\\n                soloInverted: false,\\r\\n                success: false,\\r\\n                successMessages: [],\\r\\n                suffix: undefined,\\r\\n                type: \\'text\\',\\r\\n                validateOnBlur: false,\\r\\n            };\\r\\n        },\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        watch: {\\r\\n            value: {\\r\\n                handler: function (value) {\\r\\n                    this.$route.params[this.element] = value;\\r\\n                    this.$trigger(\\'input_change\\', this.element);\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n\\r\\n            const info = this.region.regionRaw.info;\\r\\n\\r\\n            this.$route.params[this.element] = this.value;\\r\\n        },\\r\\n    };\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Headline.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'S-Headline\\',\\r\\n        template:\\r\\n            \\'<v-card flat>\\' +\\r\\n            \\'    <v-card-title v-if=\"title\" v-html=\"title\"/>\\' +\\r\\n            \\'    <v-card-subtitle v-if=\"description\" v-html=\"description\"/>\\' +\\r\\n            \\'</v-card>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                title: \"\",\\r\\n                description: \"\",\\r\\n                size: 1,\\r\\n            };\\r\\n        },\\r\\n\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Image.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'S-ImageEditor\\',\\r\\n        template:\\r\\n            \\'<div class=\"tile-image-editor mb-5 px-2\">\\' +\\r\\n            \\'    <div>\\' +\\r\\n            \\'      <img id=\"tile-image\" :src=\"image\" @load=\"loaded\" />\\' +\\r\\n            \\'    </div>\\' +\\r\\n            \\'    <v-btn class=\"image-editor-item\" outlined :loading=\"loading\" block tile color=\"success\" @click=\"apply\">Apply</v-btn>\\' +\\r\\n            \\'  </div>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                title: \"\",\\r\\n                description: \"\",\\r\\n                value: [],\\r\\n                cropper: null,\\r\\n                image: null,\\r\\n                files: [],\\r\\n                to: undefined,\\r\\n                loading: false,\\r\\n            };\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n\\r\\n            // Exit if empty.\\r\\n            if (!this.files.length) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            try {\\r\\n                this.image = URL.createObjectURL(this.files[0]);\\r\\n            } catch (error) {\\r\\n                console.log(error);\\r\\n                console.warn(\"Object url could not be read.\");\\r\\n            }\\r\\n        },\\r\\n        methods: {\\r\\n            submit: function () {\\r\\n                if (!(\\'params\\' in this.to)) {\\r\\n                    this.to.params = {};\\r\\n                }\\r\\n\\r\\n                this.to.params = Object.assign(\\r\\n                    this.to.params,\\r\\n                    this.$route.params\\r\\n                );\\r\\n                this.loading = false;\\r\\n                this.$router.push(this.to)\\r\\n            },\\r\\n            apply: function () {\\r\\n                if (!this.cropper) {\\r\\n                    return;\\r\\n                }\\r\\n                this.loading = true;\\r\\n\\r\\n                this.cropper.getCroppedCanvas({\\r\\n                    maxWidth: 4096,\\r\\n                    maxHeight: 4096,\\r\\n                    fillColor: \"#fff\",\\r\\n                    imageSmoothingEnabled: false,\\r\\n                    imageSmoothingQuality: \"high\"\\r\\n                });\\r\\n\\r\\n                this.cropper.getCroppedCanvas().toBlob(blob => {\\r\\n                    this.value = [\\r\\n                        new File([blob], `edited_image.${Date.now()}`)\\r\\n                    ];\\r\\n\\r\\n                    this.$route.params[this.element] = this.value;\\r\\n                    this.submit();\\r\\n                }, \\'image/png\\', 100);\\r\\n            },\\r\\n            loaded: function () {\\r\\n                this.cropper = new Cropper(document.querySelector(\"#tile-image\"), {\\r\\n                    aspectRatio: 1,\\r\\n                    viewMode: 1,\\r\\n                    autoCrop: true\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/elements/css/Image.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Paragraph.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'S-Paragraph\\',\\r\\n        template:\\r\\n            \\'  <v-card\\' +\\r\\n            \\'   :flat=\"flat\">\\' +\\r\\n            \\'    <v-card-title v-html=\"title\"/>\\' +\\r\\n            \\'    <v-card-subtitle v-html=\"description\"/>\\' +\\r\\n            \\'    <v-card-text :style=\"{ color: textColor }\" v-html=\"value\"/>\\' +\\r\\n            \\'  </v-card>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                title: \"\",\\r\\n                description: \"\",\\r\\n                value: \"\",\\r\\n                flat: false,\\r\\n                textColor: \"\",\\r\\n                update: [],\\r\\n            };\\r\\n        },\\r\\n        events: {\\r\\n            input_change: function (event, value) {\\r\\n                const params = this.$route.params;\\r\\n\\r\\n                if (!(value in params)) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                const update_length = Object.keys(this.update).length;\\r\\n                let found = undefined;\\r\\n                for (let i = 0; i < update_length; i++) {\\r\\n                    const update = this.update[i];\\r\\n\\r\\n                    if (update.value === value) {\\r\\n                        found = update;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (found === undefined) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                this[found.key] = params[value];\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (value.constructor.name === \\'String\\' && value.includes(\\'~\\')) {\\r\\n                    this.update.push({\\r\\n                        key: key.replace(\\'#\\', \\'\\'),\\r\\n                        value: value.replace(\\'~\\', \\'\\')\\r\\n                    });\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n    };\\r\\n    \\r\\n    Module.appendStyle(`src/elements/css/Paragraph.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/RedirectButton.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'S-Redirect-Button\\',\\r\\n        template:\\r\\n            \\'<v-btn\\' +\\r\\n            \\'   v-if=\"show\"\\' +\\r\\n            \\'   @click=\"submit\"\\' +\\r\\n            \\'   :absolute=\"absolute\"\\' +\\r\\n            \\'   :active-class=\"activeClass\"\\' +\\r\\n            \\'   :append=\"append\"\\' +\\r\\n            \\'   :block=\"block\"\\' +\\r\\n            \\'   :bottom=\"bottom\"\\' +\\r\\n            \\'   :color=\"color\"\\' +\\r\\n            \\'   :dark=\"dark\"\\' +\\r\\n            \\'   :depressed=\"depressed\"\\' +\\r\\n            \\'   :disabled=\"disabled\"\\' +\\r\\n            \\'   :elevation=\"elevation\"\\' +\\r\\n            \\'   :exact=\"exact\"\\' +\\r\\n            \\'   :exact-active-class=\"exactActiveClass\"\\' +\\r\\n            \\'   :fab=\"fab\"\\' +\\r\\n            \\'   :fixed=\"fixed\"\\' +\\r\\n            \\'   :height=\"height\"\\' +\\r\\n            \\'   :href=\"href\"\\' +\\r\\n            \\'   :icon=\"icon\"\\' +\\r\\n            \\'   :input-value=\"inputValue\"\\' +\\r\\n            \\'   :large=\"large\"\\' +\\r\\n            \\'   :left=\"left\"\\' +\\r\\n            \\'   :light=\"light\"\\' +\\r\\n            \\'   :link=\"link\"\\' +\\r\\n            \\'   :loading=\"loading\"\\' +\\r\\n            \\'   :max-height=\"maxHeight\"\\' +\\r\\n            \\'   :max-width=\"maxWidth\"\\' +\\r\\n            \\'   :min-height=\"minHeight\"\\' +\\r\\n            \\'   :min-width=\"minWidth\"\\' +\\r\\n            \\'   :nuxt=\"nuxt\"\\' +\\r\\n            \\'   :outlined=\"outlined\"\\' +\\r\\n            \\'   :replace=\"replace\"\\' +\\r\\n            \\'   :retain-focus-on-click=\"retainFocusOnClick\"\\' +\\r\\n            \\'   :right=\"right\"\\' +\\r\\n            \\'   :ripple=\"ripple\"\\' +\\r\\n            \\'   :rounded=\"rounded\"\\' +\\r\\n            \\'   :shaped=\"shaped\"\\' +\\r\\n            \\'   :small=\"small\"\\' +\\r\\n            \\'   :tag=\"tag\"\\' +\\r\\n            \\'   :target=\"target\"\\' +\\r\\n            \\'   :text=\"text\"\\' +\\r\\n            \\'   :tile=\"tile\"\\' +\\r\\n            \\'   :top=\"top\"\\' +\\r\\n            \\'   :type=\"type\"\\' +\\r\\n            \\'   :value=\"value\"\\' +\\r\\n            \\'   :width=\"width\"\\' +\\r\\n            \\'   :x-large=\"xLarge\"\\' +\\r\\n            \\'   :x-small=\"xSmall\">\\' +\\r\\n            \\'       <v-icon left v-if=\"appendIcon\">{{ appendIcon }}</v-icon>\\' +\\r\\n            \\'       <v-icon v-if=\"centerIcon\">{{ centerIcon }}</v-icon>\\' +\\r\\n            \\'       <div v-else>{{ title }}</div>\\' +\\r\\n            \\'       <v-icon right v-if=\"prependIcon\">{{ prependIcon }}</v-icon>\\' +\\r\\n            \\'</v-btn>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n        },\\r\\n        events: {\\r\\n            input_change: function (event, value) {\\r\\n                const params = this.$route.params;\\r\\n\\r\\n                if (!(value in params)) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                const update_length = Object.keys(this.update).length;\\r\\n                let found = undefined;\\r\\n                for (let i = 0; i < update_length; i++) {\\r\\n                    const update = this.update[i];\\r\\n\\r\\n                    if (update.value === value) {\\r\\n                        found = update;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (found === undefined) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                this[found.key] = params[value];\\r\\n            }\\r\\n        },\\r\\n        watch: {\\r\\n            vif: {\\r\\n                handler: function (value) {\\r\\n                    if (Array.isArray(value)) {\\r\\n                        this.show = value.length !== 0;\\r\\n                    }\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                title: \"\",\\r\\n                vif: true,\\r\\n                show: true,\\r\\n                appendIcon: false,\\r\\n                prependIcon: false,\\r\\n                centerIcon: false,\\r\\n                absolute: false,\\r\\n                activeClass: \\'\\',\\r\\n                append: false,\\r\\n                block: false,\\r\\n                bottom: false,\\r\\n                color: undefined,\\r\\n                dark: false,\\r\\n                depressed: false,\\r\\n                disabled: false,\\r\\n                elevation: undefined,\\r\\n                exact: false,\\r\\n                exactActiveClass: undefined,\\r\\n                fab: false,\\r\\n                fixed: false,\\r\\n                height: undefined,\\r\\n                href: undefined,\\r\\n                icon: false,\\r\\n                inputValue: undefined,\\r\\n                large: false,\\r\\n                left: false,\\r\\n                light: false,\\r\\n                link: false,\\r\\n                loading: false,\\r\\n                maxHeight: undefined,\\r\\n                maxWidth: undefined,\\r\\n                minHeight: undefined,\\r\\n                minWidth: undefined,\\r\\n                nuxt: false,\\r\\n                outlined: false,\\r\\n                replace: false,\\r\\n                retainFocusOnClick: false,\\r\\n                right: false,\\r\\n                ripple: undefined,\\r\\n                rounded: false,\\r\\n                shaped: false,\\r\\n                small: false,\\r\\n                tag: \"button\",\\r\\n                target: undefined,\\r\\n                text: false,\\r\\n                tile: false,\\r\\n                to: undefined,\\r\\n                top: false,\\r\\n                type: \"button\",\\r\\n                value: undefined,\\r\\n                width: undefined,\\r\\n                xLarge: false,\\r\\n                xSmall: false,\\r\\n                update: []\\r\\n            };\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                let value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (value.constructor.name === \\'String\\' && value.includes(\\'~\\')) {\\r\\n                    this.update.push({\\r\\n                        key: key.replace(\\'#\\', \\'\\'),\\r\\n                        value: value.replace(\\'~\\', \\'\\')\\r\\n                    });\\r\\n\\r\\n                    if (key.replace(\\'#\\', \\'\\') in this && value.replace(\\'~\\', \\'\\') in this.$route.params) {\\r\\n                        value = this.$route.params[value.replace(\\'~\\', \\'\\')];\\r\\n                    } else {\\r\\n                        continue;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n        },\\r\\n        methods: {\\r\\n            submit: function () {\\r\\n                if (!(\\'params\\' in this.to)) {\\r\\n                    this.to.params = {};\\r\\n                }\\r\\n\\r\\n                this.to.params = Object.assign(\\r\\n                    this.to.params,\\r\\n                    this.$route.params\\r\\n                );\\r\\n                this.$router.push(this.to)\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n    Module.appendStyle(`src/elements/css/Button.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Sound.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'S-Sound\\',\\r\\n        template:\\r\\n            \\'<div>\\' +\\r\\n            \\'    <v-toolbar color=\"secondary\">\\' +\\r\\n            \\'      <v-btn v-if=\"state === \\\\\\'pause\\\\\\'\" icon @click=\"play\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">play_arrow</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'      <v-btn v-if=\"state === \\\\\\'play\\\\\\'\" icon @click=\"pause\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">pause</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'      <v-btn icon @click=\"stop\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">stop</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'\\' +\\r\\n            \\'      <v-spacer></v-spacer>\\' +\\r\\n            \\'\\' +\\r\\n            \\'      <v-btn v-if=\"cursor !== \\\\\\'cursor\\\\\\'\" icon @click=\"statechange(\\\\\\'cursor\\\\\\')\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">my_location</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'      <v-btn v-if=\"cursor !== \\\\\\'shift\\\\\\'\" icon @click=\"statechange(\\\\\\'shift\\\\\\')\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">open_with</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'\\' +\\r\\n            \\'      <v-btn v-if=\"cursor !== \\\\\\'select\\\\\\'\" icon @click=\"statechange(\\\\\\'select\\\\\\')\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">select_all</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'    </v-toolbar>\\' +\\r\\n            \\'\\' +\\r\\n            \\'   <div class=\"my-4\">\\' +\\r\\n            \\'    <v-slider\\' +\\r\\n            \\'        v-if=\"Playlist\"\\' +\\r\\n            \\'        class=\"my-10 audio-editor-item\"\\' +\\r\\n            \\'        color=\"accent\"\\' +\\r\\n            \\'        thumb-color=\"accent\"\\' +\\r\\n            \\'        track-fill-color=\"accent\"\\' +\\r\\n            \\'        append-icon=\"volume_up\"\\' +\\r\\n            \\'        prepend-icon=\"volume_down\"\\' +\\r\\n            \\'        v-model=\"MasterVolume\"\\' +\\r\\n            \\'        :min=\"1\"\\' +\\r\\n            \\'        :max=\"100\"\\' +\\r\\n            \\'        label=\"Volume\"\\' +\\r\\n            \\'        hint=\"Change the volume of the played tile.\"\\' +\\r\\n            \\'        persistent-hint\\' +\\r\\n            \\'    />\\' +\\r\\n            \\'   </div>\\' +\\r\\n            \\'\\' +\\r\\n            \\'    <div id=\"playlist\" class=\"mt-4 mb-10\"></div>\\' +\\r\\n            \\'\\' +\\r\\n            \\'   <div class=\"mt-3 mb-7\">\\' +\\r\\n            \\'    <v-slider\\' +\\r\\n            \\'        v-if=\"Playlist && cursor === \\\\\\'cursor\\\\\\'\"\\' +\\r\\n            \\'        class=\"audio-editor-item extra\"\\' +\\r\\n            \\'        v-model=\"CursorPosition\"\\' +\\r\\n            \\'        color=\"accent\"\\' +\\r\\n            \\'        thumb-color=\"accent\"\\' +\\r\\n            \\'        track-fill-color=\"accent\"\\' +\\r\\n            \\'        :min=\"0\"\\' +\\r\\n            \\'        :max=\"this.CursorPositionMax\"\\' +\\r\\n            \\'        :step=\"0.1\"\\' +\\r\\n            \\'        label=\"Cursor\"\\' +\\r\\n            \\'        hint=\"Set the cursor at the position you want to start playing from.\"\\' +\\r\\n            \\'        thumb-label=\"always\"\\' +\\r\\n            \\'        persistent-hint\\' +\\r\\n            \\'    />\\' +\\r\\n            \\'    <v-range-slider\\' +\\r\\n            \\'        v-if=\"Playlist && cursor === \\\\\\'select\\\\\\'\"\\' +\\r\\n            \\'        class=\"audio-editor-item extra\"\\' +\\r\\n            \\'        v-model=\"SelectionSegment\"\\' +\\r\\n            \\'        color=\"accent\"\\' +\\r\\n            \\'        thumb-color=\"accent\"\\' +\\r\\n            \\'        track-fill-color=\"accent\"\\' +\\r\\n            \\'        :min=\"0\"\\' +\\r\\n            \\'        :max=\"this.SelectionSegmentMax\"\\' +\\r\\n            \\'        :step=\"stepSize\"\\' +\\r\\n            \\'        label=\"Select\"\\' +\\r\\n            \\'        hint=\"Select the section you want to cut.\"\\' +\\r\\n            \\'        thumb-label=\"always\"\\' +\\r\\n            \\'        persistent-hint\\' +\\r\\n            \\'    />\\' +\\r\\n            \\'   </div>\\' +\\r\\n            \\'\\' +\\r\\n            \\'    <v-btn v-if=\"Playlist && cursor === \\\\\\'select\\\\\\'\" block depressed @click=\"trim\" color=\"secondary\">Trim</v-btn>\\' +\\r\\n            \\'\\' +\\r\\n            \\'    <v-toolbar v-if=\"cursor === \\\\\\'shift\\\\\\'\" class=\"audio-editor-item mt-6\" color=\"secondary\">\\' +\\r\\n            \\'      <v-btn icon @click=\"alignLeft\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">format_align_left</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'\\' +\\r\\n            \\'      <v-spacer></v-spacer>\\' +\\r\\n            \\'\\' +\\r\\n            \\'      <v-btn icon @click=\"moveLeft\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">chevron_left</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'      <v-btn icon @click=\"moveRight\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">chevron_right</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'    </v-toolbar>\\' +\\r\\n            \\'   <v-btn class=\"mb-3\" block color=\"success\" :loading=\"loading\" outlined @click=\"save\">\\' +\\r\\n            \\'       <v-icon left>save</v-icon>\\' +\\r\\n            \\'       Save\\' +\\r\\n            \\'   </v-btn>\\' +\\r\\n            \\'  </div>\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                title: \"\",\\r\\n                description: \"\",\\r\\n\\r\\n                window,\\r\\n\\r\\n                /** @type {Document} */\\r\\n                document,\\r\\n                state: \"pause\",\\r\\n                cursor: \"cursor\",\\r\\n                stepSize: 0.1,\\r\\n                trimmed: [0, 0],\\r\\n                MasterVolume: 50,\\r\\n                CursorPosition: 0,\\r\\n                CursorPositionMax: 0,\\r\\n                SelectionSegment: [0, 0],\\r\\n                Playlist: null,\\r\\n                EventEmitter: null,\\r\\n                files: [],\\r\\n                loading: false,\\r\\n                to: undefined,\\r\\n            };\\r\\n        },\\r\\n        watch: {\\r\\n            MasterVolume: function (val) {\\r\\n                if (val && this.Playlist) {\\r\\n                    this.EventEmitter.emit(\"mastervolumechange\", val);\\r\\n                }\\r\\n            },\\r\\n            CursorPosition: function (val) {\\r\\n                if (val && this.Playlist) {\\r\\n                    this.EventEmitter.emit(\"setcursorposition\", val);\\r\\n                }\\r\\n            },\\r\\n            SelectionSegment: function (val) {\\r\\n                if (val && this.Playlist) {\\r\\n                    this.EventEmitter.emit(\"select\", val[0], val[1]);\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n\\r\\n            // FIXME: This was created by me.\\r\\n            // ee.on(\\'setcursorposition\\', function (start) {\\r\\n            //     _this2.setTimeSelection(start, start);\\r\\n            //     _this2.drawRequest();\\r\\n            // });\\r\\n\\r\\n            this.Playlist = WaveformPlaylist.init({\\r\\n                samplesPerPixel: 3000,\\r\\n                mono: true,\\r\\n                waveHeight: 70,\\r\\n                container: document.getElementById(\"playlist\"),\\r\\n                state: \"cursor\",\\r\\n                colors: {\\r\\n                    waveOutlineColor: \\'#0000FF\\',\\r\\n                    timeColor: \\'#FF00FF\\',\\r\\n                    fadeColor: \\'#000000\\'\\r\\n                },\\r\\n                seekStyle: \"line\",\\r\\n                zoomLevels: [\\r\\n                    500,\\r\\n                    1000,\\r\\n                    3000,\\r\\n                    5000\\r\\n                ]\\r\\n            });\\r\\n\\r\\n            window.Playlist = this.Playlist;\\r\\n\\r\\n            await this.Playlist.load([]);\\r\\n\\r\\n            this.Playlist.initExporter();\\r\\n            this.EventEmitter = this.Playlist.getEventEmitter();\\r\\n            this.CursorPositionMax = this.Playlist.duration;\\r\\n            this.SelectionSegmentMax = this.Playlist.duration;\\r\\n\\r\\n            this.EventEmitter.on(\"finished\", () => {\\r\\n                this.state = \"pause\";\\r\\n            });\\r\\n\\r\\n            this.EventEmitter.on(\"audiosourcesrendered\", () => {\\r\\n                this.CursorPositionMax = this.Playlist.duration;\\r\\n                this.SelectionSegmentMax = this.Playlist.duration;\\r\\n            });\\r\\n\\r\\n            this.EventEmitter.on(\"finished\", () => {\\r\\n                this.CursorPositionMax = this.Playlist.duration;\\r\\n                this.SelectionSegmentMax = this.Playlist.duration;\\r\\n            });\\r\\n\\r\\n            this.EventEmitter.on(\"shift\", (time, track) => {\\r\\n                this.trimmed[0] += time;\\r\\n                this.trimmed[1] += time;\\r\\n\\r\\n                this.CursorPositionMax = this.Playlist.duration;\\r\\n                this.SelectionSegmentMax = this.Playlist.duration;\\r\\n            });\\r\\n\\r\\n            for (let i = 0; i < this.files.length; i++) {\\r\\n                const file = this.files[i];\\r\\n                this.EventEmitter.emit(\"newtrack\", file);\\r\\n            }\\r\\n\\r\\n            this.EventEmitter.on(\"audiosourcesloaded\", () => {\\r\\n            });\\r\\n\\r\\n            this.EventEmitter.on(\"audiosourcesrendered\", () => {\\r\\n\\r\\n                // We need to set the color manually for the audio viewer.\\r\\n                /** @type {NodeListOf<HTMLElement>} */\\r\\n                const canvases = this.document.querySelectorAll(\\'.playlist .channel canvas\\');\\r\\n\\r\\n                /*for (let i = 0; i < canvases.length; i++) {\\r\\n                    const canvas = canvases[i];\\r\\n                    canvas.style.backgroundColor = this.settings.theme().accent;\\r\\n                }*/\\r\\n            });\\r\\n\\r\\n            this.EventEmitter.on(\"audiorenderingfinished\", (type, blob) => {\\r\\n                this.value = [\\r\\n                    new File(\\r\\n                        [blob],\\r\\n                        `edited_sound.${Date.now()}`, {\\r\\n                            type: `audio/${type}`\\r\\n                        })\\r\\n                ];\\r\\n                this.$route.params[this.element] = this.value;\\r\\n                this.submit();\\r\\n            });\\r\\n\\r\\n        },\\r\\n        methods: {\\r\\n            submit: function () {\\r\\n                if (!(\\'params\\' in this.to)) {\\r\\n                    this.to.params = {};\\r\\n                }\\r\\n\\r\\n                this.to.params = Object.assign(\\r\\n                    this.to.params,\\r\\n                    this.$route.params\\r\\n                );\\r\\n                this.$router.push(this.to)\\r\\n            },\\r\\n            play: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\"play\");\\r\\n                this.state = \"play\";\\r\\n            },\\r\\n            pause: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\"pause\");\\r\\n                this.state = \"pause\";\\r\\n            },\\r\\n            stop: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\"stop\");\\r\\n                this.state = \"pause\";\\r\\n            },\\r\\n            save: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.loading = true;\\r\\n                this.EventEmitter.emit(\"startaudiorendering\", \"wav\");\\r\\n            },\\r\\n            trim: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\"trim\");\\r\\n                this.trimmed = this.SelectionSegment;\\r\\n            },\\r\\n            alignLeft: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\\r\\n                    \"shift\",\\r\\n                    this.trimmed[0] * -1,\\r\\n                    this.Playlist.activeTrack || this.Playlist.tracks[0]\\r\\n                );\\r\\n            },\\r\\n            moveLeft: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\\r\\n                    \"shift\",\\r\\n                    this.stepSize * -1,\\r\\n                    this.Playlist.activeTrack || this.Playlist.tracks[0]\\r\\n                );\\r\\n            },\\r\\n            moveRight: function () {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\\r\\n                    \"shift\",\\r\\n                    this.stepSize,\\r\\n                    this.Playlist.activeTrack || this.Playlist.tracks[0]\\r\\n                );\\r\\n            },\\r\\n            statechange: function (state) {\\r\\n                if (!this.Playlist) {\\r\\n                    return;\\r\\n                }\\r\\n                this.EventEmitter.emit(\"statechange\", state);\\r\\n                this.cursor = state;\\r\\n                if (this.cursor === \"select\") {\\r\\n                    this.SelectionSegment = [0, this.CursorPosition];\\r\\n                }\\r\\n            },\\r\\n            leave: function () {\\r\\n                Module.emit(\"tile.editor\");\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/elements/css/Sound.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Switch.js', 'Module => {\\r\\n  const component = {\\r\\n    name: \\'S-Switch\\',\\r\\n    template:\\r\\n        \\'<v-switch\\\\n\\' +\\r\\n        \\'      v-model=\"value\"\\\\n\\' +\\r\\n        \\'      :label=\"title\"\\\\n\\' +\\r\\n        \\'      :hint=\"description\"\\\\n\\' +\\r\\n        \\'      :persistent-hint=\"persistentHint\"/>\\',\\r\\n    props: {\\r\\n\\r\\n      /**\\r\\n       * @description Render element. Usually an array with key value pairs for options.\\r\\n       */\\r\\n      renderElement: Object,\\r\\n\\r\\n      /**\\r\\n       * @description Element key. The key provided to map submitted values.\\r\\n       */\\r\\n      element: String,\\r\\n\\r\\n      /**\\r\\n       * @description Form id to identify events.\\r\\n       */\\r\\n      region: Object,\\r\\n    },\\r\\n    watch: {\\r\\n      value: {\\r\\n        handler: function (value) {\\r\\n          this.$route.params[this.element] = value;\\r\\n        },\\r\\n        deep: true\\r\\n      }\\r\\n    },\\r\\n    data() {\\r\\n      return {\\r\\n        value: false,\\r\\n        title: \"\",\\r\\n        description: \"\",\\r\\n        persistentHint: true,\\r\\n      };\\r\\n    },\\r\\n    mounted: async function () {\\r\\n\\r\\n      // Iterate trough all items and set them.\\r\\n      const keys = Object.keys(this.renderElement);\\r\\n\\r\\n      for (let i = 0; i < keys.length; i++) {\\r\\n        const key = keys[i];\\r\\n        const value = this.renderElement[key];\\r\\n        const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n        // Check if data is mappable.\\r\\n        if (!this.hasOwnProperty(dataKey)) {\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        // Check if element is empty.\\r\\n        if (!value || value === false || value === undefined || value === null) {\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        // Set the new value.\\r\\n        this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n      }\\r\\n\\r\\n      const info = this.region.regionRaw.info;\\r\\n\\r\\n      this.$route.params[this.element] = this.value;\\r\\n    },\\r\\n  };\\r\\n\\r\\n  Module.appendStyle(`src/elements/css/Switch.css`, component.name);\\r\\n  \\r\\n  return component;\\r\\n};\\r\\n');\r\n        await this.fileSystem.write('/modules/core/src/elements/Textarea.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'Textarea\\',\\r\\n        template:\\r\\n            \\'<v-textarea\\\\n\\' +\\r\\n            \\'      v-model=\"value\"\\\\n\\' +\\r\\n            \\'      :label=\"title\"\\\\n\\' +\\r\\n            \\'      :hint=\"description\"\\\\n\\' +\\r\\n            \\'      :placeholder=\"placeholder\"\\\\n\\' +\\r\\n            \\'      :auto-grow=\"autoGrow\"\\\\n\\' +\\r\\n            \\'      :clearable=\"clearable\"\\\\n\\' +\\r\\n            \\'      :filled=\"filled\"\\\\n\\' +\\r\\n            \\'      :flat=\"flat\"\\\\n\\' +\\r\\n            \\'      :no-resize=\"noResize\"\\\\n\\' +\\r\\n            \\'      :outlined=\"outlined\"\\\\n\\' +\\r\\n            \\'      :persistent-hint=\"persistentHint\"\\\\n\\' +\\r\\n            \\'      :rounded=\"rounded\"\\\\n\\' +\\r\\n            \\'      :row-height=\"rowHeight\"\\\\n\\' +\\r\\n            \\'      :rows=\"rows\"\\\\n\\' +\\r\\n            \\'      :shaped=\"shaped\"\\\\n\\' +\\r\\n            \\'      :single-line=\"singleLine\"\\\\n\\' +\\r\\n            \\'      :solo=\"solo\"\\\\n\\' +\\r\\n            \\'  />\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                value: \"\",\\r\\n                title: \"\",\\r\\n                description: \"\",\\r\\n                placeholder: \"\",\\r\\n                autoGrow: false,\\r\\n                autofocus: true,\\r\\n                clearable: false,\\r\\n                filled: false,\\r\\n                flat: false,\\r\\n                noResize: false,\\r\\n                outlined: false,\\r\\n                persistentHint: true,\\r\\n                rounded: false,\\r\\n                rowHeight: 24,\\r\\n                rows: 1,\\r\\n                shaped: false,\\r\\n                singleLine: false,\\r\\n                solo: false,\\r\\n            };\\r\\n        },\\r\\n        watch: {\\r\\n            value: {\\r\\n                handler: function (value) {\\r\\n                    this.$route.params[this.element] = value;\\r\\n                    this.$trigger(\\'input_change\\', this.element);\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n\\r\\n            const info = this.region.regionRaw.info;\\r\\n\\r\\n            this.$route.params[this.element] = this.value;\\r\\n        },\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/elements/Textfield.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};\\r\\n');\r\n        await this.fileSystem.write('/modules/core/src/elements/Textfield.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'Textfield\\',\\r\\n        template:\\r\\n            \\'  <v-text-field\\' +\\r\\n            \\'      v-model=\"value\"\\' +\\r\\n            \\'      :label=\"title\"\\' +\\r\\n            \\'      :hint=\"description\"\\' +\\r\\n            \\'      :placeholder=\"placeholder\"\\' +\\r\\n            \\'      :min=\"min\"\\' +\\r\\n            \\'      :max=\"max\"\\' +\\r\\n            \\'      :persistent-hint=\"persistentHint\"\\' +\\r\\n            \\'  />\\',\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        watch: {\\r\\n            value: {\\r\\n                handler: function (value) {\\r\\n                    this.$route.params[this.element] = value;\\r\\n                    this.$trigger(\\'input_change\\', this.element);\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                value: \"\",\\r\\n                title: \"\",\\r\\n                description: \"\",\\r\\n                placeholder: \"\",\\r\\n                min: 0,\\r\\n                max: 16,\\r\\n                persistentHint: true\\r\\n            };\\r\\n        },\\r\\n\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n\\r\\n            const info = this.region.regionRaw.info;\\r\\n\\r\\n            this.$route.params[this.element] = this.value;\\r\\n        },\\r\\n    };\\r\\n\\r\\n    Module.appendStyle(`src/elements/Textfield.css`, component.name);\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/elements/Upload.js', 'Module => {\\r\\n    const component = {\\r\\n        name: \\'Upload\\',\\r\\n        template: \\r\\n            \\'<v-file-input\\' +\\r\\n            \\'   v-model=\"value\"\\' +\\r\\n            \\'   :label=\"title\"\\' +\\r\\n            \\'   :hint=\"description\"\\' +\\r\\n            \\'   :append-icon=\"appendIcon\"\\' +\\r\\n            \\'   :append-outer-icon=\"appendOuterIcon\"\\' +\\r\\n            \\'   :autofocus=\"autofocus\"\\' +\\r\\n            \\'   :background-color=\"backgroundColor\"\\' +\\r\\n            \\'   :chips=\"chips\"\\' +\\r\\n            \\'   :clear-icon=\"clearIcon\"\\' +\\r\\n            \\'   :clearable=\"clearable\"\\' +\\r\\n            \\'   :color=\"color\"\\' +\\r\\n            \\'   :counter=\"counter\"\\' +\\r\\n            \\'   :counter-size-string=\"counterSizeString\"\\' +\\r\\n            \\'   :counter-string=\"counterString\"\\' +\\r\\n            \\'   :counter-value=\"counterValue\"\\' +\\r\\n            \\'   :dark=\"dark\"\\' +\\r\\n            \\'   :dense=\"dense\"\\' +\\r\\n            \\'   :disabled=\"disabled\"\\' +\\r\\n            \\'   :error=\"error\"\\' +\\r\\n            \\'   :error-count=\"errorCount\"\\' +\\r\\n            \\'   :error-messages=\"errorMessages\"\\' +\\r\\n            \\'   :filled=\"filled\"\\' +\\r\\n            \\'   :flat=\"flat\"\\' +\\r\\n            \\'   :full-width=\"fullWidth\"\\' +\\r\\n            \\'   :height=\"height\"\\' +\\r\\n            \\'   :hide-details=\"hideDetails\"\\' +\\r\\n            \\'   :hide-input=\"hideInput\"\\' +\\r\\n            \\'   :light=\"light\"\\' +\\r\\n            \\'   :loader-height=\"loaderHeight\"\\' +\\r\\n            \\'   :loading=\"loading\"\\' +\\r\\n            \\'   :messages=\"messages\"\\' +\\r\\n            \\'   :multiple=\"multiple\"\\' +\\r\\n            \\'   :outlined=\"outlined\"\\' +\\r\\n            \\'   :persistent-hint=\"persistentHint\"\\' +\\r\\n            \\'   :placeholder=\"placeholder\"\\' +\\r\\n            \\'   :prefix=\"prefix\"\\' +\\r\\n            \\'   :prepend-icon=\"prependIcon\"\\' +\\r\\n            \\'   :prepend-inner-icon=\"prependInnerIcon\"\\' +\\r\\n            \\'   :readonly=\"readonly\"\\' +\\r\\n            \\'   :reverse=\"reverse\"\\' +\\r\\n            \\'   :rounded=\"rounded\"\\' +\\r\\n            \\'   :rules=\"rules\"\\' +\\r\\n            \\'   :shaped=\"shaped\"\\' +\\r\\n            \\'   :show-size=\"showSize\"\\' +\\r\\n            \\'   :single-line=\"singleLine\"\\' +\\r\\n            \\'   :small-chips=\"smallChips\"\\' +\\r\\n            \\'   :solo=\"solo\"\\' +\\r\\n            \\'   :solo-inverted=\"soloInverted\"\\' +\\r\\n            \\'   :success=\"success\"\\' +\\r\\n            \\'   :success-messages=\"successMessages\"\\' +\\r\\n            \\'   :suffix=\"suffix\"\\' +\\r\\n            \\'   :truncate-length=\"truncateLength\">\\' +\\r\\n            \\' <div>{{description}}</div>\\' +\\r\\n            \\'</v-file-input>\\',\\r\\n        data() {\\r\\n            return {\\r\\n                title: undefined,\\r\\n                description: undefined,\\r\\n                value: undefined,\\r\\n                appendIcon: undefined,\\r\\n                appendOuterIcon: undefined,\\r\\n                autofocus: false,\\r\\n                backgroundColor: undefined,\\r\\n                chips: false,\\r\\n                clearIcon: \\'$clear\\',\\r\\n                clearable: true,\\r\\n                color: undefined,\\r\\n                counter: undefined,\\r\\n                counterSizeString: \\'$vuetify.fileInput.counterSize\\',\\r\\n                counterString: \\'$vuetify.fileInput.counter\\',\\r\\n                counterValue: null,\\r\\n                dark: false,\\r\\n                dense: false,\\r\\n                disabled: false,\\r\\n                error: false,\\r\\n                errorCount: 1,\\r\\n                errorMessages: [],\\r\\n                filled: false,\\r\\n                flat: false,\\r\\n                fullWidth: false,\\r\\n                height: undefined,\\r\\n                hideDetails: undefined,\\r\\n                hideInput: false,\\r\\n                light: false,\\r\\n                loaderHeight: 2,\\r\\n                loading: false,\\r\\n                messages: [],\\r\\n                multiple: false,\\r\\n                outlined: false,\\r\\n                persistentHint: true,\\r\\n                placeholder: undefined,\\r\\n                prefix: undefined,\\r\\n                prependIcon: \\'$file\\',\\r\\n                prependInnerIcon: undefined,\\r\\n                readonly: false,\\r\\n                reverse: false,\\r\\n                rounded: false,\\r\\n                rules: [],\\r\\n                shaped: false,\\r\\n                showSize: false,\\r\\n                singleLine: false,\\r\\n                smallChips: false,\\r\\n                solo: false,\\r\\n                soloInverted: false,\\r\\n                success: false,\\r\\n                successMessages: [],\\r\\n                suffix: undefined,\\r\\n                truncateLength: 22,\\r\\n            };\\r\\n        },\\r\\n        props: {\\r\\n\\r\\n            /**\\r\\n             * @description Render element. Usually an array with key value pairs for options.\\r\\n             */\\r\\n            renderElement: Object,\\r\\n\\r\\n            /**\\r\\n             * @description Element key. The key provided to map submitted values.\\r\\n             */\\r\\n            element: String,\\r\\n\\r\\n            /**\\r\\n             * @description Form id to identify events.\\r\\n             */\\r\\n            region: Object,\\r\\n        },\\r\\n        watch: {\\r\\n            value: {\\r\\n                handler: function (value) {\\r\\n                    this.$route.params[this.element] = value;\\r\\n                    this.$trigger(\\'input_change\\', this.element);\\r\\n                },\\r\\n                deep: true\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Iterate trough all items and set them.\\r\\n            const keys = Object.keys(this.renderElement);\\r\\n\\r\\n            for (let i = 0; i < keys.length; i++) {\\r\\n                const key = keys[i];\\r\\n                const value = this.renderElement[key];\\r\\n                const dataKey = key.replace(\\'#\\', \\'\\');\\r\\n\\r\\n                // Check if data is mappable.\\r\\n                if (!this.hasOwnProperty(dataKey)) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Check if element is empty.\\r\\n                if (!value || value === false || value === undefined || value === null) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                // Set the new value.\\r\\n                this[key.replace(\\'#\\', \\'\\')] = value;\\r\\n            }\\r\\n            this.$route.params[this.element] = this.value;\\r\\n        },\\r\\n    };\\r\\n\\r\\n    return component;\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/regions/Content.js', 'Module => {\\r\\n    const elements = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const containers = window.Manager.componentManager.getComponentsByType(\\'containers\\');\\r\\n    const data = [...elements, ...containers];\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        name: \\'Content\\',\\r\\n        components,\\r\\n        template:\\r\\n            \\'<v-sheet>\\' +\\r\\n            \\'  <component v-for=\"(renderElement, element) in renderArray\"\\' +\\r\\n            \\'             :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\' +\\r\\n            \\'             :renderElement=\"renderElement\"\\' +\\r\\n            \\'             :element=\"element\"\\' +\\r\\n            \\'             :key=\"`element-${renderElement[\\\\\\'#type\\\\\\']}-${element}`\"/>\\' +\\r\\n            \\'</v-sheet>\\',\\r\\n        props: {\\r\\n            route: Object,\\r\\n            region: Object,\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                renderArray: {},\\r\\n            }\\r\\n        },\\r\\n        mounted: async function () {\\r\\n\\r\\n            // Load the render array.\\r\\n            await this.region.load();\\r\\n            this.renderArray = await this.region.regionRaw.build(this.region.module, this.$route);\\r\\n        },\\r\\n    };\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/regions/content/Board.js', 'const Board = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    info: {\\r\\n        title: \"Tile Board\",\\r\\n        description: \"Configure your settings here.\",\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param Module\\r\\n     * @param VueRouter\\r\\n     * @returns {{}}\\r\\n     */\\r\\n     build: async (Module, VueRoute) => {\\r\\n        let build = {};\\r\\n        const params = VueRoute.params;\\r\\n\\r\\n        const prefix = \\'/soundboard\\';\\r\\n\\r\\n        // Determine the path.\\r\\n        const path = \\'board\\' in params ? params.build : \\'\\';\\r\\n        const elements = await Module.fileSystem.list(`${prefix}/${path}`);\\r\\n\\r\\n        build.tile_column = {\\r\\n            \\'#type\\': \\'one_column\\',\\r\\n            \\'#content\\': {},\\r\\n        };\\r\\n\\r\\n        for (let i = 0; i < elements.length; i++) {\\r\\n            const path = elements[i];\\r\\n            const content = await Module.fileSystem.readJSON(path);\\r\\n\\r\\n            build.tile_column[\\'#content\\'][path] = {\\r\\n                \\'#type\\': \\'tile\\',\\r\\n                \\'#title\\': Module.fallback(content, \\'tile_title\\', \\'\\'),\\r\\n                \\'#backgroundColor\\': Module.fallback(content, \\'tile_color\\', \\'#000000\\')\\r\\n            };\\r\\n        }\\r\\n\\r\\n        build.addTileButton = {\\r\\n            \\'#type\\': \\'add-tile-button\\',\\r\\n            \\'#content\\': {\\r\\n                add_tile: {\\r\\n                    \\'#type\\': \\'redirect_button\\',\\r\\n                    \\'#fab\\': true,\\r\\n                    \\'#outlined\\': true,\\r\\n                    \\'#color\\': \\'green\\',\\r\\n                    \\'#centerIcon\\': \\'add\\',\\r\\n                    \\'#to\\': {\\r\\n                        name: \\'tile.templates\\',\\r\\n                        params: {\\r\\n                            path,\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Board;\\r\\n})();');\r\n        await this.fileSystem.write('/modules/core/src/regions/content/Modules.js', 'const Modules = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    info: {\\r\\n        title: \"Tile Board\",\\r\\n        description: \"Configure your settings here.\",\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param Module\\r\\n     * @param values\\r\\n     * @returns {{}}\\r\\n     */\\r\\n    build: (Module) => {\\r\\n        let build = {};\\r\\n\\r\\n        build.headline = {\\r\\n            \\'#type\\': \\'headline\\',\\r\\n            \\'#title\\': \\'Modules\\',\\r\\n            \\'#description\\': \\'Shows the current installed modules.\\',\\r\\n        };\\r\\n\\r\\n        const modules = Module.moduleManager.modules;\\r\\n\\r\\n        for (let i = 0; i < modules.length; i++) {\\r\\n            const module = modules[i];\\r\\n\\r\\n            build[`${module.id}-module-list`] = {\\r\\n                \\'#type\\': \\'paragraph\\',\\r\\n                \\'#title\\': module.info.name,\\r\\n                \\'#description\\': module.info.description,\\r\\n                \\'#value\\': `Version: ${module.info.version}`\\r\\n            };\\r\\n        }\\r\\n\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Modules;\\r\\n})();');\r\n        await this.fileSystem.write('/modules/core/src/regions/Form.js', 'Module => {\\r\\n    const elements = window.Manager.componentManager.getComponentsByType(\\'elements\\');\\r\\n    const containers = window.Manager.componentManager.getComponentsByType(\\'containers\\');\\r\\n    const data = [...elements, ...containers];\\r\\n    const components = {};\\r\\n\\r\\n    for (let i = 0; i < data.length; i++) {\\r\\n        const component = data[i];\\r\\n        components[`as-${component.id}`] = component.getComponent();\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        name: \\'Form\\',\\r\\n        template: \\r\\n            \\'<v-form class=\"pa-4 my-4\">\\' +\\r\\n            \\'    <br v-if=\"region.title || region.description\"/>\\' +\\r\\n            \\'    <h2 v-if=\"region.title\">{{ region.title }}</h2>\\' +\\r\\n            \\'    <h6 v-if=\"region.description\">{{ region.description }}</h6>\\' +\\r\\n            \\'\\' +\\r\\n            \\'    <component v-for=\"(renderElement, element) in renderArray\"\\' +\\r\\n            \\'               :is=\"`as-${renderElement[\\\\\\'#type\\\\\\']}`\"\\' +\\r\\n            \\'               :renderElement=\"renderElement\"\\' +\\r\\n            \\'               :element=\"element\"\\' +\\r\\n            \\'               :key=\"`${element}.${changed}`\"\\' +\\r\\n            \\'               :region=\"region\"/>\\' +\\r\\n            \\'\\' +\\r\\n            \\'    <v-btn\\' +\\r\\n            \\'        v-if=\"info.submit === undefined || info.submit === true\"\\' +\\r\\n            \\'        block\\' +\\r\\n            \\'        tile\\' +\\r\\n            \\'        :loading=\"saving\"\\' +\\r\\n            \\'        color=\"success\"\\' +\\r\\n            \\'        @click=\"submit\">\\' +\\r\\n            \\'      Save\\' +\\r\\n            \\'      {{ info.submit }}\\' +\\r\\n            \\'    </v-btn>\\' +\\r\\n            \\'    <br/>\\' +\\r\\n            \\'    <v-divider/>\\' +\\r\\n            \\'\\' +\\r\\n            \\'    <v-snackbar v-model=\"snackbar\"\\' +\\r\\n            \\'                top\\' +\\r\\n            \\'                color=\"success\"\\' +\\r\\n            \\'                multi-line\\' +\\r\\n            \\'                timeout=\"3000\"\\' +\\r\\n            \\'                dismissible>\\' +\\r\\n            \\'      <v-icon color=\"accent\">done_all</v-icon>\\' +\\r\\n            \\'      Saved successfully :D\\' +\\r\\n            \\'\\' +\\r\\n            \\'      <v-btn color=\"transparent\" @click=\"snackbar = false\">\\' +\\r\\n            \\'        <v-icon color=\"accent\">close</v-icon>\\' +\\r\\n            \\'      </v-btn>\\' +\\r\\n            \\'    </v-snackbar>\\' +\\r\\n            \\'  </v-form>\\',\\r\\n        components,\\r\\n        data() {\\r\\n            return {\\r\\n                info: {},\\r\\n                renderArray: {},\\r\\n                values: {},\\r\\n                saving: false,\\r\\n                snackbar: false,\\r\\n                changed: 0,\\r\\n                registered: 0,\\r\\n            }\\r\\n        },\\r\\n\\r\\n        props: {\\r\\n            route: Object,\\r\\n            region: Object,\\r\\n        },\\r\\n\\r\\n        mounted: async function () {\\r\\n            await this.region.load();\\r\\n            this.info = this.region.regionRaw.info;\\r\\n\\r\\n            const values = await this.build();\\r\\n            this.renderArray = await this.region.regionRaw.build(this.region.module, values, this.$route.params);\\r\\n        },\\r\\n\\r\\n        methods: {\\r\\n\\r\\n            /**\\r\\n             *\\r\\n             */\\r\\n            build: async function () {\\r\\n                let values = {};\\r\\n\\r\\n                try {\\r\\n                    values = await this.region.fileSystem.readJSON(`${this.region.module.path}values/form.${this.info.id}.json`);\\r\\n                    console.log(`${this.region.module.path}values/form.${this.info.id}.json`)\\r\\n                } catch (error) {\\r\\n                    await this.region.fileSystem.write(`${this.region.module.path}values/form.${this.info.id}.json`, JSON.stringify({}));\\r\\n\\r\\n                    /*\\r\\n                     * At this point we know that there is nothing in the fileSystem about this file.\\r\\n                     * So it\\'s ok to set value empty.\\r\\n                     */\\r\\n                    values = {};\\r\\n                }\\r\\n\\r\\n                if (values === undefined) return {};\\r\\n                return values;\\r\\n            },\\r\\n\\r\\n            validate: async function () {\\r\\n\\r\\n            },\\r\\n\\r\\n            submit: async function () {\\r\\n                this.saving = true;\\r\\n\\r\\n                await this.save(this.$route.params);\\r\\n\\r\\n                //console.log(this.values)\\r\\n                this.saving = false;\\r\\n                this.snackbar = true;\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             *\\r\\n             * @param values\\r\\n             */\\r\\n            save: async function (values) {\\r\\n\\r\\n                console.debug(\\'values - 1\\', values);\\r\\n                values = await this.region.regionRaw.submit(this.route.module, values);\\r\\n                console.debug(\\'values - 2\\', values);\\r\\n\\r\\n                if (\\'save\\' in this.info && this.info.save !== false) {\\r\\n                    //await this.region.fileSystem.write(`${this.router.module.path}values/form.${this.info.id}.json`, JSON.stringify(values));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n};');\r\n        await this.fileSystem.write('/modules/core/src/regions/form/EditImage.js', 'const Settings = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    \"info\": {\\r\\n        \"title\": \"Edit Sound\",\\r\\n        \"description\": \"This page is used to contain a big element wich\",\\r\\n        \"id\": \"image_edit\",\\r\\n        \"tab\": \"misc\",\\r\\n        \"location\": \"settings\",\\r\\n        \"submit\": false\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param {Module} Module\\r\\n     * @param {Object} values\\r\\n     * @param {Object} data\\r\\n     *\\r\\n     * @returns {{}}\\r\\n     */\\r\\n    \"build\": (Module, values, data) => {\\r\\n        let build = {};\\r\\n\\r\\n        build.image_upload = {\\r\\n            \\'#type\\': \\'image\\',\\r\\n            \\'#files\\': Module.fallback(data, \\'image_upload\\', []),\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile\\'\\r\\n            },\\r\\n        };\\r\\n\\r\\n        build.alter_tile = {\\r\\n            \\'#type\\': \\'redirect_button\\',\\r\\n            \\'#title\\': \\'cancel\\',\\r\\n            \\'#appendIcon\\': \\'clear\\',\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile\\'\\r\\n            },\\r\\n            \\'#block\\': true,\\r\\n            \\'#color\\': \\'red\\',\\r\\n            \\'#outlined\\': true\\r\\n        };\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n    validate: (Module, values) => {\\r\\n\\r\\n        /**\\r\\n         * Return key: value for error messages.\\r\\n         *\\r\\n         * key => Resembling the field id.\\r\\n         * value => Resembling the the error message.\\r\\n         */\\r\\n        return true;\\r\\n    },\\r\\n\\r\\n    submit: (Module, values) => {\\r\\n\\r\\n        // The submitted values of the user.\\r\\n        return values;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Settings;\\r\\n})();');\r\n        await this.fileSystem.write('/modules/core/src/regions/form/EditSound.js', 'const Settings = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    \"info\": {\\r\\n        \"title\": \"Edit Sound\",\\r\\n        \"description\": \"This page is used to contain a big element wich\",\\r\\n        \"id\": \"sound_edit\",\\r\\n        \"tab\": \"misc\",\\r\\n        \"location\": \"settings\",\\r\\n        \"submit\": false\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param {Module} Module\\r\\n     * @param {Object} values\\r\\n     * @param {Object} data\\r\\n     *\\r\\n     * @returns {{}}\\r\\n     */\\r\\n    \"build\": (Module, values, data) => {\\r\\n        let build = {};\\r\\n\\r\\n        build.sound_upload = {\\r\\n            \\'#type\\': \\'sound\\',\\r\\n            \\'#files\\': Module.fallback(data, \\'sound_upload\\', []),\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile\\'\\r\\n            },\\r\\n        };\\r\\n\\r\\n        build.alter_tile = {\\r\\n            \\'#type\\': \\'redirect_button\\',\\r\\n            \\'#title\\': \\'cancel\\',\\r\\n            \\'#appendIcon\\': \\'clear\\',\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile\\'\\r\\n            },\\r\\n            \\'#block\\': true,\\r\\n            \\'#color\\': \\'red\\',\\r\\n            \\'#outlined\\': true\\r\\n        };\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n    validate: (Module, values) => {\\r\\n\\r\\n        /**\\r\\n         * Return key: value for error messages.\\r\\n         *\\r\\n         * key => Resembling the field id.\\r\\n         * value => Resembling the the error message.\\r\\n         */\\r\\n        return true;\\r\\n    },\\r\\n\\r\\n    submit: (Module, values) => {\\r\\n\\r\\n        // The submitted values of the user.\\r\\n        return values;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Settings;\\r\\n})();');\r\n        await this.fileSystem.write('/modules/core/src/regions/form/Settings.js', 'const Settings = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    \"info\": {\\r\\n        \"title\": \"Tile Settings\",\\r\\n        \"description\": \"Configure your settings here.\",\\r\\n        \"id\": \"example_form\",\\r\\n        \"tab\": \"misc\",\\r\\n        \"location\": \"settings\"\\r\\n    },\\r\\n\\r\\n    \"build\": (Module, values, data) => {\\r\\n        let build = {};\\r\\n        build.two_column = {\\r\\n            \\'#type\\': \\'two_column\\',\\r\\n            \\'#first\\': {\\r\\n                tile: {\\r\\n                    \\'#type\\': \\'tile\\',\\r\\n                    \\'#title\\': \\'~tile_title\\',\\r\\n                    \\'#images\\': \\'~image_upload\\',\\r\\n                    \\'#sounds\\': \\'~sound_upload\\',\\r\\n                    \\'#classes\\': \\'~tile_style\\',\\r\\n                    \\'#backgroundColor\\': \\'~tile_color\\',\\r\\n                    \\'#textColor\\': Module.fallback(data, \\'text_color\\', \\'#000000\\'),\\r\\n                },\\r\\n            },\\r\\n            \\'#second\\': {\\r\\n                tile_color: {\\r\\n                    \\'#type\\': \\'colorpicker\\',\\r\\n                    \\'#title\\': \\'Color\\',\\r\\n                    \\'#hideModeSwitch\\': true,\\r\\n                    \\'#description\\': \\'This color will be the default color of the tile.\\',\\r\\n                    \\'#value\\': Module.fallback(data, \\'tile_color\\', \\'#32a852\\'),\\r\\n                }\\r\\n            },\\r\\n        };\\r\\n\\r\\n        build.tile_title = {\\r\\n            \\'#type\\': \\'textfield\\',\\r\\n            \\'#title\\': \\'Title\\',\\r\\n            \\'#description\\': \\'This is shown in the center of the tile.\\',\\r\\n            \\'#value\\': Module.fallback(data, \\'tile_title\\', \\'My sound!\\'),\\r\\n        };\\r\\n\\r\\n        build.tile_style = {\\r\\n            \\'#type\\': \\'dropdown\\',\\r\\n            \\'#title\\': \\'Tile Style\\',\\r\\n            \\'#description\\': \\'The style is used to make your tile look nice.\\',\\r\\n            \\'#value\\': Module.fallback(values, \\'tile_style\\', Module.fallback(data, \\'tile_style\\', [\\'default\\'])),\\r\\n            \\'#items\\': [\\r\\n                {\\r\\n                    \\'text\\': \\'Default\\',\\r\\n                    \\'value\\': [\\'default\\']\\r\\n                },\\r\\n                {\\r\\n                    \\'text\\': \\'Image Background\\',\\r\\n                    \\'value\\': [\\'image\\']\\r\\n                },\\r\\n                {\\r\\n                    \\'text\\': \\'Horizontal 50/50\\',\\r\\n                    \\'value\\': [\\'horizontal-50-50\\']\\r\\n                },\\r\\n                {\\r\\n                    \\'text\\': \\'Vertical 50/50\\',\\r\\n                    \\'value\\': [\\'vertical-50-50\\']\\r\\n                },\\r\\n            ]\\r\\n        }\\r\\n\\r\\n        build.alter_text = {\\r\\n            \\'#type\\': \\'redirect_button\\',\\r\\n            \\'#title\\': \\'Customize Text\\',\\r\\n            \\'#appendIcon\\': \\'text_format\\',\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile.text\\'\\r\\n            },\\r\\n            \\'#block\\': true,\\r\\n            \\'#color\\': \\'info\\',\\r\\n            \\'#outlined\\': true\\r\\n        };\\r\\n\\r\\n        build.advanced_settings = {\\r\\n            \\'#type\\': \\'accordion\\',\\r\\n            \\'#panels\\': [\\r\\n                {\\r\\n                    \\'#title\\': \\'Sound\\',\\r\\n                    \\'#content\\': {\\r\\n                        paragraph: {\\r\\n                            \\'#type\\': \\'paragraph\\',\\r\\n                            \\'#flat\\': true,\\r\\n                            \\'#title\\': \\'Description\\',\\r\\n                            \\'#description\\': \\'This is very cool\\',\\r\\n                            \\'#value\\': \\'Add your sound file, so we can start to edit :D\\'\\r\\n                        },\\r\\n                        sound_upload: {\\r\\n                            \\'#type\\': \\'upload\\',\\r\\n                            \\'#title\\': \\'Sound File\\',\\r\\n                            \\'#description\\': \\'Select your sound file.\\',\\r\\n                            \\'#value\\': Module.fallback(values, \\'sound_upload\\', Module.fallback(data, \\'sound_upload\\', [])),\\r\\n                        },\\r\\n                        sound_upload_edit: {\\r\\n                            \\'#type\\': \\'redirect_button\\',\\r\\n                            \\'#title\\': \\'Edit audio file\\',\\r\\n                            \\'#appendIcon\\': \\'audiotrack\\',\\r\\n                            \\'#vif\\': \\'~sound_upload\\',\\r\\n                            \\'#to\\': {\\r\\n                                name: \\'core.sound\\'\\r\\n                            },\\r\\n                            \\'#block\\': true,\\r\\n                            \\'#color\\': \\'info\\',\\r\\n                            \\'#outlined\\': true\\r\\n                        }\\r\\n                    }\\r\\n                },\\r\\n                {\\r\\n                    \\'#title\\': \\'Image\\',\\r\\n                    \\'#content\\': {\\r\\n                        image_upload: {\\r\\n                            \\'#type\\': \\'upload\\',\\r\\n                            \\'#title\\': \\'Image File\\',\\r\\n                            \\'#description\\': \\'Select your sound file.\\',\\r\\n                            \\'#persistentHint\\': true,\\r\\n                            \\'#value\\': Module.fallback(values, \\'image_upload\\', Module.fallback(data, \\'image_upload\\', [])),\\r\\n                        },\\r\\n\\r\\n                        image_upload_edit: {\\r\\n                            \\'#type\\': \\'redirect_button\\',\\r\\n                            \\'#title\\': \\'Edit image file\\',\\r\\n                            \\'#appendIcon\\': \\'crop_original\\',\\r\\n                            \\'#vif\\': \\'~image_upload\\',\\r\\n                            \\'#to\\': {\\r\\n                                name: \\'add.tile.image\\'\\r\\n                            },\\r\\n                            \\'#show\\': false,\\r\\n                            \\'#block\\': true,\\r\\n                            \\'#color\\': \\'info\\',\\r\\n                            \\'#outlined\\': true\\r\\n                        },\\r\\n                    }\\r\\n                },\\r\\n            ],\\r\\n        };\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n    validate: (Module, values) => {\\r\\n\\r\\n        /**\\r\\n         * Return key: value for error messages.\\r\\n         *\\r\\n         * key => Resembling the field id.\\r\\n         * value => Resembling the the error message.\\r\\n         */\\r\\n        return true;\\r\\n    },\\r\\n\\r\\n    submit: (Module, values) => {\\r\\n\\r\\n        // The submitted values of the user.\\r\\n        return values;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Settings;\\r\\n})();');\r\n        await this.fileSystem.write('/modules/core/src/regions/form/tile/AddTile.js', 'const Settings = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    \"info\": {\\r\\n        \"title\": \"Tile Settings\",\\r\\n        \"description\": \"Configure your settings here.\",\\r\\n        \"id\": \"example_form\",\\r\\n        \"tab\": \"misc\",\\r\\n        \"location\": \"settings\",\\r\\n        \"save\": false,\\r\\n    },\\r\\n\\r\\n    \"build\": (Module, values, data) => {\\r\\n        let build = {};\\r\\n        build.two_column = {\\r\\n            \\'#type\\': \\'two_column\\',\\r\\n            \\'#first\\': {\\r\\n                tile: {\\r\\n                    \\'#type\\': \\'tile\\',\\r\\n                    \\'#title\\': \\'~tile_title\\',\\r\\n                    \\'#images\\': \\'~image_upload\\',\\r\\n                    \\'#sounds\\': \\'~sound_upload\\',\\r\\n                    \\'#classes\\': \\'~tile_style\\',\\r\\n                    \\'#backgroundColor\\': \\'~tile_color\\',\\r\\n                    \\'#textColor\\': Module.fallback(data, \\'text_color\\', \\'#000000\\'),\\r\\n                },\\r\\n            },\\r\\n            \\'#second\\': {\\r\\n                tile_color: {\\r\\n                    \\'#type\\': \\'colorpicker\\',\\r\\n                    \\'#title\\': \\'Color\\',\\r\\n                    \\'#hideModeSwitch\\': true,\\r\\n                    \\'#description\\': \\'This color will be the default color of the tile.\\',\\r\\n                    \\'#value\\': Module.fallback(data, \\'tile_color\\', \\'#32a852\\'),\\r\\n                }\\r\\n            },\\r\\n        };\\r\\n\\r\\n        build.tile_title = {\\r\\n            \\'#type\\': \\'textfield\\',\\r\\n            \\'#title\\': \\'Title\\',\\r\\n            \\'#description\\': \\'This is shown in the center of the tile.\\',\\r\\n            \\'#value\\': Module.fallback(data, \\'tile_title\\', \\'My sound!\\'),\\r\\n        };\\r\\n\\r\\n        build.tile_style = {\\r\\n            \\'#type\\': \\'dropdown\\',\\r\\n            \\'#title\\': \\'Tile Style\\',\\r\\n            \\'#description\\': \\'The style is used to make your tile look nice.\\',\\r\\n            \\'#value\\': Module.fallback(values, \\'tile_style\\', Module.fallback(data, \\'tile_style\\', [\\'default\\'])),\\r\\n            \\'#items\\': [\\r\\n                {\\r\\n                    \\'text\\': \\'Default\\',\\r\\n                    \\'value\\': [\\'default\\']\\r\\n                },\\r\\n                {\\r\\n                    \\'text\\': \\'Image Background\\',\\r\\n                    \\'value\\': [\\'image\\']\\r\\n                },\\r\\n                {\\r\\n                    \\'text\\': \\'Horizontal 50/50\\',\\r\\n                    \\'value\\': [\\'horizontal-50-50\\']\\r\\n                },\\r\\n                {\\r\\n                    \\'text\\': \\'Vertical 50/50\\',\\r\\n                    \\'value\\': [\\'vertical-50-50\\']\\r\\n                },\\r\\n            ]\\r\\n        }\\r\\n\\r\\n        build.alter_text = {\\r\\n            \\'#type\\': \\'redirect_button\\',\\r\\n            \\'#title\\': \\'Customize Text\\',\\r\\n            \\'#appendIcon\\': \\'text_format\\',\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile.text\\'\\r\\n            },\\r\\n            \\'#block\\': true,\\r\\n            \\'#color\\': \\'info\\',\\r\\n            \\'#outlined\\': true\\r\\n        };\\r\\n\\r\\n        build.advanced_settings = {\\r\\n            \\'#type\\': \\'accordion\\',\\r\\n            \\'#panels\\': [\\r\\n                {\\r\\n                    \\'#title\\': \\'Sound\\',\\r\\n                    \\'#content\\': {\\r\\n                        paragraph: {\\r\\n                            \\'#type\\': \\'paragraph\\',\\r\\n                            \\'#flat\\': true,\\r\\n                            \\'#title\\': \\'Description\\',\\r\\n                            \\'#description\\': \\'This is very cool\\',\\r\\n                            \\'#value\\': \\'Add your sound file, so we can start to edit :D\\'\\r\\n                        },\\r\\n                        sound_upload: {\\r\\n                            \\'#type\\': \\'upload\\',\\r\\n                            \\'#title\\': \\'Sound File\\',\\r\\n                            \\'#description\\': \\'Select your sound file.\\',\\r\\n                            \\'#value\\': Module.fallback(values, \\'sound_upload\\', Module.fallback(data, \\'sound_upload\\', [])),\\r\\n                        },\\r\\n                        sound_upload_edit: {\\r\\n                            \\'#type\\': \\'redirect_button\\',\\r\\n                            \\'#title\\': \\'Edit audio file\\',\\r\\n                            \\'#appendIcon\\': \\'audiotrack\\',\\r\\n                            \\'#vif\\': \\'~sound_upload\\',\\r\\n                            \\'#to\\': {\\r\\n                                name: \\'core.sound\\'\\r\\n                            },\\r\\n                            \\'#block\\': true,\\r\\n                            \\'#color\\': \\'info\\',\\r\\n                            \\'#outlined\\': true\\r\\n                        }\\r\\n                    }\\r\\n                },\\r\\n                {\\r\\n                    \\'#title\\': \\'Image\\',\\r\\n                    \\'#content\\': {\\r\\n                        image_upload: {\\r\\n                            \\'#type\\': \\'upload\\',\\r\\n                            \\'#title\\': \\'Image File\\',\\r\\n                            \\'#description\\': \\'Select your sound file.\\',\\r\\n                            \\'#persistentHint\\': true,\\r\\n                            \\'#value\\': Module.fallback(values, \\'image_upload\\', Module.fallback(data, \\'image_upload\\', [])),\\r\\n                        },\\r\\n\\r\\n                        image_upload_edit: {\\r\\n                            \\'#type\\': \\'redirect_button\\',\\r\\n                            \\'#title\\': \\'Edit image file\\',\\r\\n                            \\'#appendIcon\\': \\'crop_original\\',\\r\\n                            \\'#vif\\': \\'~image_upload\\',\\r\\n                            \\'#to\\': {\\r\\n                                name: \\'add.tile.image\\'\\r\\n                            },\\r\\n                            \\'#show\\': false,\\r\\n                            \\'#block\\': true,\\r\\n                            \\'#color\\': \\'info\\',\\r\\n                            \\'#outlined\\': true\\r\\n                        },\\r\\n                    }\\r\\n                },\\r\\n            ],\\r\\n        };\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n    validate: (Module, values) => {\\r\\n\\r\\n        /**\\r\\n         * Return key: value for error messages.\\r\\n         *\\r\\n         * key => Resembling the field id.\\r\\n         * value => Resembling the the error message.\\r\\n         */\\r\\n        return true;\\r\\n    },\\r\\n\\r\\n    submit: async (Module, values) => {\\r\\n        const prefix = \\'/soundboard\\';\\r\\n        const path = `${prefix}${values.path}`;\\r\\n        const file_name = Date.now();\\r\\n\\r\\n        /** @var images {Array<File>} */\\r\\n        const images = Module.fallback(values, \\'image_upload\\', false);\\r\\n        if (images !== false) {\\r\\n            for (let i = 0; i < images; i++) {\\r\\n\\r\\n                /** @var image {File} */\\r\\n                const image = images[i];\\r\\n\\r\\n                const blob = new Blob([image], {\\r\\n                    type: image.mimeType\\r\\n                });\\r\\n\\r\\n                console.log(image.filename)\\r\\n                await Module.fileSystem.write(`${path}files/${file_name}_${image.filename}`, blob);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        await Module.fileSystem.write(`${path}${file_name}.json`, JSON.stringify(values))\\r\\n\\r\\n        // The submitted values of the user.\\r\\n        return values;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Settings;\\r\\n})();');\r\n        await this.fileSystem.write('/modules/core/src/regions/form/tile/TileText.js', 'const Form = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    \"info\": {\\r\\n        \"title\": \"TEXT SETTINGS\",\\r\\n        \"description\": \"All you want in your text shall be here.\",\\r\\n        \"id\": \"tile_text\",\\r\\n        \"location\": \"settings\",\\r\\n        \"submit\": false,\\r\\n    },\\r\\n\\r\\n    \"build\": (Module, values, data) => {\\r\\n        let build = {};\\r\\n\\r\\n        build.text = {\\r\\n            \\'#type\\': \\'paragraph\\',\\r\\n            \\'#value\\': Module.fallback(data, \\'tile_title\\', \\'Lorem ipsum dolor sit amet\\'),\\r\\n            \\'#textColor\\': \\'~text_color\\',\\r\\n        };\\r\\n\\r\\n        build.text_color = {\\r\\n            \\'#type\\': \\'colorpicker\\',\\r\\n            \\'#title\\': \\'Color\\',\\r\\n            \\'#classCSS\\': [\\'mt-3\\', \\'mb-3\\'],\\r\\n            \\'#hideModeSwitch\\': true,\\r\\n            \\'#description\\': \\'This color will be the default color of the tile.\\',\\r\\n            \\'#value\\': Module.fallback(data, \\'text_color\\', \\'#32a852\\'),\\r\\n        }\\r\\n\\r\\n        build.alter_text = {\\r\\n            \\'#type\\': \\'redirect_button\\',\\r\\n            \\'#title\\': \\'Confirm\\',\\r\\n            \\'#prependIcon\\': \\'exit_to_app\\',\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile\\'\\r\\n            },\\r\\n            \\'#color\\': \\'green\\',\\r\\n            \\'#outlined\\': true,\\r\\n            \\'#block\\': true\\r\\n        };\\r\\n\\r\\n\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n    validate: (Module, values) => {\\r\\n\\r\\n        /**\\r\\n         * Return key: value for error messages.\\r\\n         *\\r\\n         * key => Resembling the field id.\\r\\n         * value => Resembling the the error message.\\r\\n         */\\r\\n        return true;\\r\\n    },\\r\\n\\r\\n    submit: (Module, values) => {\\r\\n\\r\\n        // The submitted values of the user.\\r\\n        return values;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Form;\\r\\n})();');\r\n        await this.fileSystem.write('/modules/core/src/regions/form/TileTemplates.js', 'const Settings = {\\r\\n\\r\\n    /**\\r\\n     * @type {Object}\\r\\n     * @description This holds information about the form.\\r\\n     */\\r\\n    \"info\": {\\r\\n        \"title\": \"Tile Templates\",\\r\\n        \"description\": \"Find and choose the tile templates you want to use.\",\\r\\n        \"id\": \"tile_templates\",\\r\\n        \"tab\": \"misc\",\\r\\n        \"location\": \"settings\",\\r\\n        \"submit\": false\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param {Module} Module\\r\\n     * @param {Object} values\\r\\n     * @param {Object} data\\r\\n     *\\r\\n     * @returns {{}}\\r\\n     */\\r\\n    \"build\": (Module, values, data) => {\\r\\n        let build = {};\\r\\n\\r\\n        build.title = {\\r\\n            \\'#type\\': \\'headline\\',\\r\\n            \\'#title\\': \\'Tile Templates\\',\\r\\n        };\\r\\n\\r\\n        build.tile_column = {\\r\\n            \\'#type\\': \\'one_column\\',\\r\\n            \\'#content\\': {\\r\\n                add_tile: {\\r\\n                    \\'#type\\': \\'tile_template\\',\\r\\n                    \\'#title\\': \\'Tile\\',\\r\\n                    \\'#to\\': {\\r\\n                        name: \\'add.tile\\',\\r\\n                        params: {\\r\\n                            tile_title: \"\",\\r\\n                            path: data.path,\\r\\n                        }\\r\\n                    },\\r\\n                    \\'#color\\': \\'info\\'\\r\\n                }\\r\\n            },\\r\\n        };\\r\\n\\r\\n        build.board = {\\r\\n            \\'#type\\': \\'headline\\',\\r\\n            \\'#title\\': \\'Board Templates\\',\\r\\n        };\\r\\n\\r\\n        build.add_board = {\\r\\n            \\'#type\\': \\'tile_template\\',\\r\\n            \\'#title\\': \\'Board\\',\\r\\n            \\'#to\\': {\\r\\n                name: \\'add.tile\\'\\r\\n            },\\r\\n            \\'#color\\': \\'info\\'\\r\\n        };\\r\\n\\r\\n        return build;\\r\\n    },\\r\\n    validate: (Module, values) => {\\r\\n\\r\\n        /**\\r\\n         * Return key: value for error messages.\\r\\n         *\\r\\n         * key => Resembling the field id.\\r\\n         * value => Resembling the the error message.\\r\\n         */\\r\\n        return true;\\r\\n    },\\r\\n\\r\\n    submit: (Module, values) => {\\r\\n\\r\\n        // The submitted values of the user.\\r\\n        return values;\\r\\n    },\\r\\n};\\r\\n\\r\\n(() => {\\r\\n    return Settings;\\r\\n})();');\r\n    }\r\n}\r\n","import Module from \"./Module\";\r\nimport Console from \"../Console\";\r\nimport Installer from \"../Installer\";\r\nexport default class ModuleManager extends Console {\r\n    constructor(fileSystem, root, manager) {\r\n        super(fileSystem);\r\n        this.modules = [];\r\n        this.path = '';\r\n        this.manager = manager;\r\n        this.fileSystem = fileSystem;\r\n        this.path = root;\r\n        this.discover().then();\r\n    }\r\n    async discover() {\r\n        await new Installer(this.fileSystem).install();\r\n        // List all directories in the module directory.\r\n        const directories = await this.fileSystem.list(this.path, 'd');\r\n        for (let i = 0; i < directories.length; i++) {\r\n            const directory = directories[i];\r\n            this.log('Directory found!', directory);\r\n            let id = directory;\r\n            id = id.split('/');\r\n            id = id[id.length - 2];\r\n            const module = new Module(this, directory, id);\r\n            await module.initialize();\r\n            this.manager.summary();\r\n        }\r\n    }\r\n    ;\r\n}\r\n","import Console from \"./Console\";\r\nimport ModuleManager from \"./Module/Manager\";\r\nimport RouteManager from \"./Render/Route/Manager\";\r\nimport ComponentManager from \"./Render/Component/Manager\";\r\nexport default class Manager extends Console {\r\n    constructor(fileSystem) {\r\n        super(fileSystem);\r\n        this.fileSystem = fileSystem;\r\n        this.moduleManager = new ModuleManager(fileSystem, '/modules/', this);\r\n        // Contains all routes.\r\n        this.routeManager = new RouteManager(fileSystem);\r\n        this.componentManager = new ComponentManager(fileSystem);\r\n    }\r\n    /**\r\n     * Collect all data from the modules and sum them together.\r\n     */\r\n    summary() {\r\n        for (let i = 0; i < this.moduleManager.modules.length; i++) {\r\n            const module = this.moduleManager.modules[i];\r\n            // Merge routes.\r\n            this.routeManager.routes = [...this.routeManager.routes, ...module.routeManager.routes];\r\n            this.componentManager.regions = [...this.componentManager.regions, ...module.componentManager.regions];\r\n            this.componentManager.containers = [...this.componentManager.containers, ...module.componentManager.containers];\r\n            this.componentManager.elements = [...this.componentManager.elements, ...module.componentManager.elements];\r\n        }\r\n    }\r\n}\r\n","import CordovaPromiseFS from 'cordova-promise-fs';\r\nimport promiscuous from \"promiscuous\";\r\nimport * as Common from \"./../../common/lib/Library\";\r\n\r\nlet cordovaExists = false;\r\nwindow.cordovaExists = cordovaExists;\r\nwindow.CordovaPromiseFS = CordovaPromiseFS;\r\n\r\nconsole.debug(\"Starting app.\");\r\n\r\ntry {\r\n    if (typeof cordova !== 'undefined' && cordova.file.cacheDirectory) {\r\n        cordovaExists = true;\r\n    }\r\n}\r\ncatch (error) {\r\n    console.log(error);\r\n}\r\n\r\nlet fileSystem;\r\nif (cordovaExists) {\r\n    console.debug(\"Cordova was appended and fileSystem initialized.\");\r\n    fileSystem = CordovaPromiseFS({\r\n        persistent: true, // or false\r\n        storageSize: 20 * 1024 * 1024, // storage size in bytes, default 20MB\r\n        concurrency: 3, // how many concurrent uploads/downloads?\r\n        Promise: promiscuous,\r\n        fileSystem: cordova.file.cacheDirectory\r\n    });\r\n}\r\nelse {\r\n    console.debug(\"Cordova was not appended.\");\r\n    fileSystem = {\r\n        ensure: async () => {\r\n            return false;\r\n        },\r\n        exists: async () => {\r\n            return false;\r\n        },\r\n        create: async () => {\r\n            return false;\r\n        },\r\n        read: async (path) => {\r\n            if (!window.localStorage.hasOwnProperty(path)) {\r\n                return undefined;\r\n            }\r\n\r\n            return window.localStorage.getItem(path);\r\n        },\r\n        readJSON: async (path) => {\r\n            if (!window.localStorage.hasOwnProperty(path)) {\r\n                return undefined;\r\n            }\r\n\r\n            return JSON.parse(window.localStorage.getItem(path));\r\n        },\r\n        write: async (path, content) => {\r\n            window.localStorage.setItem(path, content);\r\n        },\r\n        list: async (path, optionString = '') => {\r\n            const keys = Object.keys(window.localStorage);\r\n            let values = [];\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n\r\n                if (!key.includes(path)) {\r\n                    continue;\r\n                }\r\n\r\n                // Continue if extension is detected.\r\n                if (optionString.includes('d')) {\r\n                    let source = key.split('/');\r\n\r\n                    // Filter array from empty entries.\r\n                    source = source.filter(item => item);\r\n\r\n                    let target = path.split('/');\r\n\r\n                    // Filter array from empty entries.\r\n                    target = target.filter(item => item);\r\n\r\n                    if (source.length > target.length) {\r\n                        let isFile = source[target.length].split('.').length > 1;\r\n                        source = '/' + source.splice(0, target.length + 1).join('/') + '/';\r\n                        if (!isFile && !values.includes(source)) values.push(source);\r\n                    }\r\n\r\n                    continue;\r\n                }\r\n\r\n                values.push(key);\r\n            }\r\n\r\n            return values;\r\n        },\r\n    };\r\n\r\n    window.localSystem = {};\r\n}\r\n\r\nconst Manager = new Common.Manager(fileSystem);\r\nwindow['Manager'] = Manager;\r\nconsole.log(Manager)\r\n\r\nwindow.fileSystem = fileSystem;\r\n\r\n"],"sourceRoot":""}