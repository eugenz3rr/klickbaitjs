export default class Installer {
    constructor(fileSystem) {
        this.fileSystem = fileSystem;
    }
    // @ts-ignore
    async install() {
        await this.fileSystem.write('/modules/colors/colors.events.js', '(() => {\r\n  return {\r\n    "module.post.init": async () => {\r\n      console.log("yes!");\r\n    },\r\n  };\r\n})();');
        await this.fileSystem.write('/modules/colors/colors.info.json', '{\r\n  "name": "Klickbait - Colors",\r\n  "description": "This module provides color functionality.",\r\n  "group": "klickbait",\r\n  "type": "module",\r\n  "version": "1.0.0",\r\n  "dependencies": [\r\n    "core"\r\n  ]\r\n}');
        await this.fileSystem.write('/modules/colors/colors.routing.json', '{\r\n  "colors.default": {\r\n    "path": "/colors/default",\r\n    "title": "Colors",\r\n    "description": "Change colors.",\r\n    "hide": true,\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Colors",\r\n        "description": "Edit the current set color variables.",\r\n        "path": "src/form/Default.js",\r\n        "icon": "home"\r\n      }\r\n    ]\r\n  }\r\n}');
        await this.fileSystem.write('/modules/colors/src/form/Default.js', '(() => {\r\n    return {\r\n\r\n        /**\r\n         * @type {Object}\r\n         * @description This holds information about the form.\r\n         */\r\n        info: {\r\n            title: "Colors",\r\n            description: ""\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param Module\r\n         * @param VueRoute\r\n         * @returns {{}}\r\n         */\r\n        build: async (Module, VueRoute) => {\r\n            let build = {};\r\n            const path = \'/colors/\';\r\n\r\n            // Determine the path.\r\n            await Module.fileSystem.ensure(path);\r\n\r\n            // Ensure the settings exists.\r\n            const configuration_path = `${path}configuration.json`;\r\n            let configuration;\r\n\r\n            try {\r\n                configuration = await Module.fileSystem.readJSON(configuration_path);\r\n            }\r\n            catch (e) {\r\n                configuration = {\r\n                    \'background-primary\': \'#2c3e50\',\r\n                    \'background-secondary\': \'#34495e\',\r\n                    \'background-tertiary\': \'#7f8c8d\',\r\n\r\n                    \'icon\': \'#ecf0f1\',\r\n                    \'string\': \'#ecf0f1\',\r\n                    \'accent\': \'#ecf0f1\',\r\n\r\n                    \'status-neutral\': \'#2980b9\',\r\n                    \'status-info\': \'#f1c40f\',\r\n                    \'status-warning\': \'#e67e22\',\r\n                    \'status-error\': \'#d35400\',\r\n                };\r\n\r\n                await Module.fileSystem.write(configuration_path, JSON.stringify(configuration));\r\n            }\r\n\r\n            build.colors_definition = {\r\n                \'#title\': \'Colors\',\r\n                \'#type\': \'paragraph\',\r\n                \'#flat\': true,\r\n                \'#value\': \'Here you can change the looks of the app.<br/>Are we going full black?\',\r\n            };\r\n\r\n            let color_keys = Object.keys(configuration);\r\n            for (let i = 0; i < color_keys.length; i++) {\r\n                let current_key = color_keys[i];\r\n                let current_color = configuration[current_key];\r\n\r\n                build[`${current_key}_title`] = {\r\n                    \'#type\': \'paragraph\',\r\n                    \'#title\': current_key.replace(\'-\', \' \').toUpperCase(),\r\n                    \'#classes\': [\'mb-2\'],\r\n                    \'#flat\': true,\r\n                };\r\n\r\n                build[current_key] = {\r\n                    \'#type\': \'colorpicker\',\r\n                    \'#mode\': \'hex\',\r\n                    \'#classes\': [\'mb-2\'],\r\n                    \'#value\': current_color,\r\n                };\r\n            }\r\n\r\n            return build;\r\n        },\r\n        validate: (Module, values) => {\r\n\r\n            /**\r\n             * Return key: value for error messages.\r\n             *\r\n             * key => Resembling the field id.\r\n             * value => Resembling the the error message.\r\n             */\r\n            return true;\r\n        },\r\n        submit: async (Module, values, Router) => {\r\n            try {\r\n                await Module.fileSystem.write(\'/colors/configuration.json\', JSON.stringify(values));\r\n            }\r\n            catch (e) {\r\n                console.error(\'Could not write color values.\', e);\r\n            }\r\n        }\r\n    };\r\n})();');
        await this.fileSystem.write('/modules/core/core.components.json', '{\r\n  "regions": {\r\n    "content": {\r\n      "title": "Content",\r\n      "description": "Is used to display data.",\r\n      "path": "src/regions/Content.js"\r\n    },\r\n    "form": {\r\n      "title": "Form",\r\n      "description": "Is used to alter data.",\r\n      "path": "src/regions/Form.js"\r\n    }\r\n  },\r\n  "containers": {\r\n    "accordion": {\r\n      "title": "Accordion",\r\n      "description": "An element which contains elements in a specific arrangement.",\r\n      "path": "src/containers/Accordion.js"\r\n    },\r\n    "list": {\r\n      "title": "List",\r\n      "description": "An element which contains elements in a specific arrangement.",\r\n      "path": "src/containers/List.js"\r\n    },\r\n    "tab": {\r\n      "title": "Tab",\r\n      "description": "An element which contains elements in a specific arrangement.",\r\n      "path": "src/containers/Tab.js"\r\n    },\r\n    "two_column": {\r\n      "title": "Two Column",\r\n      "description": "An element which enables to split content on the left and content on the right.",\r\n      "path": "src/containers/layouts/TwoColumn.js"\r\n    },\r\n    "one_column": {\r\n      "title": "One Column",\r\n      "description": "An element which enables to split content on the left and content on the right.",\r\n      "path": "src/containers/layouts/OneColumn.js"\r\n    },\r\n    "add-tile-button": {\r\n      "title": "Add Tile Button",\r\n      "description": "An element which enables the user to upload files.",\r\n      "path": "src/elements/custom/tile/AddTileButton.js"\r\n    },\r\n    "floating_buttons": {\r\n      "title": "A floating button container.",\r\n      "description": "An element which enables the user to upload files.",\r\n      "path": "src/elements/custom/tile/AddTileButton.js"\r\n    }\r\n  },\r\n  "elements": {\r\n    "tile": {\r\n      "title": "Tile",\r\n      "description": "Displays the tile.",\r\n      "path": "src/elements/custom/Tile.js"\r\n    },\r\n    "board": {\r\n      "title": "Board",\r\n      "description": "Displays a board tile. Similar to a tile but without sound.",\r\n      "path": "src/elements/custom/Board.js"\r\n    },\r\n    "textfield": {\r\n      "title": "Textfield",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Textfield.js"\r\n    },\r\n    "button": {\r\n      "title": "Button",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Button.js"\r\n    },\r\n    "redirect_button": {\r\n      "title": "Redirect Button",\r\n      "description": "This button takes all current work and redirects the user and the content the user edited.",\r\n      "path": "src/elements/RedirectButton.js"\r\n    },\r\n    "textarea": {\r\n      "title": "Textarea",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Textarea.js"\r\n    },\r\n    "colorpicker": {\r\n      "title": "Color Picker",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Colorpicker.js"\r\n    },\r\n    "switch": {\r\n      "title": "Switch",\r\n      "description": "An element which changes information.",\r\n      "path": "src/elements/Switch.js"\r\n    },\r\n    "headline": {\r\n      "title": "Headline",\r\n      "description": "An element which should resemble the headline.",\r\n      "path": "src/elements/Headline.js"\r\n    },\r\n    "paragraph": {\r\n      "title": "Paragraph",\r\n      "description": "An element which should resemble a paragraph.",\r\n      "path": "src/elements/Paragraph.js"\r\n    },\r\n    "advanced-space-holder": {\r\n      "title": "Space-Holder",\r\n      "description": "An element which should resemble a paragraph.",\r\n      "path": "src/elements/AdvancedSpaceHolder.js"\r\n    },\r\n    "information": {\r\n      "title": "Information",\r\n      "description": "An element which should resemble a paragraph.",\r\n      "path": "src/elements/Information.js"\r\n    },\r\n    "dropdown": {\r\n      "title": "Dropdown",\r\n      "description": "An element which should resemble a paragraph.",\r\n      "path": "src/elements/Dropdown.js"\r\n    },\r\n    "upload": {\r\n      "title": "Upload",\r\n      "description": "An element which enables the user to upload files.",\r\n      "path": "src/elements/Upload.js"\r\n    },\r\n    "sound": {\r\n      "title": "Sound",\r\n      "description": "An element which enables the user to upload files.",\r\n      "path": "src/elements/Sound.js"\r\n    },\r\n    "image": {\r\n      "title": "Image",\r\n      "description": "An element which enables the user to upload files.",\r\n      "path": "src/elements/Image.js"\r\n    },\r\n    "tile_template": {\r\n      "title": "TileTemplate",\r\n      "description": "An element which enables the user to upload files.",\r\n      "path": "src/elements/custom/tile/TileTemplate.js"\r\n    }\r\n  }\r\n}');
        await this.fileSystem.write('/modules/core/core.info.json', '{\r\n  "name": "Klickbait - Mymodule",\r\n  "description": "This module is supposed to be an example module.",\r\n  "group": "klickbait",\r\n  "type": "module",\r\n  "version": "1.0.0",\r\n  "dependencies": []\r\n}');
        await this.fileSystem.write('/modules/core/core.routing.json', '{\r\n  "core.board": {\r\n    "path": "/core/board*",\r\n    "title": "Board",\r\n    "description": "Board where the tiles are located at.",\r\n    "hide": false,\r\n    "params": {\r\n      "pathMatch": "/soundboard/"\r\n    },\r\n    "regions": [\r\n      {\r\n        "type": "content",\r\n        "title": "Tile display",\r\n        "description": "This part displays the currently edited / added tile.",\r\n        "path": "src/regions/content/Board.js",\r\n        "icon": "home"\r\n      }\r\n    ]\r\n  },\r\n  "core.help": {\r\n    "path": "/core/help",\r\n    "title": "Help",\r\n    "description": "Some information to actually help the developers..",\r\n    "hide": true,\r\n    "regions": [\r\n      {\r\n        "type": "content",\r\n        "title": "Help content",\r\n        "description": "This part displays the help section.",\r\n        "path": "src/regions/content/Board.js",\r\n        "icon": "home"\r\n      }\r\n    ]\r\n  },\r\n  "core.settings": {\r\n    "path": "/core/settings",\r\n    "title": "Settings",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Tile form",\r\n        "description": "Edit / add current tile.",\r\n        "path": "src/regions/form/Settings.js"\r\n      }\r\n    ]\r\n  },\r\n  "core.modules": {\r\n    "path": "/core/modules",\r\n    "title": "Modules",\r\n    "description": "This displays all modules.",\r\n    "regions": [\r\n      {\r\n        "type": "content",\r\n        "title": "",\r\n        "description": "",\r\n        "path": "src/regions/content/Modules.js"\r\n      }\r\n    ]\r\n  },\r\n  "tile.templates": {\r\n    "path": "/tile/templates",\r\n    "title": "Templates",\r\n    "description": "Here you choose your tiles before adding your final stuff.",\r\n    "regions": [\r\n      {\r\n        "type": "content",\r\n        "title": "",\r\n        "description": "",\r\n        "path": "src/regions/form/TileTemplates.js"\r\n      }\r\n    ]\r\n  },\r\n  "core.sound": {\r\n    "path": "/tile/sound",\r\n    "title": "Sound",\r\n    "description": "Here you choose your tiles before adding your final stuff.",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "",\r\n        "description": "",\r\n        "path": "src/regions/form/EditSound.js"\r\n      }\r\n    ]\r\n  },\r\n  "add.tile.image": {\r\n    "path": "/tile/image",\r\n    "title": "Image",\r\n    "description": "Here you choose your tiles before adding your final stuff.",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "",\r\n        "description": "",\r\n        "path": "src/regions/form/EditImage.js"\r\n      }\r\n    ]\r\n  },\r\n  "add.tile": {\r\n    "path": "/add/tile",\r\n    "title": "Add Tile",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Tile form",\r\n        "description": "Add a tile.",\r\n        "path": "src/regions/form/tile/AddTile.js"\r\n      }\r\n    ]\r\n  },\r\n  "edit.tile": {\r\n    "path": "/edit/tile",\r\n    "title": "Edit Tile",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Tile form",\r\n        "description": "Add a tile.",\r\n        "path": "src/regions/form/tile/EditTile.js"\r\n      }\r\n    ]\r\n  },\r\n  "delete.tile": {\r\n    "path": "/delete/tile",\r\n    "title": "Delete Tile",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Tile form",\r\n        "description": "Add a tile.",\r\n        "path": "src/regions/form/tile/DeleteTile.js"\r\n      }\r\n    ]\r\n  },\r\n  "add.board": {\r\n    "path": "/add/board",\r\n    "title": "Add Board",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Board form",\r\n        "description": "Add a board.",\r\n        "path": "src/regions/form/tile/AddBoard.js"\r\n      }\r\n    ]\r\n  },\r\n  "edit.board": {\r\n    "path": "/edit/board",\r\n    "title": "Edit Board",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Board form",\r\n        "description": "Edit a board.",\r\n        "path": "src/regions/form/tile/EditBoard.js"\r\n      }\r\n    ]\r\n  },\r\n  "delete.board": {\r\n    "path": "/delete/board",\r\n    "title": "Delete Board",\r\n    "description": "Default settings",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "Tile form",\r\n        "description": "Add a tile.",\r\n        "path": "src/regions/form/tile/DeleteBoard.js"\r\n      }\r\n    ]\r\n  },\r\n  "add.tile.text": {\r\n    "path": "/add/tile/text",\r\n    "title": "Tile Text",\r\n    "description": "Here you choose the text style for your tile.",\r\n    "regions": [\r\n      {\r\n        "type": "form",\r\n        "title": "",\r\n        "description": "",\r\n        "path": "src/regions/form/tile/TileText.js"\r\n      }\r\n    ]\r\n  }\r\n}');
        await this.fileSystem.write('/modules/core/src/containers/Accordion.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-Accordion\',\r\n        components,\r\n        template:\r\n            \'  <v-expansion-panels :accordion="accordion"\\n\' +\r\n            \'                      :popout="popout"\\n\' +\r\n            \'                      :inset="inset"\\n\' +\r\n            \'                      :multiple="multiple"\\n\' +\r\n            \'                      :focusable="focusable"\\n\' +\r\n            \'                      :disabled="disabled"\\n\' +\r\n            \'                      :readonly="readonly"\\n\' +\r\n            \'                      :flat="flat"\\n\' +\r\n            \'                      :hover="hover"\\n\' +\r\n            \'                      :tile="tile">\\n\' +\r\n            \'    <v-expansion-panel v-for="(panel, key) in panels" :key="`${key}-accordion-${panels.length}`">\\n\' +\r\n            \'      <v-expansion-panel-header>{{ panel[\\\'#title\\\'] }}</v-expansion-panel-header>\\n\' +\r\n            \'\\n\' +\r\n            \'      <v-expansion-panel-content>\\n\' +\r\n            \'        <component v-for="(renderElement, element) in panel[\\\'#content\\\']"\\n\' +\r\n            \'                   :is="`as-${renderElement[\\\'#type\\\']}`"\\n\' +\r\n            \'                   :renderElement="renderElement"\\n\' +\r\n            \'                   :element="element"\\n\' +\r\n            \'                   :key="`${element}.${changed}`"\\n\' +\r\n            \'                   :region="region"/>\\n\' +\r\n            \'      </v-expansion-panel-content>\\n\' +\r\n            \'    </v-expansion-panel>\\n\' +\r\n            \'  </v-expansion-panels>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                panels: {},\r\n                accordion: true,\r\n                popout: false,\r\n                inset: false,\r\n                multiple: false,\r\n                disabled: false,\r\n                readonly: false,\r\n                focusable: false,\r\n                flat: true,\r\n                hover: false,\r\n                tile: false,\r\n                changed: 0,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            this.panels = this.element[\'#panels\'];\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    Module.appendStyle(`src/containers/css/Accordion.css`, component.name);\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/containers/css/Accordion.css', '.v-expansion-panels {\r\n    z-index: 0 !important;\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n}\r\n.v-expansion-panels :before {\r\n    border: solid 1px var(--accent);\r\n    box-shadow: none !important;\r\n}\r\n.v-expansion-panels :first-child:before {\r\n    border-bottom: none;\r\n}');
        await this.fileSystem.write('/modules/core/src/containers/css/List.css', '.v-expansion-panels {\r\n    z-index: 0 !important;\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n}\r\n.v-expansion-panels :before {\r\n    border: solid 1px var(--accent);\r\n    box-shadow: none !important;\r\n}\r\n.v-expansion-panels :first-child:before {\r\n    border-bottom: none;\r\n}');
        await this.fileSystem.write('/modules/core/src/containers/css/Tab.css', '.v-tabs {\r\n    margin-top: 20px;\r\n}\r\n.v-tabs .v-tabs-slider {\r\n    background-color: var(--accent) !important;\r\n}\r\n.v-tabs .v-tabs-bar {\r\n    background-color: var(--secondary) !important;\r\n}\r\n.v-tabs .v-tabs-bar .v-tab {\r\n    color: var(--font) !important;\r\n}\r\n\r\n.v-window {\r\n    margin-bottom: 20px;\r\n}\r\n.v-window .v-card {\r\n    background-color: var(--primary) !important;\r\n}');
        await this.fileSystem.write('/modules/core/src/containers/layouts/css/OneColumn.css', '.one-column {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.one-column .tile {\r\n\r\n}');
        await this.fileSystem.write('/modules/core/src/containers/layouts/css/TwoColumn.css', '.two-column {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    grid-template-areas:\r\n              "first second";\r\n}\r\n\r\n.first-column {\r\n    grid-area: first;\r\n}\r\n\r\n.second-column {\r\n    grid-area: second;\r\n}');
        await this.fileSystem.write('/modules/core/src/containers/layouts/OneColumn.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'TileContainer\',\r\n        components,\r\n        template:\r\n            \'<div class="one-column">\' +\r\n            \'   <component v-for="(renderElement, element) in content"\' +\r\n            \'              :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'              :renderElement="renderElement"\' +\r\n            \'              :element="element"\' +\r\n            \'              :key="`${element}.${changed}`"\' +\r\n            \'              :region="region"/>\' +\r\n            \'</div>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                content: {},\r\n                changed: 0\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n        updated: async function () {\r\n            const containers = document.querySelector(\'.one-column\');\r\n            const computedWidth = containers.offsetWidth;\r\n\r\n            /*const sortable = new Draggable.Swappable(containers, {\r\n                draggable: \'.tile\',\r\n                mirror: {\r\n                    appendTo: \'.one-column\',\r\n                    constrainDimensions: true,\r\n                },\r\n                plugins: [Draggable.Plugins.SwapAnimation],\r\n                sortAnimation: {\r\n                    duration: 200,\r\n                },\r\n            });*/\r\n        }\r\n    };\r\n\r\n    Module.appendStyle(`src/containers/layouts/css/OneColumn.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/containers/layouts/TwoColumn.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-TwoColumn\',\r\n        components,\r\n        template:\r\n            \'<div class="two-column mt-2">\' +\r\n            \'   <v-card class="first-column" flat>\' +\r\n            \'       <v-card-text>\' +\r\n            \'             <component v-for="(renderElement, element) in first"\' +\r\n            \'                        :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'                        :renderElement="renderElement"\' +\r\n            \'                        :element="element"\' +\r\n            \'                        :key="`${element}.${changed}`"\' +\r\n            \'                        :region="region"/>\' +\r\n            \'       </v-card-text>\' +\r\n            \'   </v-card>\' +\r\n            \'   <v-card class="second-column" flat>\' +\r\n            \'       <v-card-text>\' +\r\n            \'             <component v-for="(renderElement, element) in second"\' +\r\n            \'                        :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'                        :renderElement="renderElement"\' +\r\n            \'                        :element="element"\' +\r\n            \'                        :key="`${element}.${changed}`"\' +\r\n            \'                        :region="region"/>\' +\r\n            \'       </v-card-text>\' +\r\n            \'   </v-card>\' +\r\n            \'</div>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                first: {},\r\n                second: {},\r\n                changed: 0\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // this.first = Module.fallback(this.element, \'#first\', {});\r\n            // this.second = Module.fallback(this.element, \'#second\', {});\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    Module.appendStyle(`src/containers/layouts/css/TwoColumn.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/containers/List.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-List\',\r\n        components,\r\n        template:\r\n            \'  <v-list\\n\' +\r\n            \'      :disabled="disabled"\\n\' +\r\n            \'      :dense="dense"\\n\' +\r\n            \'      :two-line="twoLine"\\n\' +\r\n            \'      :three-line="threeLine"\\n\' +\r\n            \'      :shaped="shaped"\\n\' +\r\n            \'      :flat="flat"\\n\' +\r\n            \'      :subheader="subheader"\\n\' +\r\n            \'      :sub-group="subGroup"\\n\' +\r\n            \'      :nav="nav"\\n\' +\r\n            \'      :avatar="avatar"\\n\' +\r\n            \'      :rounded="rounded">\\n\' +\r\n            \'\\n\' +\r\n            \'    <v-list-item v-for="(panel, key) in panels" :key="`${key}-list-${panels.length}`">\\n\' +\r\n            \'      <v-list-item-content>\\n\' +\r\n            \'        <component v-for="(renderElement, element) in panel[\\\'#content\\\']"\\n\' +\r\n            \'                  :is="`as-${renderElement[\\\'#type\\\']}`"\\n\' +\r\n            \'                   :renderElement="renderElement"\\n\' +\r\n            \'                   :element="element"\\n\' +\r\n            \'                   :key="`${element}.${changed}`"\\n\' +\r\n            \'                   :region="region"/>\\n\' +\r\n            \'      </v-list-item-content>\\n\' +\r\n            \'    </v-list-item>\\n\' +\r\n            \'  </v-list>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                panels: {},\r\n                disabled: false,\r\n                dense: false,\r\n                twoLine: false,\r\n                threeLine: false,\r\n                shaped: false,\r\n                flat: false,\r\n                subheader: false,\r\n                inactive: false,\r\n                subGroup: false,\r\n                nav: false,\r\n                avatar: false,\r\n                rounded: false,\r\n                changed: 0,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            this.panels = this.element[\'#panels\'];\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    Module.appendStyle(`src/containers/css/List.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/containers/Tab.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    const component = {\r\n        name: \'S-Tab\',\r\n        components,\r\n        template:\r\n            \'  <v-card>\\n\' +\r\n            \'    <v-tabs v-model="panel"\\n\' +\r\n            \'            :centered="centered"\\n\' +\r\n            \'            :grow="grow"\\n\' +\r\n            \'            :vertical="vertical"\\n\' +\r\n            \'            :right="right">\\n\' +\r\n            \'      <v-tab v-for="(panel, key) in panels" :key="`${key}-tab-header-${panels.length}`">\\n\' +\r\n            \'        {{ panel[\\\'#title\\\'] }}\\n\' +\r\n            \'      </v-tab>\\n\' +\r\n            \'    </v-tabs>\\n\' +\r\n            \'\\n\' +\r\n            \'    <v-tabs-items v-model="panel">\\n\' +\r\n            \'      <v-tab-item v-for="(panel, key) in panels" :key="`${key}-tab-content-${panels.length}`">\\n\' +\r\n            \'        <v-card flat>\\n\' +\r\n            \'          <v-card-text>\\n\' +\r\n            \'            <component v-for="(renderElement, element) in panel[\\\'#content\\\']"\\n\' +\r\n            \'                       :is="`as-${renderElement[\\\'#type\\\']}`"\\n\' +\r\n            \'                       :renderElement="renderElement"\\n\' +\r\n            \'                       :element="element"\\n\' +\r\n            \'                       :key="`${element}.${changed}`"\\n\' +\r\n            \'                       :region="region"/>\\n\' +\r\n            \'          </v-card-text>\\n\' +\r\n            \'        </v-card>\\n\' +\r\n            \'      </v-tab-item>\\n\' +\r\n            \'    </v-tabs-items>\\n\' +\r\n            \'  </v-card>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            region: Object\r\n        },\r\n        data() {\r\n            return {\r\n                panels: {},\r\n                panel: 1,\r\n                centered: false,\r\n                grow: true,\r\n                vertical: false,\r\n                right: false,\r\n                changed: 0,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            this.panels = this.element[\'#panels\'];\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n    Module.appendStyle(`src/containers/css/Tab.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/AdvancedSpaceHolder.js', 'Module => {\r\n    const component = {\r\n        name: \'Space-Holder\',\r\n        template:\r\n            \'<div :style="\' +\r\n            \'   {\' +\r\n            \'       width,\' +\r\n            \'       height\' +\r\n            \'   }">\' +\r\n            \'</div>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                width: "",\r\n                height: ""\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n    \r\n    Module.appendStyle(`src/elements/css/AdvancedSpaceHolder.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Button.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Button\',\r\n        template:\r\n            \'<v-btn\' +\r\n            \'   :absolute="absolute"\' +\r\n            \'   :active-class="activeClass"\' +\r\n            \'   :class="classes"\' +\r\n            \'   :append="append"\' +\r\n            \'   :block="block"\' +\r\n            \'   :bottom="bottom"\' +\r\n            \'   :color="color"\' +\r\n            \'   :dark="dark"\' +\r\n            \'   :depressed="depressed"\' +\r\n            \'   :disabled="disabled"\' +\r\n            \'   :elevation="elevation"\' +\r\n            \'   :exact="exact"\' +\r\n            \'   :exact-active-class="exactActiveClass"\' +\r\n            \'   :fab="fab"\' +\r\n            \'   :fixed="fixed"\' +\r\n            \'   :height="height"\' +\r\n            \'   :href="href"\' +\r\n            \'   :icon="icon"\' +\r\n            \'   :input-value="inputValue"\' +\r\n            \'   :large="large"\' +\r\n            \'   :left="left"\' +\r\n            \'   :light="light"\' +\r\n            \'   :link="link"\' +\r\n            \'   :loading="loading"\' +\r\n            \'   :max-height="maxHeight"\' +\r\n            \'   :max-width="maxWidth"\' +\r\n            \'   :min-height="minHeight"\' +\r\n            \'   :min-width="minWidth"\' +\r\n            \'   :nuxt="nuxt"\' +\r\n            \'   :outlined="outlined"\' +\r\n            \'   :replace="replace"\' +\r\n            \'   :retain-focus-on-click="retainFocusOnClick"\' +\r\n            \'   :right="right"\' +\r\n            \'   :ripple="ripple"\' +\r\n            \'   :rounded="rounded"\' +\r\n            \'   :shaped="shaped"\' +\r\n            \'   :small="small"\' +\r\n            \'   :tag="tag"\' +\r\n            \'   :target="target"\' +\r\n            \'   :text="text"\' +\r\n            \'   :tile="tile"\' +\r\n            \'   :top="top"\' +\r\n            \'   :type="type"\' +\r\n            \'   :value="value"\' +\r\n            \'   :width="width"\' +\r\n            \'   :x-large="xLarge"\' +\r\n            \'   :x-small="xSmall"\' +\r\n            \'   @click="click">\' +\r\n            \'       <v-icon left v-if="appendIcon">{{ appendIcon }}</v-icon>\' +\r\n            \'       <v-icon v-if="centerIcon">{{ centerIcon }}</v-icon>\' +\r\n            \'       <div v-else>{{ title }}</div>\' +\r\n            \'       <v-icon right v-if="prependIcon">{{ prependIcon }}</v-icon>\' +\r\n            \'</v-btn>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                appendIcon: false,\r\n                centerIcon: false,\r\n                prependIcon: false,\r\n                absolute: false,\r\n                activeClass: \'\',\r\n                append: false,\r\n                block: false,\r\n                bottom: false,\r\n                color: undefined,\r\n                dark: false,\r\n                depressed: false,\r\n                disabled: false,\r\n                elevation: undefined,\r\n                exact: false,\r\n                exactActiveClass: undefined,\r\n                fab: false,\r\n                fixed: false,\r\n                height: undefined,\r\n                href: undefined,\r\n                icon: false,\r\n                inputValue: undefined,\r\n                large: false,\r\n                left: false,\r\n                light: false,\r\n                link: false,\r\n                loading: false,\r\n                maxHeight: undefined,\r\n                maxWidth: undefined,\r\n                minHeight: undefined,\r\n                minWidth: undefined,\r\n                nuxt: false,\r\n                outlined: false,\r\n                replace: false,\r\n                retainFocusOnClick: false,\r\n                right: false,\r\n                ripple: undefined,\r\n                rounded: false,\r\n                shaped: false,\r\n                small: false,\r\n                tag: "button",\r\n                target: undefined,\r\n                text: false,\r\n                tile: false,\r\n                to: undefined,\r\n                top: false,\r\n                type: "button",\r\n                value: undefined,\r\n                width: undefined,\r\n                xLarge: false,\r\n                xSmall: false,\r\n                classes: []\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n        methods: {\r\n            click: function () {\r\n                if (!this.to) {\r\n                    return;\r\n                }\r\n                this.$router.push(this.to);\r\n            }\r\n        }\r\n    };\r\n    Module.appendStyle(`src/elements/css/Button.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Colorpicker.js', 'Module => {\r\n    const component = {\r\n        name: \'Color-Picker\',\r\n        template:\r\n            \'<v-color-picker\' +\r\n            \'      :style="style" \' +\r\n            \'      :class="classes" \' +\r\n            \'      dot-size="30" \' +\r\n            \'      v-model="value"\' +\r\n            \'      :canvas-height="canvasHeight"\' +\r\n            \'      :hide-canvas="hideCanvas"\' +\r\n            \'      :hide-inputs="hideInputs"\' +\r\n            \'      :hide-mode-switch="hideModeSwitch"\' +\r\n            \'      :mode="mode"\' +\r\n            \'      :show-swatches="showSwatches"\' +\r\n            \'      :swatches="swatches"\' +\r\n            \'      :swatches-max-height="swatchesMaxHeight"\' +\r\n            \'      :width="canvasHeight"\' +\r\n            \'  />\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        data() {\r\n            return {\r\n                value: {},\r\n                canvasHeight: "",\r\n                hideCanvas: false,\r\n                hideModeSwitch: false,\r\n                hideInputs: false,\r\n                mode: \'hexa\',\r\n                showSwatches: false,\r\n                swatches: undefined,\r\n                swatchesMaxHeight: 150,\r\n                width: 300,\r\n                info: {},\r\n                style: {},\r\n                classes: [],\r\n            };\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler: function (value) {\r\n                    this.$route.params[this.element] = value;\r\n                    this.$trigger(\'input_change\', this.element);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            this.info = this.region.regionRaw.info;\r\n\r\n            this.$route.params[this.element] = this.value;\r\n        },\r\n    };\r\n    Module.appendStyle(`src/elements/css/Colorpicker.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/css/Button.css', 'div.v-text-field {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot {\r\n  background-color: var(--background) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot input,\r\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\ndiv.v-text-field > .v-input__control div.v-messages {\r\n  color: var(--font) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\r\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n  color: var(--accent) !important;\r\n  border-color: var(--accent) !important;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Colorpicker.css', 'div.v-text-field > .v-input__control > .v-input__slot {\r\n    background-color: var(--background) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot input,\r\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\ndiv.v-text-field > .v-input__control div.v-messages {\r\n    color: var(--font) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\r\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n    color: var(--accent) !important;\r\n    border-color: var(--accent) !important;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Image.css', '.tile-image-editor #tile-image {\r\n    display: block;\r\n    max-width: 100%;\r\n}\r\n.tile-image-editor .image-editor-item {\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Paragraph.css', 'div.v-text-field {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot {\r\n  background-color: var(--background) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot input,\r\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\ndiv.v-text-field > .v-input__control div.v-messages {\r\n  color: var(--font) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\r\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n  color: var(--accent) !important;\r\n  border-color: var(--accent) !important;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Sound.css', '.cursor {\r\n    background-color: black;\r\n}\r\n\r\n.selection.segment {\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.selection.point {\r\n    background-color: red;\r\n}\r\n\r\n> h2 {\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    border-bottom: 1px solid;\r\n    font-weight: initial;\r\n    padding-bottom: 5px;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Switch.css', 'div.v-input--switch {\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\ndiv.v-input--switch > .v-input__control > .v-input__slot {\r\n    background-color: var(--background) !important;\r\n}\r\n\r\ndiv.v-input--switch > .v-input__control > .v-input__slot label.v-label,\r\ndiv.v-input--switch > .v-input__control div.v-messages {\r\n    color: var(--font) !important;\r\n}\r\n\r\ndiv.v-input--switch > .v-input__control > .v-input__slot button.v-icon,\r\ndiv.v-input--switch > .v-input__control > .v-input__slot .primary--text {\r\n    color: var(--accent) !important;\r\n    border-color: var(--accent) !important;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Textarea.css', 'div.v-textarea {\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n}\r\ndiv.v-textarea > .v-input__control > .v-input__slot {\r\n    background-color: var(--background) !important;\r\n}\r\ndiv.v-textarea > .v-input__control > .v-input__slot textarea, div.v-textarea > .v-input__control > .v-input__slot label, div.v-textarea > .v-input__control > .v-input__slot div.v-messages {\r\n    color: var(--font) !important;\r\n}\r\ndiv.v-textarea > .v-input__control > .v-input__slot button.v-icon, div.v-textarea > .v-input__control > .v-input__slot > fieldset {\r\n    color: var(--accent) !important;\r\n    border-color: var(--accent) !important;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Textfield.css', 'div.v-text-field {\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot {\r\n    background-color: var(--background) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot input,\r\ndiv.v-text-field > .v-input__control > .v-input__slot label.v-label,\r\ndiv.v-text-field > .v-input__control div.v-messages {\r\n    color: var(--font) !important;\r\n}\r\n\r\ndiv.v-text-field > .v-input__control > .v-input__slot button.v-icon,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:before,\r\ndiv.v-text-field > .v-input__control > .v-input__slot:after,\r\ndiv.v-text-field > .v-input__control > .v-input__slot > fieldset {\r\n    color: var(--accent) !important;\r\n    border-color: var(--accent) !important;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/css/Tile.css', '.tile {\r\n    overflow: hidden;\r\n    margin-top: 20px;\r\n}\r\n\r\n/*\r\n Default tile.\r\n*/\r\n\r\n.tile.default {\r\n    display: grid;\r\n    grid-template-areas:\r\n            \'text text\'\r\n            \'text text\';\r\n    grid-template-columns: 50% 50%;\r\n    grid-template-rows: 50% 50%;\r\n}\r\n\r\n.tile.default > .v-card__text {\r\n    grid-area: text;\r\n}\r\n\r\n.tile.default > .v-image {\r\n    display: none;\r\n}\r\n\r\n/*\r\n Image tile.\r\n*/\r\n\r\n.tile.image {\r\n    background-color: transparent !important;\r\n    box-shadow: none !important;\r\n\r\n    display: grid;\r\n    grid-template-areas:\r\n            \'image image\'\r\n            \'image image\';\r\n    grid-template-columns: 50% 50%;\r\n    grid-template-rows: 50% 50%;\r\n}\r\n\r\n.tile.image > .v-card__text {\r\n    display: none;\r\n}\r\n\r\n.tile.image > .v-image {\r\n    grid-area: image;\r\n}\r\n\r\n\r\n/*\r\n Image tile.\r\n*/\r\n\r\n.tile.horizontal-50-50 {\r\n    display: grid;\r\n    grid-template-areas:\r\n            \'text text\'\r\n            \'image image\';\r\n    grid-template-columns: 50% 50%;\r\n    grid-template-rows: 50% 50%;\r\n}\r\n\r\n.tile.horizontal-50-50 > .v-card__text {\r\n    grid-area: text;\r\n}\r\n\r\n.tile.horizontal-50-50 > .v-image {\r\n    grid-area: image;\r\n}\r\n\r\n\r\n/*\r\n Image tile.\r\n*/\r\n\r\n.tile.vertical-50-50 {\r\n    display: grid;\r\n    grid-template-areas:\r\n            \'text image\'\r\n            \'text image\';\r\n    grid-template-columns: 50% 50%;\r\n    grid-template-rows: 50% 50%;\r\n}\r\n\r\n.tile.vertical-50-50 > .v-card__text {\r\n    grid-area: text;\r\n}\r\n\r\n.tile.vertical-50-50 > .v-image {\r\n    grid-area: image;\r\n}');
        await this.fileSystem.write('/modules/core/src/elements/custom/Board.js', 'Module => {\r\n    const component = {\r\n        name: \'Tile\',\r\n        template:\r\n            \'<v-card \' +\r\n            \'       v-ripple\' +\r\n            \'       v-touch:tap="click"\' +\r\n            \'       v-touch:longtap="edit"\' +\r\n            \'       :width="width"\' +\r\n            \'       :height="height"\' +\r\n            \'       :color="backgroundColor"\' +\r\n            \'       class="tile"\' +\r\n            \'       :class="classes">\' +\r\n            \'   <v-card-text :style="{ color: textColor }">{{ title }}</v-card-text>\' +\r\n            \'   <v-img v-if="src !== undefined" :src="src" width="150px" height="150px" :color="backgroundColor">\' +\r\n            \'   </v-img>\' +\r\n            \'</v-card>\',\r\n        data() {\r\n            return {\r\n                title: \'\',\r\n                backgroundColor: \'\',\r\n                textColor: \'#000000\',\r\n                changed: 0,\r\n                src: undefined,\r\n                audio: [],\r\n                classes: [\'default\'],\r\n                images: [],\r\n                sounds: [],\r\n                update: [],\r\n                height: \'150px\',\r\n                width: \'150px\',\r\n                path: "",\r\n                to: {}\r\n            };\r\n        },\r\n        watch: {\r\n            images: {\r\n                handler: function (value) {\r\n                    if (value.constructor.name === "String") {\r\n                        this.src = value;\r\n                        return;\r\n                    }\r\n\r\n                    if (!value || value.length === 0 || !value[0]) {\r\n                        this.src = \'\';\r\n                        return;\r\n                    }\r\n\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = () => {\r\n                        this.src = fileReader.result;\r\n                    };\r\n                    fileReader.readAsDataURL(value[0]);\r\n                },\r\n                deep: true\r\n            },\r\n        },\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        events: {\r\n            input_change: function (event, value) {\r\n                const params = this.$route.params;\r\n\r\n                if (!(value in params)) {\r\n                    return;\r\n                }\r\n\r\n                const update_length = Object.keys(this.update).length;\r\n                let found = undefined;\r\n                for (let i = 0; i < update_length; i++) {\r\n                    const update = this.update[i];\r\n\r\n                    if (update.value === value) {\r\n                        found = update;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (found === undefined) {\r\n                    return;\r\n                }\r\n\r\n                this[found.key] = params[value];\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                let value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                if (value.constructor.name === \'String\' && value.includes(\'~\')) {\r\n                    this.update.push({\r\n                        key: key.replace(\'#\', \'\'),\r\n                        value: value.replace(\'~\', \'\')\r\n                    });\r\n\r\n                    //continue;\r\n                    if (key.replace(\'#\', \'\') in this && value.replace(\'~\', \'\') in this.$route.params) {\r\n                        value = this.$route.params[value.replace(\'~\', \'\')];\r\n                    }\r\n                    else {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n        methods: {\r\n            click: function () {\r\n                this.$router.push({\r\n                    name: \'core.board\',\r\n                    params: {\r\n                        pathMatch: this.path,\r\n                    }\r\n                })\r\n            },\r\n            edit: function () {\r\n                this.$router.push(this.to);\r\n            }\r\n        },\r\n        destroyed: function () {\r\n            if (this.audio.constructor.name !== \'HTMLAudioElement\') {\r\n                return;\r\n            }\r\n\r\n            this.audio.pause();\r\n        }\r\n    };\r\n\r\n    Module.appendStyle(`src/elements/css/Tile.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/custom/Tile.js', 'Module => {\r\n    const component = {\r\n        name: \'Tile\',\r\n        template:\r\n            \'<v-card \' +\r\n            \'       v-ripple\' +\r\n            \'       v-touch:tap="click"\' +\r\n            \'       v-touch:longtap="edit"\' +\r\n            \'       :width="width" \' +\r\n            \'       :height="height" \' +\r\n            \'       :color="backgroundColor" \' +\r\n            \'       class="tile" \' +\r\n            \'       :class="classes">\' +\r\n            \'   <v-card-text :style="{ color: textColor }">{{ title }}</v-card-text>\' +\r\n            \'   <v-img v-if="src !== undefined" :src="src" width="150px" height="150px" :color="backgroundColor">\' +\r\n            \'   </v-img>\' +\r\n            \'</v-card>\',\r\n        data() {\r\n            return {\r\n                title: \'\',\r\n                backgroundColor: \'\',\r\n                textColor: \'#000000\',\r\n                changed: 0,\r\n                src: undefined,\r\n                audio: undefined,\r\n                classes: [\'default\'],\r\n                images: [],\r\n                sounds: [],\r\n                update: [],\r\n                height: \'150px\',\r\n                width: \'150px\',\r\n                path: "",\r\n                to: {}\r\n            };\r\n        },\r\n        watch: {\r\n            images: {\r\n                handler: function (value) {\r\n                    if (value.constructor.name === "String") {\r\n                        this.src = value;\r\n                        return;\r\n                    }\r\n\r\n                    if (!value || value.length === 0 || !value[0]) {\r\n                        this.src = \'\';\r\n                        return;\r\n                    }\r\n\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = () => {\r\n                        this.src = fileReader.result;\r\n                    };\r\n                    fileReader.readAsDataURL(value[0]);\r\n                },\r\n                deep: true\r\n            },\r\n            sounds: {\r\n                handler: function (value) {\r\n                    if (value.constructor.name === "String") {\r\n                        this.audio = new Audio(value);\r\n                        return;\r\n                    }\r\n\r\n                    if (value.length === 0) {\r\n                        this.audio = undefined;\r\n                        return;\r\n                    }\r\n\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = () => {\r\n                        this.audio = new Audio(fileReader.result);\r\n                    };\r\n                    fileReader.readAsDataURL(value[0]);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        events: {\r\n            input_change: function (event, value) {\r\n                const params = this.$route.params;\r\n\r\n                if (!(value in params)) {\r\n                    return;\r\n                }\r\n\r\n                const update_length = Object.keys(this.update).length;\r\n                let found = undefined;\r\n                for (let i = 0; i < update_length; i++) {\r\n                    const update = this.update[i];\r\n\r\n                    if (update.value === value) {\r\n                        found = update;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (found === undefined) {\r\n                    return;\r\n                }\r\n\r\n                this[found.key] = params[value];\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                let value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                if (value.constructor.name === \'String\' && value.includes(\'~\')) {\r\n                    this.update.push({\r\n                        key: key.replace(\'#\', \'\'),\r\n                        value: value.replace(\'~\', \'\')\r\n                    });\r\n\r\n                    //continue;\r\n                    if (key.replace(\'#\', \'\') in this && value.replace(\'~\', \'\') in this.$route.params) {\r\n                        value = this.$route.params[value.replace(\'~\', \'\')];\r\n                    }\r\n                    else {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n        methods: {\r\n            click: function () {\r\n                if (\r\n                    !this.audio ||\r\n                    this.audio.constructor.name !== \'HTMLAudioElement\'\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                this.audio.pause();\r\n                this.audio.currentTime = 0;\r\n                this.audio.play();\r\n            },\r\n            edit: function () {\r\n                this.$router.push(this.to);\r\n            }\r\n        },\r\n        destroyed: function () {\r\n            if (\r\n                !this.audio ||\r\n                this.audio.constructor.name !== \'HTMLAudioElement\'\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            this.audio.pause();\r\n        }\r\n    };\r\n\r\n    Module.appendStyle(`src/elements/css/Tile.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/custom/tile/AddTileButton.js', 'Module => {\r\n    const data = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    /** TODO: convert this into a container. */\r\n    const component = {\r\n        name: \'SpeedDial\',\r\n        components,\r\n        template:\r\n            \'<v-speed-dial\' +\r\n            \'      v-model="fab"\' +\r\n            \'      fixed\' +\r\n            \'      bottom\' +\r\n            \'      right\' +\r\n            \'      direction="top"\' +\r\n            \'    >\' +\r\n            \'      <template v-slot:activator>\' +\r\n            \'        <v-btn\' +\r\n            \'          color="blue darken-2"\' +\r\n            \'          outlined\' +\r\n            \'          dark\' +\r\n            \'          fab\' +\r\n            \'        >\' +\r\n            \'          <v-icon v-if="fab">\' +\r\n            \'            close\' +\r\n            \'          </v-icon>\' +\r\n            \'          <v-icon v-else>\' +\r\n            \'            more_vert\' +\r\n            \'          </v-icon>\' +\r\n            \'        </v-btn>\' +\r\n            \'      </template>\' +\r\n            \'      <component v-for="(renderElement, element) in content"\' +\r\n            \'              :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'              :renderElement="renderElement"\' +\r\n            \'              :element="element"\' +\r\n            \'              :key="`${element}.${changed}`"\' +\r\n            \'              :region="region"/>\' +\r\n            \'</v-speed-dial>\',\r\n        data() {\r\n            return {\r\n                title: \'\',\r\n                backgroundColor: \'\',\r\n                content: [],\r\n                textColor: \'#000000\',\r\n                changed: 0,\r\n                src: undefined,\r\n                audio: [],\r\n                to: {},\r\n                classes: [\'default\'],\r\n                images: [],\r\n                update: [],\r\n                fab: false,\r\n            };\r\n        },\r\n        watch: {\r\n            images: {\r\n                handler: function (value) {\r\n                    if (value.length === 0) {\r\n                        this.src = \'\';\r\n                        return;\r\n                    }\r\n                    const fileReader = new FileReader()\r\n                    fileReader.onload = () => {\r\n                        this.src = fileReader.result;\r\n                    }\r\n                    fileReader.readAsDataURL(value[0]);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                let value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n        methods: {\r\n            addtile: function () {\r\n                let path;\r\n\r\n                if (\'path\' in this.$route.params) {\r\n                    path = this.$route.params[\'path\'] || \'/soundboard\';\r\n                }\r\n\r\n\r\n                if (\'path\' in this.$route.params) {\r\n                    path = this.$route.params[\'path\'] || \'/soundboard\';\r\n                }\r\n\r\n                this.$router.push({\r\n                    name: "tile.templates",\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/custom/tile/TileTemplate.js', 'Module => {\r\n    const component = {\r\n        name: \'TileTemplate\',\r\n        template:\r\n            \'<v-card \' +\r\n            \'       v-ripple\' +\r\n            \'       v-touch:tap="click"\' +\r\n            \'       :width="width" \' +\r\n            \'       :height="height" \' +\r\n            \'       :color="backgroundColor" \' +\r\n            \'       class="tile" \' +\r\n            \'       :class="classes"\' +\r\n            \'       :style="style">\' +\r\n            \'   <v-card-text :style="{ color: textColor }">{{ title }}</v-card-text>\' +\r\n            \'   <v-img v-if="src !== undefined" :src="src" width="150px" height="150px" :color="backgroundColor">\' +\r\n            \'   </v-img>\' +\r\n            \'</v-card>\',\r\n        data() {\r\n            return {\r\n                title: \'\',\r\n                backgroundColor: \'\',\r\n                textColor: \'#000000\',\r\n                changed: 0,\r\n                src: undefined,\r\n                audio: [],\r\n                classes: [\'default\'],\r\n                style: {},\r\n                height: \'150px\',\r\n                width: \'150px\',\r\n                images: [],\r\n                update: [],\r\n                to: [],\r\n            };\r\n        },\r\n        watch: {\r\n            images: {\r\n                handler: function (value) {\r\n                    if (value.length === 0) {\r\n                        this.src = \'\';\r\n                        return;\r\n                    }\r\n                    const fileReader = new FileReader()\r\n                    fileReader.onload = () => {\r\n                        this.src = fileReader.result;\r\n                    }\r\n                    fileReader.readAsDataURL(value[0]);\r\n                },\r\n                deep: true\r\n            },\r\n        },\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        events: {\r\n            input_change: function (event, value) {\r\n                const params = this.$route.params;\r\n\r\n                if (!(value in params)) {\r\n                    return;\r\n                }\r\n\r\n                const update_length = Object.keys(this.update).length;\r\n                let found = undefined;\r\n                for (let i = 0; i < update_length; i++) {\r\n                    const update = this.update[i];\r\n\r\n                    if (update.value === value) {\r\n                        found = update;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (found === undefined) {\r\n                    return;\r\n                }\r\n\r\n                this[found.key] = params[value];\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                let value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n        updated: async function () {\r\n            const containers = document.querySelector(\'.one-column\');\r\n            const computedWidth = containers.offsetWidth;\r\n\r\n            // todo: Look into this.\r\n            this.size = `${(window.innerWidth - 50)/ 4}px`\r\n            this.style.margin = \'2px\';\r\n\r\n            /*const sortable = new Draggable.Swappable(containers, {\r\n                draggable: \'.tile\',\r\n                mirror: {\r\n                    appendTo: \'.one-column\',\r\n                    constrainDimensions: true,\r\n                },\r\n                plugins: [Draggable.Plugins.SwapAnimation],\r\n                sortAnimation: {\r\n                    duration: 200,\r\n                },\r\n            });*/\r\n        },\r\n        methods: {\r\n            click: function () {\r\n                this.$router.push(this.to)\r\n            }\r\n        },\r\n    };\r\n\r\n    Module.appendStyle(`src/elements/css/Tile.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Dropdown.js', 'Module => {\r\n    const component = {\r\n        name: \'Dropdown\',\r\n        template:\r\n            \'<v-select\' +\r\n            \'   v-model="value"\' +\r\n            \'   :label="title"\' +\r\n            \'   :hint="description"\' +\r\n            \'   :append-icon="appendIcon"\' +\r\n            \'   :append-outer-icon="appendOuterIcon"\' +\r\n            \'   :attach="attach"\' +\r\n            \'   :autofocus="autofocus"\' +\r\n            \'   :background-color="backgroundColor"\' +\r\n            \'   :cache-items="cacheItems"\' +\r\n            \'   :chips="chips"\' +\r\n            \'   :clear-icon="clearIcon"\' +\r\n            \'   :clearable="clearable"\' +\r\n            \'   :color="color"\' +\r\n            \'   :counter="counter"\' +\r\n            \'   :counter-value="counterValue"\' +\r\n            \'   :dark="dark"\' +\r\n            \'   :deletable-chips="deletableChips"\' +\r\n            \'   :dense="dense"\' +\r\n            \'   :disable-lookup="disableLookup"\' +\r\n            \'   :disabled="disabled"\' +\r\n            \'   :eager="eager"\' +\r\n            \'   :error="error"\' +\r\n            \'   :error-count="errorCount"\' +\r\n            \'   :error-messages="errorMessages"\' +\r\n            \'   :filled="filled"\' +\r\n            \'   :flat="flat"\' +\r\n            \'   :full-width="fullWidth"\' +\r\n            \'   :height="height"\' +\r\n            \'   :hide-details="hideDetails"\' +\r\n            \'   :hide-selected="hideSelected"\' +\r\n            \'   :id="id"\' +\r\n            \'   :item-color="itemColor"\' +\r\n            \'   :item-disabled="itemDisabled"\' +\r\n            \'   :item-text="itemText"\' +\r\n            \'   :item-value="itemValue"\' +\r\n            \'   :items="items"\' +\r\n            \'   :light="light"\' +\r\n            \'   :loader-height="loaderHeight"\' +\r\n            \'   :loading="loading"\' +\r\n            \'   :menu-props="menuProps"\' +\r\n            \'   :messages="messages"\' +\r\n            \'   :multiple="multiple"\' +\r\n            \'   :no-data-text="noDataText"\' +\r\n            \'   :open-on-clear="openOnClear"\' +\r\n            \'   :outlined="outlined"\' +\r\n            \'   :persistent-hint="persistentHint"\' +\r\n            \'   :placeholder="placeholder"\' +\r\n            \'   :prefix="prefix"\' +\r\n            \'   :prepend-icon="prependIcon"\' +\r\n            \'   :prepend-inner-icon="prependInnerIcon"\' +\r\n            \'   :readonly="readonly"\' +\r\n            \'   :return-object="returnObject"\' +\r\n            \'   :reverse="reverse"\' +\r\n            \'   :rounded="rounded"\' +\r\n            \'   :rules="rules"\' +\r\n            \'   :shaped="shaped"\' +\r\n            \'   :single-line="singleLine"\' +\r\n            \'   :small-chips="smallChips"\' +\r\n            \'   :solo="solo"\' +\r\n            \'   :solo-inverted="soloInverted"\' +\r\n            \'   :success="success"\' +\r\n            \'   :success-messages="successMessages"\' +\r\n            \'   :suffix="suffix"\' +\r\n            \'   :type="type"\' +\r\n            \'   :validate-on-blur="validateOnBlur"\' +\r\n            \'></v-select>\',\r\n        data() {\r\n            return {\r\n                value: "",\r\n                title: "",\r\n                description: "",\r\n                appendIcon: \'$dropdown\',\r\n                appendOuterIcon: undefined,\r\n                attach: false,\r\n                autofocus: false,\r\n                backgroundColor: undefined,\r\n                cacheItems: false,\r\n                chips: false,\r\n                clearIcon: \'$clear\',\r\n                clearable: false,\r\n                color: undefined,\r\n                counter: undefined,\r\n                counterValue: null,\r\n                dark: false,\r\n                deletableChips: false,\r\n                dense: false,\r\n                disableLookup: false,\r\n                disabled: false,\r\n                eager: false,\r\n                error: false,\r\n                errorCount: 1,\r\n                errorMessages: [],\r\n                filled: false,\r\n                flat: false,\r\n                fullWidth: false,\r\n                height: undefined,\r\n                hideDetails: undefined,\r\n                hideSelected: false,\r\n                hint: undefined,\r\n                id: undefined,\r\n                itemColor: \'primary\',\r\n                itemDisabled: "disabled",\r\n                itemText: "text",\r\n                itemValue: "value",\r\n                items: [],\r\n                label: undefined,\r\n                light: false,\r\n                loaderHeight: "2",\r\n                loading: false,\r\n                menuProps: {\r\n                    \'closeOnClick\': false,\r\n                    \'closeOnContentClick\': false,\r\n                    \'disableKeys\': true,\r\n                    \'openOnClick\': false,\r\n                    \'maxHeight\': 304\r\n                },\r\n                messages: [],\r\n                multiple: false,\r\n                noDataText: \'$vuetify.noDataText\',\r\n                openOnClear: false,\r\n                outlined: false,\r\n                persistentHint: true,\r\n                placeholder: undefined,\r\n                prefix: undefined,\r\n                prependIcon: undefined,\r\n                prependInnerIcon: undefined,\r\n                readonly: false,\r\n                returnObject: false,\r\n                reverse: false,\r\n                rounded: false,\r\n                rules: [],\r\n                shaped: false,\r\n                singleLine: false,\r\n                smallChips: false,\r\n                solo: false,\r\n                soloInverted: false,\r\n                success: false,\r\n                successMessages: [],\r\n                suffix: undefined,\r\n                type: \'text\',\r\n                validateOnBlur: false,\r\n            };\r\n        },\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler: function (value) {\r\n                    this.$route.params[this.element] = value;\r\n                    this.$trigger(\'input_change\', this.element);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            const info = this.region.regionRaw.info;\r\n\r\n            this.$route.params[this.element] = this.value;\r\n        },\r\n    };\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Headline.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Headline\',\r\n        template:\r\n            \'<v-card flat color="transparent">\' +\r\n            \'    <v-card-title v-if="title" v-html="title"/>\' +\r\n            \'    <v-card-subtitle v-if="description" v-html="description"/>\' +\r\n            \'</v-card>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                description: "",\r\n                size: 1,\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Image.js', 'Module => {\r\n    const component = {\r\n        name: \'S-ImageEditor\',\r\n        template:\r\n            \'<div class="tile-image-editor mb-5 px-2">\' +\r\n            \'    <div>\' +\r\n            \'      <img id="tile-image" :src="image" @load="loaded" />\' +\r\n            \'    </div>\' +\r\n            \'    <v-btn class="image-editor-item" outlined :loading="loading" block tile color="success" @click="apply">Apply</v-btn>\' +\r\n            \'  </div>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                description: "",\r\n                value: [],\r\n                cropper: null,\r\n                image: null,\r\n                files: [],\r\n                to: undefined,\r\n                loading: false,\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            // Exit if empty.\r\n            if (!this.files.length) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                this.image = URL.createObjectURL(this.files[0]);\r\n            } catch (error) {\r\n                console.log(error);\r\n                console.warn("Object url could not be read.");\r\n            }\r\n        },\r\n        methods: {\r\n            submit: function () {\r\n                if (!(\'params\' in this.to)) {\r\n                    this.to.params = {};\r\n                }\r\n\r\n                this.to.params = Object.assign(\r\n                    this.to.params,\r\n                    this.$route.params\r\n                );\r\n                this.loading = false;\r\n                this.$router.push(this.to);\r\n            },\r\n            apply: function () {\r\n                if (!this.cropper) {\r\n                    return;\r\n                }\r\n                this.loading = true;\r\n\r\n                this.cropper.getCroppedCanvas({\r\n                    maxWidth: 4096,\r\n                    maxHeight: 4096,\r\n                    fillColor: "#fff",\r\n                    imageSmoothingEnabled: false,\r\n                    imageSmoothingQuality: "high"\r\n                });\r\n\r\n                this.cropper.getCroppedCanvas().toBlob(blob => {\r\n\r\n                    blob.name = `edited_image_${Date.now()}.png`;\r\n                    blob.lastModifiedDate = new Date();\r\n\r\n                    this.value = blob;\r\n\r\n                    this.$route.params[this.element] = [\r\n                        this.value\r\n                    ];\r\n                    this.submit();\r\n                }, \'image/png\', 100);\r\n            },\r\n            loaded: function () {\r\n                this.cropper = new Cropper(document.querySelector("#tile-image"), {\r\n                    aspectRatio: 1,\r\n                    viewMode: 1,\r\n                    autoCrop: true\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    Module.appendStyle(`src/elements/css/Image.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Information.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Information\',\r\n        template:\r\n            \'<div>\' +\r\n            \'   <v-dialog\' +\r\n            \'      v-model="dialog"\' +\r\n            \'      persistent\' +\r\n            \'      max-width="290"\' +\r\n            \'    >\' +\r\n            \'      <template v-slot:activator="{ on, attrs }">\' +\r\n            \'        <v-btn\' +\r\n            \'          tile\' +\r\n            \'          block\' +\r\n            \'          elevation="0"\' +\r\n            \'          color="transparent"\' +\r\n            \'          class=""\' +\r\n            \'          v-bind="attrs"\' +\r\n            \'          v-on="on"\' +\r\n            \'        >\' +\r\n            \'          <div class="mr-3">{{value}}</div>\' +\r\n            \'          <v-icon>info</v-icon>\' +\r\n            \'        </v-btn>\' +\r\n            \'      </template>\' +\r\n            \'      <v-card>\' +\r\n            \'        <v-card-title class="headline">\' +\r\n            \'          {{title}}\' +\r\n            \'        </v-card-title>\' +\r\n            \'        <v-card-text>{{description}}</v-card-text>\' +\r\n            \'        <v-card-actions>\' +\r\n            \'          <v-spacer></v-spacer>\' +\r\n            \'          <v-btn\' +\r\n            \'            color="green darken-1"\' +\r\n            \'            text\' +\r\n            \'            @click="dialog = false"\' +\r\n            \'          >\' +\r\n            \'            OK\' +\r\n            \'          </v-btn>\' +\r\n            \'        </v-card-actions>\' +\r\n            \'      </v-card>\' +\r\n            \'    </v-dialog>\' +\r\n            \'</div>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                description: "",\r\n                value: "",\r\n                dialog: false,\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n    \r\n    //Module.appendStyle(`src/elements/css/Paragraph.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Paragraph.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Paragraph\',\r\n        template:\r\n            \'  <v-card\' +\r\n            \'   :flat="flat" :class="classes">\' +\r\n            \'    <v-card-title v-html="title"/>\' +\r\n            \'    <v-card-subtitle v-html="description"/>\' +\r\n            \'    <v-card-text :style="{ color: textColor }" v-html="value"/>\' +\r\n            \'  </v-card>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                description: "",\r\n                value: "",\r\n                flat: false,\r\n                classes: [],\r\n                textColor: "",\r\n                update: [],\r\n            };\r\n        },\r\n        events: {\r\n            input_change: function (event, value) {\r\n                const params = this.$route.params;\r\n\r\n                if (!(value in params)) {\r\n                    return;\r\n                }\r\n\r\n                const update_length = Object.keys(this.update).length;\r\n                let found = undefined;\r\n                for (let i = 0; i < update_length; i++) {\r\n                    const update = this.update[i];\r\n\r\n                    if (update.value === value) {\r\n                        found = update;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (found === undefined) {\r\n                    return;\r\n                }\r\n\r\n                this[found.key] = params[value];\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                if (value.constructor.name === \'String\' && value.includes(\'~\')) {\r\n                    this.update.push({\r\n                        key: key.replace(\'#\', \'\'),\r\n                        value: value.replace(\'~\', \'\')\r\n                    });\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n    };\r\n    \r\n    Module.appendStyle(`src/elements/css/Paragraph.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/RedirectButton.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Redirect-Button\',\r\n        template:\r\n            \'<v-btn\' +\r\n            \'   v-if="show"\' +\r\n            \'   @click="submit"\' +\r\n            \'   :class="classes"\' +\r\n            \'   :absolute="absolute"\' +\r\n            \'   :active-class="activeClass"\' +\r\n            \'   :append="append"\' +\r\n            \'   :block="block"\' +\r\n            \'   :bottom="bottom"\' +\r\n            \'   :color="color"\' +\r\n            \'   :dark="dark"\' +\r\n            \'   :depressed="depressed"\' +\r\n            \'   :disabled="disabled"\' +\r\n            \'   :elevation="elevation"\' +\r\n            \'   :exact="exact"\' +\r\n            \'   :exact-active-class="exactActiveClass"\' +\r\n            \'   :fab="fab"\' +\r\n            \'   :fixed="fixed"\' +\r\n            \'   :height="height"\' +\r\n            \'   :href="href"\' +\r\n            \'   :icon="icon"\' +\r\n            \'   :input-value="inputValue"\' +\r\n            \'   :large="large"\' +\r\n            \'   :left="left"\' +\r\n            \'   :light="light"\' +\r\n            \'   :link="link"\' +\r\n            \'   :loading="loading"\' +\r\n            \'   :max-height="maxHeight"\' +\r\n            \'   :max-width="maxWidth"\' +\r\n            \'   :min-height="minHeight"\' +\r\n            \'   :min-width="minWidth"\' +\r\n            \'   :nuxt="nuxt"\' +\r\n            \'   :outlined="outlined"\' +\r\n            \'   :replace="replace"\' +\r\n            \'   :retain-focus-on-click="retainFocusOnClick"\' +\r\n            \'   :right="right"\' +\r\n            \'   :ripple="ripple"\' +\r\n            \'   :rounded="rounded"\' +\r\n            \'   :shaped="shaped"\' +\r\n            \'   :small="small"\' +\r\n            \'   :tag="tag"\' +\r\n            \'   :target="target"\' +\r\n            \'   :text="text"\' +\r\n            \'   :tile="tile"\' +\r\n            \'   :top="top"\' +\r\n            \'   :type="type"\' +\r\n            \'   :value="value"\' +\r\n            \'   :width="width"\' +\r\n            \'   :x-large="xLarge"\' +\r\n            \'   :x-small="xSmall">\' +\r\n            \'       <v-icon left v-if="appendIcon">{{ appendIcon }}</v-icon>\' +\r\n            \'       <v-icon v-if="centerIcon">{{ centerIcon }}</v-icon>\' +\r\n            \'       <div v-else>{{ title }}</div>\' +\r\n            \'       <v-icon right v-if="prependIcon">{{ prependIcon }}</v-icon>\' +\r\n            \'</v-btn>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        events: {\r\n            input_change: function (event, value) {\r\n                let params = this.$route.params;\r\n\r\n                if (!(value in params)) {\r\n                    return;\r\n                }\r\n\r\n                let update_length = Object.keys(this.update).length;\r\n                let found = undefined;\r\n                for (let i = 0; i < update_length; i++) {\r\n                    const update = this.update[i];\r\n\r\n                    if (update.value === value) {\r\n                        found = update;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (found === undefined) {\r\n                    return;\r\n                }\r\n\r\n                this[found.key] = params[value];\r\n            }\r\n        },\r\n        watch: {\r\n            vif: {\r\n                handler: function (value) {\r\n                    if (Array.isArray(value)) {\r\n                        this.show = value.length !== 0;\r\n                    }\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                vif: true,\r\n                show: true,\r\n                appendIcon: false,\r\n                prependIcon: false,\r\n                centerIcon: false,\r\n                absolute: false,\r\n                activeClass: \'\',\r\n                append: false,\r\n                block: false,\r\n                bottom: false,\r\n                color: undefined,\r\n                dark: false,\r\n                depressed: false,\r\n                disabled: false,\r\n                elevation: undefined,\r\n                exact: false,\r\n                exactActiveClass: undefined,\r\n                fab: false,\r\n                fixed: false,\r\n                height: undefined,\r\n                href: undefined,\r\n                icon: false,\r\n                inputValue: undefined,\r\n                large: false,\r\n                left: false,\r\n                light: false,\r\n                link: false,\r\n                loading: false,\r\n                maxHeight: undefined,\r\n                maxWidth: undefined,\r\n                minHeight: undefined,\r\n                minWidth: undefined,\r\n                nuxt: false,\r\n                outlined: false,\r\n                replace: false,\r\n                retainFocusOnClick: false,\r\n                right: false,\r\n                ripple: undefined,\r\n                rounded: false,\r\n                shaped: false,\r\n                small: false,\r\n                tag: "button",\r\n                target: undefined,\r\n                text: false,\r\n                tile: false,\r\n                to: undefined,\r\n                top: false,\r\n                type: "button",\r\n                value: undefined,\r\n                width: undefined,\r\n                xLarge: false,\r\n                xSmall: false,\r\n                update: [],\r\n                classes: []\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                let value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                if (value.constructor.name === \'String\' && value.includes(\'~\')) {\r\n                    this.update.push({\r\n                        key: key.replace(\'#\', \'\'),\r\n                        value: value.replace(\'~\', \'\')\r\n                    });\r\n\r\n                    if (key.replace(\'#\', \'\') in this && value.replace(\'~\', \'\') in this.$route.params) {\r\n                        value = this.$route.params[value.replace(\'~\', \'\')];\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n        },\r\n        methods: {\r\n            submit: function () {\r\n                if (!(\'params\' in this.to)) {\r\n                    this.to.params = {};\r\n                }\r\n\r\n                this.to.params = Object.assign(\r\n                    this.to.params,\r\n                    this.$route.params\r\n                );\r\n                this.$router.push(this.to);\r\n            }\r\n        }\r\n    };\r\n    Module.appendStyle(`src/elements/css/Button.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Sound.js', 'Module => {\r\n    const component = {\r\n        name: \'S-Sound\',\r\n        template:\r\n            \'<div>\' +\r\n            \'    <v-toolbar color="secondary">\' +\r\n            \'      <v-btn v-if="state === \\\'pause\\\'" icon @click="play">\' +\r\n            \'        <v-icon color="accent">play_arrow</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'      <v-btn v-if="state === \\\'play\\\'" icon @click="pause">\' +\r\n            \'        <v-icon color="accent">pause</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'      <v-btn icon @click="stop">\' +\r\n            \'        <v-icon color="accent">stop</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'\' +\r\n            \'      <v-spacer></v-spacer>\' +\r\n            \'\' +\r\n            \'      <v-btn v-if="cursor !== \\\'cursor\\\'" icon @click="statechange(\\\'cursor\\\')">\' +\r\n            \'        <v-icon color="accent">my_location</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'      <v-btn v-if="cursor !== \\\'shift\\\'" icon @click="statechange(\\\'shift\\\')">\' +\r\n            \'        <v-icon color="accent">open_with</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'\' +\r\n            \'      <v-btn v-if="cursor !== \\\'select\\\'" icon @click="statechange(\\\'select\\\')">\' +\r\n            \'        <v-icon color="accent">select_all</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'    </v-toolbar>\' +\r\n            \'\' +\r\n            \'   <div class="my-4">\' +\r\n            \'    <v-slider\' +\r\n            \'        v-if="Playlist"\' +\r\n            \'        class="my-10 audio-editor-item"\' +\r\n            \'        color="accent"\' +\r\n            \'        thumb-color="accent"\' +\r\n            \'        track-fill-color="accent"\' +\r\n            \'        append-icon="volume_up"\' +\r\n            \'        prepend-icon="volume_down"\' +\r\n            \'        v-model="MasterVolume"\' +\r\n            \'        :min="1"\' +\r\n            \'        :max="100"\' +\r\n            \'        label="Volume"\' +\r\n            \'        hint="Change the volume of the played tile."\' +\r\n            \'        persistent-hint\' +\r\n            \'    />\' +\r\n            \'   </div>\' +\r\n            \'\' +\r\n            \'    <div id="playlist" class="mt-4 mb-10"></div>\' +\r\n            \'\' +\r\n            \'   <div class="mt-3 mb-7">\' +\r\n            \'    <v-slider\' +\r\n            \'        v-if="Playlist && cursor === \\\'cursor\\\'"\' +\r\n            \'        class="audio-editor-item extra"\' +\r\n            \'        v-model="CursorPosition"\' +\r\n            \'        color="accent"\' +\r\n            \'        thumb-color="accent"\' +\r\n            \'        track-fill-color="accent"\' +\r\n            \'        :min="0"\' +\r\n            \'        :max="this.CursorPositionMax"\' +\r\n            \'        :step="0.1"\' +\r\n            \'        label="Cursor"\' +\r\n            \'        hint="Set the cursor at the position you want to start playing from."\' +\r\n            \'        thumb-label="always"\' +\r\n            \'        persistent-hint\' +\r\n            \'    />\' +\r\n            \'    <v-range-slider\' +\r\n            \'        v-if="Playlist && cursor === \\\'select\\\'"\' +\r\n            \'        class="audio-editor-item extra"\' +\r\n            \'        v-model="SelectionSegment"\' +\r\n            \'        color="accent"\' +\r\n            \'        thumb-color="accent"\' +\r\n            \'        track-fill-color="accent"\' +\r\n            \'        :min="0"\' +\r\n            \'        :max="this.SelectionSegmentMax"\' +\r\n            \'        :step="stepSize"\' +\r\n            \'        label="Select"\' +\r\n            \'        hint="Select the section you want to cut."\' +\r\n            \'        thumb-label="always"\' +\r\n            \'        persistent-hint\' +\r\n            \'    />\' +\r\n            \'   </div>\' +\r\n            \'\' +\r\n            \'    <v-btn v-if="Playlist && cursor === \\\'select\\\'" block depressed @click="trim" color="secondary">Trim</v-btn>\' +\r\n            \'\' +\r\n            \'    <v-toolbar v-if="cursor === \\\'shift\\\'" class="audio-editor-item mt-6" color="secondary">\' +\r\n            \'      <v-btn icon @click="alignLeft">\' +\r\n            \'        <v-icon color="accent">format_align_left</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'\' +\r\n            \'      <v-spacer></v-spacer>\' +\r\n            \'\' +\r\n            \'      <v-btn icon @click="moveLeft">\' +\r\n            \'        <v-icon color="accent">chevron_left</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'      <v-btn icon @click="moveRight">\' +\r\n            \'        <v-icon color="accent">chevron_right</v-icon>\' +\r\n            \'      </v-btn>\' +\r\n            \'    </v-toolbar>\' +\r\n            \'   <v-btn class="mb-3" block color="success" :loading="loading" outlined @click="save">\' +\r\n            \'       <v-icon left>save</v-icon>\' +\r\n            \'       Save\' +\r\n            \'   </v-btn>\' +\r\n            \'  </div>\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n        },\r\n        data() {\r\n            return {\r\n                title: "",\r\n                description: "",\r\n\r\n                window,\r\n\r\n                /** @type {Document} */\r\n                document,\r\n                state: "pause",\r\n                cursor: "cursor",\r\n                stepSize: 0.1,\r\n                trimmed: [0, 0],\r\n                MasterVolume: 50,\r\n                CursorPosition: 0,\r\n                CursorPositionMax: 0,\r\n                SelectionSegment: [0, 0],\r\n                Playlist: null,\r\n                EventEmitter: null,\r\n                files: [],\r\n                loading: false,\r\n                to: undefined,\r\n            };\r\n        },\r\n        watch: {\r\n            MasterVolume: function (val) {\r\n                if (val && this.Playlist) {\r\n                    this.EventEmitter.emit("mastervolumechange", val);\r\n                }\r\n            },\r\n            CursorPosition: function (val) {\r\n                if (val && this.Playlist) {\r\n                    this.EventEmitter.emit("setcursorposition", val);\r\n                }\r\n            },\r\n            SelectionSegment: function (val) {\r\n                if (val && this.Playlist) {\r\n                    this.EventEmitter.emit("select", val[0], val[1]);\r\n                }\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            // FIXME: This was created by me.\r\n            // ee.on(\'setcursorposition\', function (start) {\r\n            //     _this2.setTimeSelection(start, start);\r\n            //     _this2.drawRequest();\r\n            // });\r\n\r\n            this.Playlist = WaveformPlaylist.init({\r\n                samplesPerPixel: 3000,\r\n                mono: true,\r\n                waveHeight: 70,\r\n                container: document.getElementById("playlist"),\r\n                state: "cursor",\r\n                colors: {\r\n                    waveOutlineColor: \'#0000FF\',\r\n                    timeColor: \'#FF00FF\',\r\n                    fadeColor: \'#000000\'\r\n                },\r\n                seekStyle: "line",\r\n                zoomLevels: [\r\n                    500,\r\n                    1000,\r\n                    3000,\r\n                    5000\r\n                ]\r\n            });\r\n\r\n            await this.Playlist.load([]);\r\n\r\n            this.Playlist.initExporter();\r\n            this.EventEmitter = this.Playlist.getEventEmitter();\r\n            this.CursorPositionMax = this.Playlist.duration;\r\n            this.SelectionSegmentMax = this.Playlist.duration;\r\n\r\n            this.EventEmitter.on("finished", () => {\r\n                this.state = "pause";\r\n            });\r\n\r\n            this.EventEmitter.on("audiosourcesrendered", () => {\r\n                this.CursorPositionMax = this.Playlist.duration;\r\n                this.SelectionSegmentMax = this.Playlist.duration;\r\n            });\r\n\r\n            this.EventEmitter.on("finished", () => {\r\n                this.CursorPositionMax = this.Playlist.duration;\r\n                this.SelectionSegmentMax = this.Playlist.duration;\r\n            });\r\n\r\n            this.EventEmitter.on("shift", (time, track) => {\r\n                this.trimmed[0] += time;\r\n                this.trimmed[1] += time;\r\n\r\n                this.CursorPositionMax = this.Playlist.duration;\r\n                this.SelectionSegmentMax = this.Playlist.duration;\r\n            });\r\n\r\n            for (let i = 0; i < this.files.length; i++) {\r\n                const file = this.files[i];\r\n                this.EventEmitter.emit("newtrack", file);\r\n            }\r\n\r\n            this.EventEmitter.on("audiosourcesloaded", () => {});\r\n\r\n            this.EventEmitter.on("audiosourcesrendered", () => {\r\n\r\n                // We need to set the color manually for the audio viewer.\r\n                /** @type {NodeListOf<HTMLElement>} */\r\n                const canvases = this.document.querySelectorAll(\'.playlist .channel canvas\');\r\n\r\n                /*for (let i = 0; i < canvases.length; i++) {\r\n                    const canvas = canvases[i];\r\n                    canvas.style.backgroundColor = this.settings.theme().accent;\r\n                }*/\r\n            });\r\n\r\n            this.EventEmitter.on("audiorenderingfinished", (type, blob) => {\r\n\r\n                blob.name = `edited_sound${Date.now()}.${type}`;\r\n                blob.lastModifiedDate = new Date();\r\n\r\n                this.$route.params[this.element] = [blob];\r\n                this.submit();\r\n            });\r\n\r\n        },\r\n        methods: {\r\n            submit: function () {\r\n                if (!(\'params\' in this.to)) {\r\n                    this.to.params = {};\r\n                }\r\n\r\n                this.to.params = Object.assign(\r\n                    this.to.params,\r\n                    this.$route.params\r\n                );\r\n                this.$router.push(this.to)\r\n            },\r\n            play: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit("play");\r\n                this.state = "play";\r\n            },\r\n            pause: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit("pause");\r\n                this.state = "pause";\r\n            },\r\n            stop: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit("stop");\r\n                this.state = "pause";\r\n            },\r\n            save: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.loading = true;\r\n                this.EventEmitter.emit("startaudiorendering", "wav");\r\n            },\r\n            trim: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit("trim");\r\n                this.trimmed = this.SelectionSegment;\r\n            },\r\n            alignLeft: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit(\r\n                    "shift",\r\n                    this.trimmed[0] * -1,\r\n                    this.Playlist.activeTrack || this.Playlist.tracks[0]\r\n                );\r\n            },\r\n            moveLeft: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit(\r\n                    "shift",\r\n                    this.stepSize * -1,\r\n                    this.Playlist.activeTrack || this.Playlist.tracks[0]\r\n                );\r\n            },\r\n            moveRight: function () {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit(\r\n                    "shift",\r\n                    this.stepSize,\r\n                    this.Playlist.activeTrack || this.Playlist.tracks[0]\r\n                );\r\n            },\r\n            statechange: function (state) {\r\n                if (!this.Playlist) {\r\n                    return;\r\n                }\r\n                this.EventEmitter.emit("statechange", state);\r\n                this.cursor = state;\r\n                if (this.cursor === "select") {\r\n                    this.SelectionSegment = [0, this.CursorPosition];\r\n                }\r\n            },\r\n            leave: function () {\r\n                Module.emit("tile.editor");\r\n            }\r\n        }\r\n    };\r\n\r\n    Module.appendStyle(`src/elements/css/Sound.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Switch.js', 'Module => {\r\n  const component = {\r\n    name: \'S-Switch\',\r\n    template:\r\n        \'<v-switch\\n\' +\r\n        \'      v-model="value"\\n\' +\r\n        \'      :label="title"\\n\' +\r\n        \'      :hint="description"\\n\' +\r\n        \'      :persistent-hint="persistentHint"/>\',\r\n    props: {\r\n\r\n      /**\r\n       * @description Render element. Usually an array with key value pairs for options.\r\n       */\r\n      renderElement: Object,\r\n\r\n      /**\r\n       * @description Element key. The key provided to map submitted values.\r\n       */\r\n      element: String,\r\n\r\n      /**\r\n       * @description Form id to identify events.\r\n       */\r\n      region: Object,\r\n    },\r\n    watch: {\r\n      value: {\r\n        handler: function (value) {\r\n          this.$route.params[this.element] = value;\r\n        },\r\n        deep: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        value: false,\r\n        title: "",\r\n        description: "",\r\n        persistentHint: true,\r\n      };\r\n    },\r\n    mounted: async function () {\r\n\r\n      // Iterate trough all items and set them.\r\n      const keys = Object.keys(this.renderElement);\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n        const value = this.renderElement[key];\r\n        const dataKey = key.replace(\'#\', \'\');\r\n\r\n        // Check if data is mappable.\r\n        if (!this.hasOwnProperty(dataKey)) {\r\n          continue;\r\n        }\r\n\r\n        // Check if element is empty.\r\n        if (!value || value === false || value === undefined || value === null) {\r\n          continue;\r\n        }\r\n\r\n        // Set the new value.\r\n        this[key.replace(\'#\', \'\')] = value;\r\n      }\r\n\r\n      const info = this.region.regionRaw.info;\r\n\r\n      this.$route.params[this.element] = this.value;\r\n    },\r\n  };\r\n\r\n  Module.appendStyle(`src/elements/css/Switch.css`, component.name);\r\n  \r\n  return component;\r\n};\r\n');
        await this.fileSystem.write('/modules/core/src/elements/Textarea.js', 'Module => {\r\n    const component = {\r\n        name: \'Textarea\',\r\n        template:\r\n            \'<v-textarea\\n\' +\r\n            \'      v-model="value"\\n\' +\r\n            \'      :label="title"\\n\' +\r\n            \'      :hint="description"\\n\' +\r\n            \'      :placeholder="placeholder"\\n\' +\r\n            \'      :auto-grow="autoGrow"\\n\' +\r\n            \'      :clearable="clearable"\\n\' +\r\n            \'      :filled="filled"\\n\' +\r\n            \'      :flat="flat"\\n\' +\r\n            \'      :no-resize="noResize"\\n\' +\r\n            \'      :outlined="outlined"\\n\' +\r\n            \'      :persistent-hint="persistentHint"\\n\' +\r\n            \'      :rounded="rounded"\\n\' +\r\n            \'      :row-height="rowHeight"\\n\' +\r\n            \'      :rows="rows"\\n\' +\r\n            \'      :shaped="shaped"\\n\' +\r\n            \'      :single-line="singleLine"\\n\' +\r\n            \'      :solo="solo"\\n\' +\r\n            \'  />\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        data() {\r\n            return {\r\n                value: "",\r\n                title: "",\r\n                description: "",\r\n                placeholder: "",\r\n                autoGrow: false,\r\n                autofocus: true,\r\n                clearable: false,\r\n                filled: false,\r\n                flat: false,\r\n                noResize: false,\r\n                outlined: false,\r\n                persistentHint: true,\r\n                rounded: false,\r\n                rowHeight: 24,\r\n                rows: 1,\r\n                shaped: false,\r\n                singleLine: false,\r\n                solo: false,\r\n            };\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler: function (value) {\r\n                    this.$route.params[this.element] = value;\r\n                    this.$trigger(\'input_change\', this.element);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            const info = this.region.regionRaw.info;\r\n\r\n            this.$route.params[this.element] = this.value;\r\n        },\r\n    };\r\n\r\n    Module.appendStyle(`src/elements/Textfield.css`, component.name);\r\n\r\n    return component;\r\n};\r\n');
        await this.fileSystem.write('/modules/core/src/elements/Textfield.js', 'Module => {\r\n    const component = {\r\n        name: \'Textfield\',\r\n        template:\r\n            \'  <v-text-field\' +\r\n            \'      v-model="value"\' +\r\n            \'      :label="title"\' +\r\n            \'      :hint="description"\' +\r\n            \'      :placeholder="placeholder"\' +\r\n            \'      :min="min"\' +\r\n            \'      :max="max"\' +\r\n            \'      :persistent-hint="persistentHint"\' +\r\n            \'  />\',\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler: function (value) {\r\n                    this.$route.params[this.element] = value;\r\n                    this.$trigger(\'input_change\', this.element);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                value: "",\r\n                title: "",\r\n                description: "",\r\n                placeholder: "",\r\n                min: 0,\r\n                max: 16,\r\n                persistentHint: true\r\n            };\r\n        },\r\n\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n\r\n            const info = this.region.regionRaw.info;\r\n\r\n            this.$route.params[this.element] = this.value;\r\n        },\r\n    };\r\n\r\n    Module.appendStyle(`src/elements/Textfield.css`, component.name);\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/elements/Upload.js', 'Module => {\r\n    const component = {\r\n        name: \'Upload\',\r\n        template: \r\n            \'<v-file-input\' +\r\n            \'   v-model="value"\' +\r\n            \'   :label="title"\' +\r\n            \'   :hint="description"\' +\r\n            \'   :append-icon="appendIcon"\' +\r\n            \'   :append-outer-icon="appendOuterIcon"\' +\r\n            \'   :autofocus="autofocus"\' +\r\n            \'   :background-color="backgroundColor"\' +\r\n            \'   :chips="chips"\' +\r\n            \'   :clear-icon="clearIcon"\' +\r\n            \'   :clearable="clearable"\' +\r\n            \'   :color="color"\' +\r\n            \'   :counter="counter"\' +\r\n            \'   :counter-size-string="counterSizeString"\' +\r\n            \'   :counter-string="counterString"\' +\r\n            \'   :counter-value="counterValue"\' +\r\n            \'   :dark="dark"\' +\r\n            \'   :dense="dense"\' +\r\n            \'   :disabled="disabled"\' +\r\n            \'   :error="error"\' +\r\n            \'   :error-count="errorCount"\' +\r\n            \'   :error-messages="errorMessages"\' +\r\n            \'   :filled="filled"\' +\r\n            \'   :flat="flat"\' +\r\n            \'   :full-width="fullWidth"\' +\r\n            \'   :height="height"\' +\r\n            \'   :hide-details="hideDetails"\' +\r\n            \'   :hide-input="hideInput"\' +\r\n            \'   :light="light"\' +\r\n            \'   :loader-height="loaderHeight"\' +\r\n            \'   :loading="loading"\' +\r\n            \'   :messages="messages"\' +\r\n            \'   :multiple="multiple"\' +\r\n            \'   :outlined="outlined"\' +\r\n            \'   :persistent-hint="persistentHint"\' +\r\n            \'   :placeholder="placeholder"\' +\r\n            \'   :prefix="prefix"\' +\r\n            \'   :prepend-icon="prependIcon"\' +\r\n            \'   :prepend-inner-icon="prependInnerIcon"\' +\r\n            \'   :readonly="readonly"\' +\r\n            \'   :reverse="reverse"\' +\r\n            \'   :rounded="rounded"\' +\r\n            \'   :rules="rules"\' +\r\n            \'   :shaped="shaped"\' +\r\n            \'   :show-size="showSize"\' +\r\n            \'   :single-line="singleLine"\' +\r\n            \'   :small-chips="smallChips"\' +\r\n            \'   :solo="solo"\' +\r\n            \'   :solo-inverted="soloInverted"\' +\r\n            \'   :success="success"\' +\r\n            \'   :success-messages="successMessages"\' +\r\n            \'   :suffix="suffix"\' +\r\n            \'   :truncate-length="truncateLength"\' +\r\n            \'   @click.prevent="click">\' +\r\n            \' <div>{{description}}</div>\' +\r\n            \'</v-file-input>\',\r\n        data() {\r\n            return {\r\n                title: undefined,\r\n                description: undefined,\r\n                value: undefined,\r\n                appendIcon: undefined,\r\n                appendOuterIcon: undefined,\r\n                autofocus: false,\r\n                backgroundColor: undefined,\r\n                chips: false,\r\n                clearIcon: \'$clear\',\r\n                clearable: true,\r\n                color: undefined,\r\n                counter: undefined,\r\n                counterSizeString: \'$vuetify.fileInput.counterSize\',\r\n                counterString: \'$vuetify.fileInput.counter\',\r\n                counterValue: null,\r\n                dark: false,\r\n                dense: false,\r\n                disabled: false,\r\n                error: false,\r\n                errorCount: 1,\r\n                errorMessages: [],\r\n                filled: false,\r\n                flat: false,\r\n                fullWidth: false,\r\n                height: undefined,\r\n                hideDetails: undefined,\r\n                hideInput: false,\r\n                light: false,\r\n                loaderHeight: 2,\r\n                loading: false,\r\n                messages: [],\r\n                multiple: false,\r\n                outlined: false,\r\n                persistentHint: true,\r\n                placeholder: undefined,\r\n                prefix: undefined,\r\n                prependIcon: \'$file\',\r\n                prependInnerIcon: undefined,\r\n                readonly: false,\r\n                reverse: false,\r\n                rounded: false,\r\n                rules: [],\r\n                shaped: false,\r\n                showSize: false,\r\n                singleLine: false,\r\n                smallChips: false,\r\n                solo: false,\r\n                soloInverted: false,\r\n                success: false,\r\n                successMessages: [],\r\n                suffix: undefined,\r\n                mime: \'\',\r\n                truncateLength: 22,\r\n            };\r\n        },\r\n        props: {\r\n\r\n            /**\r\n             * @description Render element. Usually an array with key value pairs for options.\r\n             */\r\n            renderElement: Object,\r\n\r\n            /**\r\n             * @description Element key. The key provided to map submitted values.\r\n             */\r\n            element: String,\r\n\r\n            /**\r\n             * @description Form id to identify events.\r\n             */\r\n            region: Object,\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler: function (value) {\r\n                    this.$route.params[this.element] = value;\r\n                    this.$trigger(\'input_change\', this.element);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Iterate trough all items and set them.\r\n            const keys = Object.keys(this.renderElement);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const key = keys[i];\r\n                const value = this.renderElement[key];\r\n                const dataKey = key.replace(\'#\', \'\');\r\n\r\n                // Check if data is mappable.\r\n                if (!this.hasOwnProperty(dataKey)) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if element is empty.\r\n                if (!value || value === false || value === undefined || value === null) {\r\n                    continue;\r\n                }\r\n\r\n                // Set the new value.\r\n                this[key.replace(\'#\', \'\')] = value;\r\n            }\r\n            this.$route.params[this.element] = this.value;\r\n        },\r\n        methods: {\r\n            click: async function(event) {\r\n                let file = await window.chooser.getFile(this.mime);\r\n\r\n                if (!file) {\r\n                    return;\r\n                }\r\n\r\n                let response = await fetch(file.dataURI);\r\n                let data = await response.blob();\r\n\r\n                if (file.name.split(\'.\').length === 1) {\r\n                    data.name = `${file.name}.${window.mime.extension(data.type)}`;\r\n                }\r\n                else {\r\n                    data.name = file.name;\r\n                }\r\n\r\n                this.value.push(data);\r\n            }\r\n        }\r\n    };\r\n\r\n    return component;\r\n};');
        await this.fileSystem.write('/modules/core/src/regions/Content.js', 'Module => {\r\n    const elements = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const containers = window.Manager.componentManager.getComponentsByType(\'containers\');\r\n    const data = [...elements, ...containers];\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    return {\r\n        name: \'Content\',\r\n        components,\r\n        template:\r\n            \'<v-sheet>\' +\r\n            \'  <component v-for="(renderElement, element) in renderArray"\' +\r\n            \'             :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'             :renderElement="renderElement"\' +\r\n            \'             :element="element"\' +\r\n            \'             :key="`element-${renderElement[\\\'#type\\\']}-${element}-${changed}`"/>\' +\r\n            \'</v-sheet>\',\r\n        props: {\r\n            route: Object,\r\n            region: Object,\r\n        },\r\n        data() {\r\n            return {\r\n                renderArray: {},\r\n                changed: 0,\r\n            };\r\n        },\r\n        mounted: async function () {\r\n\r\n            // Load the render array.\r\n            await this.region.load();\r\n            this.renderArray = await this.region.regionRaw.build(this.region.module, this.$route);\r\n        },\r\n    };\r\n};');
        await this.fileSystem.write('/modules/core/src/regions/content/Board.js', '(() => {\r\n    return {\r\n\r\n        /**\r\n         * @type {Object}\r\n         * @description This holds information about the form.\r\n         */\r\n        info: {\r\n            title: "Tile Board",\r\n            description: "Configure your settings here.",\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param Module\r\n         * @param VueRoute\r\n         * @returns {{}}\r\n         */\r\n        build: async (Module, VueRoute) => {\r\n            let build = {};\r\n            const params = VueRoute.params;\r\n            const default_path = \'/soundboard/\';\r\n\r\n            // Determine the path.\r\n            const pathMatch = \'pathMatch\' in params ? params.pathMatch : default_path;\r\n            await Module.fileSystem.ensure(pathMatch);\r\n            const elements = await Module.fileSystem.list(pathMatch, \'df\');\r\n\r\n            // Settings.\r\n            const tiles_per_row = 4;\r\n\r\n            build.tile_column = {\r\n                \'#type\': \'one_column\',\r\n                \'#content\': {},\r\n            };\r\n\r\n            for (let i = 0; i < elements.length; i++) {\r\n                let path = elements[i];\r\n\r\n                // We need to check whether the element is a board.\r\n                const isFile = path.split(\'.\').length > 1;\r\n\r\n                let content;\r\n\r\n                // Check if entity is a file.\r\n                if (!isFile) {\r\n                    try {\r\n                        content = await Module.fileSystem.readJSON(`${path}board.json`);\r\n                    } catch (e) {\r\n                        console.error("Could not read board.", path);\r\n                        continue;\r\n                    }\r\n                }\r\n                else if (!path.includes(\'board.json\')) {\r\n                    try {\r\n                        content = await Module.fileSystem.readJSON(path);\r\n                    }\r\n                    catch (e) {\r\n                        console.error("Could not read tile.", path);\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // Continue if no content.\r\n                if (!content || content.constructor.name !== "Object") {\r\n                    console.debug("No content for path ->", path);\r\n                    continue;\r\n                }\r\n\r\n                let tile_type = isFile ? \'tile\' : \'board\';\r\n\r\n                let file_name = path.split(\'/\')[path.split(\'/\').length - 1];\r\n                let path_directory = path.replace(file_name, "");\r\n                file_name = file_name.split(\'.\')[0];\r\n\r\n                let window_width = document.querySelector(\'#klickbait-js\').offsetWidth - 20;\r\n                let tile_width = window_width / tiles_per_row;\r\n\r\n                let content_images = Module.fallback(content, \'image_upload\', []);\r\n                let images = [];\r\n                for (let j = 0; j < content_images.length; j++) {\r\n                    let image_name = content_images[j];\r\n                    let image;\r\n                    let url;\r\n                    let error = false;\r\n                    try {\r\n                        url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${image_name}`);\r\n                        let response = await fetch(url);\r\n                        let data = await response.blob();\r\n\r\n                        data.name = image_name;\r\n                        data.lastModifiedDate = new Date();\r\n                        image = data;\r\n                    } catch (e) {\r\n                        console.log("Could not read image.", image_name);\r\n                        error = true;\r\n                    }\r\n\r\n                    if (error) {\r\n                        try {\r\n                            url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${image_name}`);\r\n                        } catch (e) {\r\n                            console.log("Could not read image.", image_name);\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    images.push(image);\r\n                }\r\n\r\n                let content_sounds = Module.fallback(content, \'sound_upload\', []);\r\n                let sounds = [];\r\n                for (let j = 0; j < content_sounds.length; j++) {\r\n                    let sound_name = content_sounds[j];\r\n                    let sound;\r\n                    let url;\r\n                    let error = false;\r\n\r\n                    if (\r\n                        sound_name instanceof Blob ||\r\n                        sound_name instanceof File\r\n                    ) {\r\n                        sounds.push(sound_name);\r\n                        continue;\r\n                    }\r\n\r\n                    try {\r\n                        url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${sound_name}`);\r\n                        let response = await fetch(url);\r\n                        let data = await response.blob();\r\n\r\n                        data.name = sound_name;\r\n                        data.lastModifiedDate = new Date();\r\n                        sound = data;\r\n                    } catch (e) {\r\n                        console.log("Could not read sound.", sound_name);\r\n                        error = true;\r\n                    }\r\n\r\n                    if (error) {\r\n                        try {\r\n                            url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${sound_name}`);\r\n                        } catch (e) {\r\n                            console.log("Could not read sound.", sound_name);\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    sounds.push(sound);\r\n                }\r\n\r\n                build.tile_column[\'#content\'][path] = {\r\n                    \'#type\': isFile ? \'tile\' : \'board\',\r\n                    \'#title\': Module.fallback(content, \'tile_title\', \'\'),\r\n                    \'#backgroundColor\': Module.fallback(content, \'tile_color\', \'#000000\'),\r\n                    \'#textColor\': Module.fallback(content, \'text_color\', \'#000000\'),\r\n                    \'#classes\': Module.fallback(content, \'tile_style\', \'default\'),\r\n                    \'#images\': images,\r\n                    \'#sounds\': sounds,\r\n                    \'#path\': path,\r\n                    \'#width\': `${tile_width}px`,\r\n                    \'#height\': `${tile_width}px`,\r\n                    \'#to\': {\r\n                        name: `edit.${tile_type}`,\r\n                        params: {\r\n                            ...content,\r\n                        }\r\n                    },\r\n                };\r\n\r\n                // Merging does not work directly somehow.\r\n                build.tile_column[\'#content\'][path][\'#to\'][\'params\'][\'path\'] = path;\r\n                build.tile_column[\'#content\'][path][\'#to\'][\'params\'][\'pathMatch\'] = pathMatch;\r\n            }\r\n\r\n            for (let i = 0; i < tiles_per_row; i++) {\r\n                const window_width = document.querySelector(\'#klickbait-js\').offsetWidth - 20;\r\n                const tile_width = window_width / tiles_per_row;\r\n\r\n                build.tile_column[\'#content\'][`space_holder_${i}`] = {\r\n                    \'#type\': \'advanced-space-holder\',\r\n                    \'#width\': `${tile_width}px`,\r\n                    \'#height\': `${tile_width}px`,\r\n                };\r\n            }\r\n\r\n            build.navigation = {\r\n                \'#type\': \'add-tile-button\',\r\n                \'#content\': {\r\n                    add_tile: {\r\n                        \'#type\': \'redirect_button\',\r\n                        \'#fab\': true,\r\n                        \'#outlined\': true,\r\n                        \'#color\': \'green\',\r\n                        \'#centerIcon\': \'add\',\r\n                        \'#to\': {\r\n                            name: \'tile.templates\',\r\n                            params: {\r\n                                pathMatch,\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (params.pathMatch !== default_path) {\r\n                let past_board = params.pathMatch;\r\n                past_board = past_board.split(\'/\');\r\n                past_board.pop();\r\n                past_board.pop();\r\n                past_board = past_board.join(\'/\');\r\n                past_board += \'/\';\r\n                console.log("PAST BOARD", past_board);\r\n\r\n                build.navigation["#content"][\'past_board\'] = {\r\n                    \'#type\': \'button\',\r\n                    \'#fab\': true,\r\n                    \'#outlined\': true,\r\n                    \'#color\': \'orange\',\r\n                    \'#centerIcon\': \'arrow_back\',\r\n                    \'#to\': {\r\n                        name: \'core.board\',\r\n                        params: {\r\n                            pathMatch: past_board,\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            return build;\r\n        },\r\n    };\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/content/Modules.js', 'const Modules = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    info: {\r\n        title: "Tile Board",\r\n        description: "Configure your settings here.",\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param Module\r\n     * @param values\r\n     * @returns {{}}\r\n     */\r\n    build: (Module) => {\r\n        let build = {};\r\n\r\n        build.headline = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': \'Modules\',\r\n            \'#description\': \'Shows the current installed modules.\',\r\n        };\r\n\r\n        const modules = Module.moduleManager.modules;\r\n\r\n        for (let i = 0; i < modules.length; i++) {\r\n            const module = modules[i];\r\n\r\n            build[`${module.id}-module-list`] = {\r\n                \'#type\': \'paragraph\',\r\n                \'#title\': module.info.name,\r\n                \'#description\': module.info.description,\r\n                \'#value\': `Version: ${module.info.version}`\r\n            };\r\n        }\r\n\r\n\r\n        return build;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Modules;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/Form.js', 'Module => {\r\n    const elements = window.Manager.componentManager.getComponentsByType(\'elements\');\r\n    const containers = window.Manager.componentManager.getComponentsByType(\'containers\');\r\n    const data = [...elements, ...containers];\r\n    const components = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const component = data[i];\r\n        components[`as-${component.id}`] = component.getComponent();\r\n    }\r\n\r\n    return {\r\n        name: \'Form\',\r\n        template: \r\n            \'<v-form class="pa-4 mb-4">\' +\r\n            \'    <component v-for="(renderElement, element) in renderArray"\' +\r\n            \'               :is="`as-${renderElement[\\\'#type\\\']}`"\' +\r\n            \'               :renderElement="renderElement"\' +\r\n            \'               :element="element"\' +\r\n            \'               :key="`${element}.${changed}`"\' +\r\n            \'               :region="region"/>\' +\r\n            \'\' +\r\n            \'    <v-btn\' +\r\n            \'        v-if="info.submit === undefined || info.submit === true"\' +\r\n            \'        block\' +\r\n            \'        tile\' +\r\n            \'        outlined\' +\r\n            \'        :loading="saving"\' +\r\n            \'        color="success"\' +\r\n            \'        @click="submit">\' +\r\n            \'        <div v-if="info.submit_text">{{info.submit_text}}</div>\' +\r\n            \'        <div v-else>Save</div>\' +\r\n            \'    </v-btn>\' +\r\n            \'    <br/>\' +\r\n            \'  </v-form>\',\r\n        components,\r\n        data() {\r\n            return {\r\n                info: {},\r\n                renderArray: {},\r\n                values: {},\r\n                saving: false,\r\n                snackbar: false,\r\n                changed: 0,\r\n                registered: 0,\r\n            };\r\n        },\r\n\r\n        props: {\r\n            route: Object,\r\n            region: Object,\r\n        },\r\n\r\n        mounted: async function () {\r\n            await this.region.load();\r\n            this.info = this.region.regionRaw.info;\r\n\r\n            const values = await this.build();\r\n            this.renderArray = await this.region.regionRaw.build(this.region.module, this.$route.params);\r\n        },\r\n\r\n        methods: {\r\n\r\n            /**\r\n             *\r\n             */\r\n            build: async function () {\r\n                let values = {};\r\n\r\n                try {\r\n                    //values = await this.region.fileSystem.readJSON(`${this.region.module.path}values/form.${this.info.id}.json`);\r\n                } catch (error) {\r\n                    //await this.region.fileSystem.write(`${this.region.module.path}values/form.${this.info.id}.json`, JSON.stringify({}));\r\n\r\n                    /*\r\n                     * At this point we know that there is nothing in the fileSystem about this file.\r\n                     * So it\'s ok to set value empty.\r\n                     */\r\n                    values = {};\r\n                }\r\n\r\n                if (values === undefined) return {};\r\n                return values;\r\n            },\r\n\r\n            validate: async function () {\r\n\r\n            },\r\n\r\n            submit: async function () {\r\n                this.saving = true;\r\n\r\n                await this.save(this.$route.params, this.$router);\r\n\r\n                //console.log(this.values)\r\n                this.saving = false;\r\n                this.snackbar = true;\r\n            },\r\n\r\n            /**\r\n             *\r\n             * @param values\r\n             */\r\n            save: async function (values) {\r\n                values = await this.region.regionRaw.submit(this.route.module, values, this.$router);\r\n\r\n                if (\'save\' in this.info && this.info.save !== false) {\r\n                    //await this.region.fileSystem.write(`${this.router.module.path}values/form.${this.info.id}.json`, JSON.stringify(values));\r\n                }\r\n            }\r\n        }\r\n    };\r\n};');
        await this.fileSystem.write('/modules/core/src/regions/form/DefaultForm.ts', 'import ModuleInterface from "./ModuleInterface";\r\n\r\ninterface InfoInterface {\r\n    title: string,\r\n    description: string,\r\n    id: string,\r\n    tab: string,\r\n    location: string,\r\n    submit: string\r\n}\r\n\r\nexport default class Form {\r\n\r\n    public info: InfoInterface;\r\n    private render_object = {};\r\n\r\n    constructor(info: InfoInterface) {\r\n        this.info = info;\r\n    }\r\n\r\n    public async build (Module: ModuleInterface, data: object): Promise<any> {\r\n        this.render_object = [];\r\n\r\n    }\r\n\r\n    public async validate (Module: ModuleInterface, data: object): Promise<boolean> {\r\n\r\n        return true;\r\n    }\r\n\r\n    public async submit (Module: ModuleInterface, data: object): Promise<boolean> {\r\n\r\n        return true;\r\n    }\r\n\r\n    public addComponent(id: string, type: string, options: object) {\r\n        let weight = Object.keys(this.render_object);\r\n\r\n        this.render_object[id] = {\r\n            \'#type\': type,\r\n            \'#weight\': weight,\r\n            ...options\r\n        }\r\n    }\r\n}');
        await this.fileSystem.write('/modules/core/src/regions/form/EditImage.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Edit Sound",\r\n        "description": "This page is used to contain a big element wich",\r\n        "id": "image_edit",\r\n        "tab": "misc",\r\n        "location": "settings",\r\n        "submit": false\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {Module} Module\r\n     * @param {Object} values\r\n     * @param {Object} data\r\n     *\r\n     * @returns {{}}\r\n     */\r\n    "build": async (Module, data) => {\r\n        let build = {};\r\n\r\n        let return_to = \'path\' in data ? \'edit.\' : \'add.\';\r\n        if (\'tile_type\' in data) {\r\n            return_to += data.tile_type;\r\n        }\r\n        else {\r\n            return_to += \'tile\';\r\n        }\r\n\r\n        build.image_upload = {\r\n            \'#type\': \'image\',\r\n            \'#files\': Module.fallback(data, \'image_upload\', []),\r\n            \'#to\': {\r\n                name: return_to\r\n            },\r\n        };\r\n\r\n        build.alter_tile = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'cancel\',\r\n            \'#appendIcon\': \'clear\',\r\n            \'#to\': {\r\n                name: return_to\r\n            },\r\n            \'#block\': true,\r\n            \'#color\': \'red\',\r\n            \'#outlined\': true\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: (Module, values) => {\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/EditSound.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Edit Sound",\r\n        "description": "This page is used to contain a big element wich",\r\n        "id": "sound_edit",\r\n        "tab": "misc",\r\n        "location": "settings",\r\n        "submit": false\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {Module} Module\r\n     * @param {Object} values\r\n     * @param {Object} data\r\n     *\r\n     * @returns {{}}\r\n     */\r\n    "build": (Module, data) => {\r\n        let build = {};\r\n\r\n        let return_to = \'path\' in data ? \'edit.\' : \'add.\';\r\n        if (\'tile_type\' in data) {\r\n            return_to += data.tile_type;\r\n        }\r\n        else {\r\n            return_to += \'tile\';\r\n        }\r\n\r\n        build.sound_upload = {\r\n            \'#type\': \'sound\',\r\n            \'#files\': Module.fallback(data, \'sound_upload\', []),\r\n            \'#to\': {\r\n                name: return_to\r\n            },\r\n        };\r\n\r\n        build.alter_tile = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'cancel\',\r\n            \'#appendIcon\': \'clear\',\r\n            \'#to\': {\r\n                name: return_to\r\n            },\r\n            \'#block\': true,\r\n            \'#color\': \'red\',\r\n            \'#outlined\': true\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: (Module, values) => {\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/ModuleInterface.ts', 'export default interface ModuleInterface {\r\n    moduleManager: object;\r\n    routeManager: object;\r\n    componentManager: object;\r\n    components: object;\r\n    info: object;\r\n    path: string;\r\n    id: string;\r\n    constructor(moduleManager: object, path: string, id: string): void;\r\n    initialize(): Promise<any>,\r\n    appendStyle(path: string, id: string): void,\r\n}');
        await this.fileSystem.write('/modules/core/src/regions/form/Settings.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Tile Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "example_form",\r\n        "tab": "misc",\r\n        "location": "settings"\r\n    },\r\n\r\n    "build": (Module, data) => {\r\n        let build = {};\r\n        build.two_column = {\r\n            \'#type\': \'two_column\',\r\n            \'#first\': {\r\n                tile: {\r\n                    \'#type\': \'tile\',\r\n                    \'#title\': \'~tile_title\',\r\n                    \'#images\': \'~image_upload\',\r\n                    \'#sounds\': \'~sound_upload\',\r\n                    \'#classes\': \'~tile_style\',\r\n                    \'#backgroundColor\': \'~tile_color\',\r\n                    \'#textColor\': Module.fallback(data, \'text_color\', \'#000000\'),\r\n                },\r\n            },\r\n            \'#second\': {\r\n                tile_color: {\r\n                    \'#type\': \'colorpicker\',\r\n                    \'#title\': \'Color\',\r\n                    \'#hideModeSwitch\': true,\r\n                    \'#description\': \'This color will be the default color of the tile.\',\r\n                    \'#value\': Module.fallback(data, \'tile_color\', \'#32a852\'),\r\n                }\r\n            },\r\n        };\r\n\r\n        build.tile_title = {\r\n            \'#type\': \'textfield\',\r\n            \'#title\': \'Title\',\r\n            \'#description\': \'This is shown in the center of the tile.\',\r\n            \'#value\': Module.fallback(data, \'tile_title\', \'My sound!\'),\r\n        };\r\n\r\n        build.tile_style = {\r\n            \'#type\': \'dropdown\',\r\n            \'#title\': \'Tile Style\',\r\n            \'#description\': \'The style is used to make your tile look nice.\',\r\n            \'#value\': Module.fallback(values, \'tile_style\', Module.fallback(data, \'tile_style\', [\'default\'])),\r\n            \'#items\': [\r\n                {\r\n                    \'text\': \'Default\',\r\n                    \'value\': [\'default\']\r\n                },\r\n                {\r\n                    \'text\': \'Image Background\',\r\n                    \'value\': [\'image\']\r\n                },\r\n                {\r\n                    \'text\': \'Horizontal 50/50\',\r\n                    \'value\': [\'horizontal-50-50\']\r\n                },\r\n                {\r\n                    \'text\': \'Vertical 50/50\',\r\n                    \'value\': [\'vertical-50-50\']\r\n                },\r\n            ]\r\n        }\r\n\r\n        build.alter_text = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'Customize Text\',\r\n            \'#appendIcon\': \'text_format\',\r\n            \'#to\': {\r\n                name: \'add.tile.text\'\r\n            },\r\n            \'#block\': true,\r\n            \'#color\': \'info\',\r\n            \'#outlined\': true\r\n        };\r\n\r\n        build.advanced_settings = {\r\n            \'#type\': \'accordion\',\r\n            \'#panels\': [\r\n                {\r\n                    \'#title\': \'Sound\',\r\n                    \'#content\': {\r\n                        paragraph: {\r\n                            \'#type\': \'paragraph\',\r\n                            \'#flat\': true,\r\n                            \'#title\': \'Description\',\r\n                            \'#description\': \'This is very cool\',\r\n                            \'#value\': \'Add your sound file, so we can start to edit :D\'\r\n                        },\r\n                        sound_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Sound File\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#value\': Module.fallback(values, \'sound_upload\', Module.fallback(data, \'sound_upload\', [])),\r\n                        },\r\n                        sound_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit audio file\',\r\n                            \'#appendIcon\': \'audiotrack\',\r\n                            \'#vif\': \'~sound_upload\',\r\n                            \'#to\': {\r\n                                name: \'core.sound\'\r\n                            },\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \'#title\': \'Image\',\r\n                    \'#content\': {\r\n                        image_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Image File\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#persistentHint\': true,\r\n                            \'#value\': Module.fallback(values, \'image_upload\', Module.fallback(data, \'image_upload\', [])),\r\n                        },\r\n\r\n                        image_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit image file\',\r\n                            \'#appendIcon\': \'crop_original\',\r\n                            \'#vif\': \'~image_upload\',\r\n                            \'#to\': {\r\n                                name: \'add.tile.image\'\r\n                            },\r\n                            \'#show\': false,\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        },\r\n                    }\r\n                },\r\n            ],\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: (Module, values) => {\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/tile/AddBoard.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Board Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "tile.settings",\r\n        "tab": "misc",\r\n        "location": "settings",\r\n        "save": false,\r\n    },\r\n\r\n    "build": (Module, data) => {\r\n        let build = {};\r\n        build.two_column = {\r\n            \'#type\': \'two_column\',\r\n            \'#first\': {\r\n                tile: {\r\n                    \'#type\': \'tile\',\r\n                    \'#title\': \'~tile_title\',\r\n                    \'#images\': \'~image_upload\',\r\n                    \'#sounds\': \'~sound_upload\',\r\n                    \'#classes\': \'~tile_style\',\r\n                    \'#backgroundColor\': \'~tile_color\',\r\n                    \'#textColor\': Module.fallback(data, \'text_color\', \'#000000\'),\r\n                },\r\n            },\r\n            \'#second\': {\r\n                tile_color: {\r\n                    \'#type\': \'colorpicker\',\r\n                    \'#title\': \'Color\',\r\n                    \'#hideModeSwitch\': true,\r\n                    \'#description\': \'This color will be the default color of the tile.\',\r\n                    \'#value\': Module.fallback(data, \'tile_color\', \'#32a852\'),\r\n                }\r\n            },\r\n        };\r\n\r\n        build.tile_title = {\r\n            \'#type\': \'textfield\',\r\n            \'#title\': \'Title\',\r\n            \'#description\': \'This is shown in the center of the tile.\',\r\n            \'#value\': Module.fallback(data, \'tile_title\', \'My sound!\'),\r\n        };\r\n\r\n        build.tile_style = {\r\n            \'#type\': \'dropdown\',\r\n            \'#title\': \'Tile Style\',\r\n            \'#description\': \'The style is used to make your tile look nice.\',\r\n            \'#value\': Module.fallback(data, \'tile_style\', [\'default\']),\r\n            \'#items\': [\r\n                {\r\n                    \'text\': \'Default\',\r\n                    \'value\': [\'default\']\r\n                },\r\n                {\r\n                    \'text\': \'Image Background\',\r\n                    \'value\': [\'image\']\r\n                },\r\n                {\r\n                    \'text\': \'Horizontal 50/50\',\r\n                    \'value\': [\'horizontal-50-50\']\r\n                },\r\n                {\r\n                    \'text\': \'Vertical 50/50\',\r\n                    \'value\': [\'vertical-50-50\']\r\n                },\r\n            ]\r\n        }\r\n\r\n        build.alter_text = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'Customize Text\',\r\n            \'#appendIcon\': \'text_format\',\r\n            \'#to\': {\r\n                name: \'add.tile.text\'\r\n            },\r\n            \'#block\': true,\r\n            \'#color\': \'info\',\r\n            \'#outlined\': true\r\n        };\r\n\r\n        build.advanced_settings = {\r\n            \'#type\': \'accordion\',\r\n            \'#panels\': [\r\n                {\r\n                    \'#title\': \'Image\',\r\n                    \'#content\': {\r\n                        image_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Image File\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#persistentHint\': true,\r\n                            \'#value\': Module.fallback(data, \'image_upload\', []),\r\n                        },\r\n\r\n                        image_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit image file\',\r\n                            \'#appendIcon\': \'crop_original\',\r\n                            \'#vif\': \'~image_upload\',\r\n                            \'#to\': {\r\n                                name: \'add.tile.image\'\r\n                            },\r\n                            \'#show\': false,\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        },\r\n                    }\r\n                },\r\n            ],\r\n        };\r\n\r\n        build.back = {\r\n            \'#type\': \'button\',\r\n            \'#title\': \'Cancel\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#FF0000\',\r\n            \'#to\': {\r\n                name: \'core.board\',\r\n                params: {\r\n                    pathMatch: data.pathMatch,\r\n                }\r\n            }\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: async (Module, values, Router) => {\r\n        const path = values.pathMatch;\r\n        const file_name = Date.now();\r\n        const path_directory = path.replace(file_name, "");\r\n\r\n        /** @var images {Array<File>} */\r\n        const images = Module.fallback(values, \'image_upload\', []);\r\n        values.image_upload = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n\r\n            /** @var image {File} */\r\n            let image = images[i];\r\n            if (!image) continue;\r\n            await Module.fileSystem.write(`${path_directory}files/${file_name}_${image.name}`, image);\r\n            values.image_upload[i] = image.name;\r\n        }\r\n\r\n        const file_path = `${path}/${file_name}/board.json`.replaceAll(\'//\', \'/\');\r\n        await Module.fileSystem.write(file_path, JSON.stringify(values));\r\n\r\n        Router.push({\r\n            name: "core.board",\r\n            params: {\r\n                pathMatch: values.pathMatch\r\n            },\r\n        });\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/tile/AddTile.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Tile Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "tile",\r\n        "tab": "tile.settings",\r\n        "location": "settings",\r\n        "save": false,\r\n    },\r\n\r\n    "build": (Module, data) => {\r\n        let build = {};\r\n\r\n        build.two_column = {\r\n            \'#type\': \'two_column\',\r\n            \'#first\': {\r\n                tile: {\r\n                    \'#type\': \'tile\',\r\n                    \'#title\': \'~tile_title\',\r\n                    \'#images\': \'~image_upload\',\r\n                    \'#sounds\': \'~sound_upload\',\r\n                    \'#classes\': \'~tile_style\',\r\n                    \'#backgroundColor\': \'~tile_color\',\r\n                    \'#textColor\': Module.fallback(data, \'text_color\', \'#000000\'),\r\n                },\r\n            },\r\n            \'#second\': {\r\n                tile_color: {\r\n                    \'#type\': \'colorpicker\',\r\n                    \'#title\': \'Color\',\r\n                    \'#hideModeSwitch\': true,\r\n                    \'#description\': \'This color will be the default color of the tile.\',\r\n                    \'#value\': Module.fallback(data, \'tile_color\', \'#32a852\'),\r\n                }\r\n            },\r\n        };\r\n\r\n        build.tile_title = {\r\n            \'#type\': \'textfield\',\r\n            \'#title\': \'Title\',\r\n            \'#description\': \'This is shown in the center of the tile.\',\r\n            \'#value\': Module.fallback(data, \'tile_title\', \'My sound!\'),\r\n        };\r\n\r\n        build.tile_style = {\r\n            \'#type\': \'dropdown\',\r\n            \'#title\': \'Tile Style\',\r\n            \'#description\': \'The style is used to make your tile look nice.\',\r\n            \'#value\': Module.fallback(data, \'tile_style\', [\'default\']),\r\n            \'#items\': [\r\n                {\r\n                    \'text\': \'Default\',\r\n                    \'value\': [\'default\']\r\n                },\r\n                {\r\n                    \'text\': \'Image Background\',\r\n                    \'value\': [\'image\']\r\n                },\r\n                {\r\n                    \'text\': \'Horizontal 50/50\',\r\n                    \'value\': [\'horizontal-50-50\']\r\n                },\r\n                {\r\n                    \'text\': \'Vertical 50/50\',\r\n                    \'value\': [\'vertical-50-50\']\r\n                },\r\n            ]\r\n        };\r\n\r\n        build.help_tile_style = {\r\n            \'#type\': \'information\',\r\n            \'#title\': \'A style for my tile?\',\r\n            \'#description\': \'A style defines how your tile will look. The default one displays no image. The image background only shows the image.\',\r\n            \'#value\': \'What is a tile style?\'\r\n        };\r\n\r\n        build.alter_text = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'Customize Text\',\r\n            \'#appendIcon\': \'text_format\',\r\n            \'#to\': {\r\n                name: \'add.tile.text\'\r\n            },\r\n            \'#block\': true,\r\n            \'#color\': \'info\',\r\n            \'#outlined\': true\r\n        };\r\n\r\n        build.advanced_settings = {\r\n            \'#type\': \'accordion\',\r\n            \'#panels\': [\r\n                {\r\n                    \'#title\': \'Sound\',\r\n                    \'#content\': {\r\n                        help_sound_upload: {\r\n                            \'#type\': \'information\',\r\n                            \'#title\': \'Why do I need to append a sound?\',\r\n                            \'#description\': \'Well this is a soundboard overall. Why not wtf?! \\nLoad a sound and crop it! (Only if it\\\'s not perfect)\',\r\n                            \'#value\': \'Why sound?\'\r\n                        },\r\n                        sound_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Sound File\',\r\n                            \'#mime\': \'audio/*\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#value\': Module.fallback(data, \'sound_upload\', []),\r\n                        },\r\n                        sound_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit audio file\',\r\n                            \'#appendIcon\': \'audiotrack\',\r\n                            \'#vif\': \'~sound_upload\',\r\n                            \'#to\': {\r\n                                name: \'core.sound\'\r\n                            },\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \'#title\': \'Image\',\r\n                    \'#content\': {\r\n                        help_image_upload: {\r\n                            \'#type\': \'information\',\r\n                            \'#title\': \'Why do I need to append an image?\',\r\n                            \'#description\': \'Well some people just want to show how cool their board looks. \\n You can go with the flow or live like a caveman. What do you choose? \\nLoad a sound and crop it! (Only if it\\\'s not perfect)\',\r\n                            \'#value\': \'An image?\'\r\n                        },\r\n                        image_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Image File\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#persistentHint\': true,\r\n                            \'#mime\': \'image/*\',\r\n                            \'#value\': Module.fallback(data, \'image_upload\', []),\r\n                        },\r\n                        image_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit image file\',\r\n                            \'#appendIcon\': \'crop_original\',\r\n                            \'#vif\': \'~image_upload\',\r\n                            \'#to\': {\r\n                                name: \'add.tile.image\'\r\n                            },\r\n                            \'#show\': false,\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        },\r\n                    }\r\n                },\r\n            ],\r\n        };\r\n\r\n        build.back = {\r\n            \'#type\': \'button\',\r\n            \'#title\': \'Cancel\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#FF0000\',\r\n            \'#to\': {\r\n                name: \'core.board\',\r\n                params: {\r\n                    pathMatch: data.pathMatch,\r\n                }\r\n            }\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: async (Module, values, Router) => {\r\n        const path = values.pathMatch;\r\n        const file_name = Date.now();\r\n        const path_directory = path.replace(file_name, "");\r\n\r\n        /** @var images {Array<File>} */\r\n        const images = Module.fallback(values, \'image_upload\', []);\r\n        values.image_upload = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n\r\n            /** @var image {File} */\r\n            let image = images[i];\r\n            if (!image) continue;\r\n            await Module.fileSystem.write(`${path_directory}files/${file_name}_${image.name}`, image);\r\n            values.image_upload[i] = image.name;\r\n        }\r\n\r\n        /** @var images {Array<File>} */\r\n        const sounds = Module.fallback(values, \'sound_upload\', []);\r\n        values.sound_upload = [];\r\n\r\n        for (let i = 0; i < sounds.length; i++) {\r\n\r\n            /** @var image {File} */\r\n            let sound = sounds[i];\r\n            if (!sound) continue;\r\n            await Module.fileSystem.write(`${path_directory}files/${file_name}_${sound.name}`, sound);\r\n            values.sound_upload[i] = sound.name;\r\n        }\r\n\r\n        const file_path = `${path_directory}/${file_name}.json`.replaceAll(\'//\', \'/\');\r\n        await Module.fileSystem.write(file_path, JSON.stringify(values));\r\n\r\n        Router.push({\r\n            name: "core.board",\r\n            params: {\r\n                pathMatch: values.pathMatch\r\n            },\r\n        });\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/tile/DeleteBoard.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Tile Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "tile",\r\n        "tab": "tile.settings",\r\n        "location": "settings",\r\n        "submit_text": "Be gone!",\r\n        "save": false,\r\n    },\r\n\r\n    "build": (Module, data) => {\r\n        let build = {};\r\n\r\n        build.title = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': \'Delete Tile?\'\r\n        };\r\n\r\n        build.tile_to_remove = {\r\n            \'#type\': \'headline\',\r\n            \'#title\':\r\n                `Are you sure you want to delete the board "${data.tile_title}"?\r\n                All tiles in this board will be lost.`\r\n        };\r\n\r\n        build.back = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'NO! WTF!\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#FF0000\',\r\n            \'#to\': {\r\n                name: \'edit.board\',\r\n                params: {\r\n                    ...data\r\n                }\r\n            }\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: async (Module, values, Router) => {\r\n        let path = window.router.currentRoute.params.path;\r\n        let file_name = path.split(\'/\')[path.split(\'/\').length - 1];\r\n        const path_directory = path.replace(file_name, "");\r\n        file_name = file_name.split(\'.\')[0];\r\n\r\n        // Remove old content start.\r\n        let old_content = {};\r\n        try {\r\n            old_content = await Module.fileSystem.readJSON(path);\r\n        }\r\n        catch (e) {\r\n            console.error("Could not read tile.", path);\r\n        }\r\n\r\n        let old_images = Module.fallback(old_content, \'image_upload\', []);\r\n        for (let j = 0; j < old_images.length; j++) {\r\n            let image_name = old_images[j];\r\n            try {\r\n                await Module.fileSystem.remove(`${path_directory}files/${file_name}_${image_name}`);\r\n            } catch (e) {\r\n                console.warn("Could not delete image.", `${path_directory}files/${file_name}_${image_name}`, e);\r\n            }\r\n        }\r\n        // Remove old content end.\r\n        try {\r\n            await Module.fileSystem.removeDir(values.path);\r\n        } catch (e) {\r\n            console.warn("Could not delete sound.", values.path, e);\r\n        }\r\n\r\n        Router.push({\r\n            name: "core.board",\r\n            params: {\r\n                pathMatch: values.pathMatch\r\n            },\r\n        });\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/tile/DeleteTile.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Tile Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "tile",\r\n        "tab": "tile.settings",\r\n        "location": "settings",\r\n        "submit_text": "Be gone!",\r\n        "save": false,\r\n    },\r\n\r\n    "build": (Module, data) => {\r\n        let build = {};\r\n\r\n        build.title = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': \'Delete Tile?\'\r\n        };\r\n\r\n        build.tile_to_remove = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': `Are you sure you want to delete the tile "${data.tile_title}"?`\r\n        };\r\n\r\n        build.back = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'NO! WTF!\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#FF0000\',\r\n            \'#to\': {\r\n                name: \'edit.tile\',\r\n                params: {\r\n                    ...data\r\n                }\r\n            }\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: async (Module, values, Router) => {\r\n        let path = window.router.currentRoute.params.path;\r\n        let file_name = path.split(\'/\')[path.split(\'/\').length - 1];\r\n        const path_directory = path.replace(file_name, "");\r\n        file_name = file_name.split(\'.\')[0];\r\n\r\n        // Remove old content start.\r\n        let old_content;\r\n        try {\r\n            old_content = await Module.fileSystem.readJSON(path);\r\n        }\r\n        catch (e) {\r\n            console.error("Could not read tile.", path);\r\n        }\r\n\r\n        let old_images = Module.fallback(old_content, \'image_upload\', []);\r\n        for (let j = 0; j < old_images.length; j++) {\r\n            let image_name = old_images[j];\r\n            try {\r\n                await Module.fileSystem.remove(`${path_directory}files/${file_name}_${image_name}`);\r\n            } catch (e) {\r\n                console.warn("Could not delete image.", `${path_directory}files/${file_name}_${image_name}`, e);\r\n            }\r\n        }\r\n\r\n        let old_sounds = Module.fallback(old_content, \'sound_upload\', []);\r\n        for (let j = 0; j < old_sounds.length; j++) {\r\n            let sound_name = old_sounds[j];\r\n            try {\r\n                await Module.fileSystem.remove(`${path_directory}files/${file_name}_${sound_name}`);\r\n            } catch (e) {\r\n                console.warn("Could not delete sound.", `${path_directory}files/${file_name}_${sound_name}`, e);\r\n            }\r\n        }\r\n        // Remove old content end.\r\n\r\n        try {\r\n            await Module.fileSystem.remove(values.path);\r\n        } catch (e) {\r\n            console.warn("Could not delete sound.", values.path, e);\r\n        }\r\n\r\n        Router.push({\r\n            name: "core.board",\r\n            params: {\r\n                pathMatch: values.pathMatch\r\n            },\r\n        });\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/tile/EditBoard.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Board Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "tile.settings",\r\n        "tab": "misc",\r\n        "location": "settings",\r\n        "save": false,\r\n    },\r\n\r\n    "build": async (Module, data) => {\r\n        let build = {};\r\n\r\n        let path = window.router.currentRoute.params.path;\r\n        let file_name = path.split(\'/\')[path.split(\'/\').length - 1];\r\n        const path_directory = path.replace(file_name, "");\r\n        file_name = file_name.split(\'.\')[0];\r\n        let content_images = Module.fallback(data, \'image_upload\', []);\r\n        let images = [];\r\n\r\n        for (let j = 0; j < content_images.length; j++) {\r\n            let image_name = content_images[j];\r\n            let image;\r\n            let url;\r\n            let error = false;\r\n\r\n            if (\r\n                image_name instanceof Blob ||\r\n                image_name instanceof File\r\n            ) {\r\n                images.push(image_name);\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${image_name}`);\r\n                let response = await fetch(url);\r\n                let data = await response.blob();\r\n\r\n                data.name = image_name;\r\n                data.lastModifiedDate = new Date();\r\n                image = data;\r\n            } catch (e) {\r\n                console.log("Could not read image.", image_name);\r\n                error = true;\r\n            }\r\n\r\n            if (error) {\r\n                try {\r\n                    url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${image_name}`);\r\n                } catch (e) {\r\n                    console.log("Could not read image.", image_name);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            images.push(image);\r\n        }\r\n\r\n        window.router.currentRoute.params.image_upload = images;\r\n\r\n        build.two_column = {\r\n            \'#type\': \'two_column\',\r\n            \'#first\': {\r\n                tile: {\r\n                    \'#type\': \'tile\',\r\n                    \'#title\': \'~tile_title\',\r\n                    \'#images\': \'~image_upload\',\r\n                    \'#sounds\': \'~sound_upload\',\r\n                    \'#classes\': \'~tile_style\',\r\n                    \'#backgroundColor\': \'~tile_color\',\r\n                    \'#textColor\': Module.fallback(data, \'text_color\', \'#000000\'),\r\n                },\r\n            },\r\n            \'#second\': {\r\n                tile_color: {\r\n                    \'#type\': \'colorpicker\',\r\n                    \'#title\': \'Color\',\r\n                    \'#hideModeSwitch\': true,\r\n                    \'#description\': \'This color will be the default color of the tile.\',\r\n                    \'#value\': Module.fallback(data, \'tile_color\', \'#32a852\'),\r\n                }\r\n            },\r\n        };\r\n\r\n        build.tile_title = {\r\n            \'#type\': \'textfield\',\r\n            \'#title\': \'Title\',\r\n            \'#description\': \'This is shown in the center of the tile.\',\r\n            \'#value\': Module.fallback(data, \'tile_title\', \'My sound!\'),\r\n        };\r\n\r\n        build.tile_style = {\r\n            \'#type\': \'dropdown\',\r\n            \'#title\': \'Tile Style\',\r\n            \'#description\': \'The style is used to make your tile look nice.\',\r\n            \'#value\': Module.fallback(data, \'tile_style\', [\'default\']),\r\n            \'#items\': [\r\n                {\r\n                    \'text\': \'Default\',\r\n                    \'value\': [\'default\']\r\n                },\r\n                {\r\n                    \'text\': \'Image Background\',\r\n                    \'value\': [\'image\']\r\n                },\r\n                {\r\n                    \'text\': \'Horizontal 50/50\',\r\n                    \'value\': [\'horizontal-50-50\']\r\n                },\r\n                {\r\n                    \'text\': \'Vertical 50/50\',\r\n                    \'value\': [\'vertical-50-50\']\r\n                },\r\n            ]\r\n        };\r\n\r\n        build.alter_text = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'Customize Text\',\r\n            \'#appendIcon\': \'text_format\',\r\n            \'#to\': {\r\n                name: \'add.tile.text\'\r\n            },\r\n            \'#block\': true,\r\n            \'#color\': \'info\',\r\n            \'#outlined\': true\r\n        };\r\n\r\n        build.advanced_settings = {\r\n            \'#type\': \'accordion\',\r\n            \'#panels\': [\r\n                {\r\n                    \'#title\': \'Image\',\r\n                    \'#content\': {\r\n                        image_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Image File\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#persistentHint\': true,\r\n                            \'#value\': Module.fallback(data, \'image_upload\', []),\r\n                        },\r\n\r\n                        image_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit image file\',\r\n                            \'#appendIcon\': \'crop_original\',\r\n                            \'#vif\': \'~image_upload\',\r\n                            \'#to\': {\r\n                                name: \'add.tile.image\'\r\n                            },\r\n                            \'#show\': false,\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        },\r\n                    }\r\n                },\r\n            ],\r\n        };\r\n\r\n        build.delete = {\r\n            \'#type\': \'button\',\r\n            \'#title\': \'Delete\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#FF0000\',\r\n            \'#to\': {\r\n                name: \'delete.board\',\r\n                params: {\r\n                    ...data\r\n                }\r\n            }\r\n        };\r\n\r\n        build.back = {\r\n            \'#type\': \'button\',\r\n            \'#title\': \'Cancel\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#ff7f00\',\r\n            \'#to\': {\r\n                name: \'core.board\',\r\n                params: {\r\n                    pathMatch: data.pathMatch,\r\n                }\r\n            }\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: async (Module, values, Router) => {\r\n        const path = values.path;\r\n        let file_name = path.split(\'/\')[path.split(\'/\').length - 1];\r\n        const path_directory = path.replace(file_name, "");\r\n        file_name = file_name.split(\'.\')[0];\r\n\r\n        // Remove old content start.\r\n        let old_content;\r\n        try {\r\n            old_content = await Module.fileSystem.readJSON(path);\r\n        }\r\n        catch (e) {\r\n            console.error("Could not read tile.", path);\r\n        }\r\n\r\n        let old_images = Module.fallback(values, \'image_upload\', []);\r\n        for (let j = 0; j < old_images.length; j++) {\r\n            let image_name = old_images[j];\r\n            try {\r\n                await Module.fileSystem.remove(`${path_directory}files/${file_name}_${image_name}`);\r\n            } catch (e) {\r\n                console.warn("Could not delete image.", `${path_directory}files/${file_name}_${image_name}`, e);\r\n            }\r\n        }\r\n        // Remove old content end.\r\n        // @fixme Remove all images before setting new images.\r\n\r\n        /** @var images {Array<File>} */\r\n        const images = Module.fallback(values, \'image_upload\', []);\r\n        values.image_upload = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n\r\n            /** @var image {File} */\r\n            let image = images[i];\r\n            if (!image) continue;\r\n            await Module.fileSystem.write(`${path_directory}files/${file_name}_${image.name}`, image);\r\n            values.image_upload[i] = image.name;\r\n        }\r\n\r\n        await Module.fileSystem.write(`${path}board.json`, JSON.stringify(values));\r\n\r\n        Router.push({\r\n            name: "core.board",\r\n            params: {\r\n                pathMatch: data.pathMatch,\r\n            },\r\n        });\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/tile/EditTile.js', 'const Settings = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "Tile Settings",\r\n        "description": "Configure your settings here.",\r\n        "id": "tile",\r\n        "tab": "tile.settings",\r\n        "location": "settings",\r\n        "save": false,\r\n    },\r\n\r\n    "build": async (Module, data) => {\r\n        let build = {};\r\n\r\n        let path = window.router.currentRoute.params.path;\r\n        let file_name = path.split(\'/\')[path.split(\'/\').length - 1];\r\n        const path_directory = path.replace(file_name, "");\r\n        file_name = file_name.split(\'.\')[0];\r\n        let content_images = Module.fallback(data, \'image_upload\', []);\r\n        let images = [];\r\n\r\n        for (let j = 0; j < content_images.length; j++) {\r\n            let image_name = content_images[j];\r\n            let image;\r\n            let url;\r\n            let error = false;\r\n\r\n            if (\r\n                image_name instanceof Blob ||\r\n                image_name instanceof File\r\n            ) {\r\n                images.push(image_name);\r\n                continue;\r\n            }\r\n            try {\r\n                url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${image_name}`);\r\n                let response = await fetch(url);\r\n                let data = await response.blob();\r\n\r\n                data.name = image_name;\r\n                data.lastModifiedDate = new Date();\r\n                image = data;\r\n            } catch (e) {\r\n                console.log("Could not read image.", image_name);\r\n                error = true;\r\n            }\r\n\r\n            if (error) {\r\n                try {\r\n                    url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${image_name}`);\r\n                } catch (e) {\r\n                    console.log("Could not read image.", image_name);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            images.push(image);\r\n        }\r\n\r\n        let content_sounds = Module.fallback(data, \'sound_upload\', []);\r\n        let sounds = [];\r\n\r\n        for (let j = 0; j < content_sounds.length; j++) {\r\n            let sound_name = content_sounds[j];\r\n            let sound;\r\n            let url;\r\n            let error = false;\r\n\r\n            if (\r\n                sound_name instanceof Blob ||\r\n                sound_name instanceof File\r\n            ) {\r\n                sounds.push(sound_name);\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${sound_name}`);\r\n                let response = await fetch(url);\r\n                let data = await response.blob();\r\n\r\n                data.name = sound_name;\r\n                data.lastModifiedDate = new Date();\r\n                sound = data;\r\n            } catch (e) {\r\n                console.log("Could not read sound.", sound_name);\r\n                error = true;\r\n            }\r\n\r\n            if (error) {\r\n                try {\r\n                    url = await Module.fileSystem.toDataURL(`${path_directory}files/${file_name}_${sound_name}`);\r\n                } catch (e) {\r\n                    console.log("Could not read sound.", sound_name);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            sounds.push(sound);\r\n        }\r\n\r\n        window.router.currentRoute.params.image_upload = images;\r\n        window.router.currentRoute.params.sound_upload = sounds;\r\n\r\n        build.two_column = {\r\n            \'#type\': \'two_column\',\r\n            \'#first\': {\r\n                tile: {\r\n                    \'#type\': \'tile\',\r\n                    \'#title\': \'~tile_title\',\r\n                    \'#images\': \'~image_upload\',\r\n                    \'#sounds\': \'~sound_upload\',\r\n                    \'#classes\': \'~tile_style\',\r\n                    \'#backgroundColor\': \'~tile_color\',\r\n                    \'#textColor\': Module.fallback(data, \'text_color\', \'#000000\'),\r\n                },\r\n            },\r\n            \'#second\': {\r\n                tile_color: {\r\n                    \'#type\': \'colorpicker\',\r\n                    \'#title\': \'Color\',\r\n                    \'#hideModeSwitch\': true,\r\n                    \'#description\': \'This color will be the default color of the tile.\',\r\n                    \'#value\': Module.fallback(data, \'tile_color\', \'#32a852\'),\r\n                }\r\n            },\r\n        };\r\n\r\n        build.tile_title = {\r\n            \'#type\': \'textfield\',\r\n            \'#title\': \'Title\',\r\n            \'#description\': \'This is shown in the center of the tile.\',\r\n            \'#value\': Module.fallback(data, \'tile_title\', \'My sound!\'),\r\n        };\r\n\r\n        build.tile_style = {\r\n            \'#type\': \'dropdown\',\r\n            \'#title\': \'Tile Style\',\r\n            \'#description\': \'The style is used to make your tile look nice.\',\r\n            \'#value\': Module.fallback(data, \'tile_style\', [\'default\']),\r\n            \'#items\': [\r\n                {\r\n                    \'text\': \'Default\',\r\n                    \'value\': [\'default\']\r\n                },\r\n                {\r\n                    \'text\': \'Image Background\',\r\n                    \'value\': [\'image\']\r\n                },\r\n                {\r\n                    \'text\': \'Horizontal 50/50\',\r\n                    \'value\': [\'horizontal-50-50\']\r\n                },\r\n                {\r\n                    \'text\': \'Vertical 50/50\',\r\n                    \'value\': [\'vertical-50-50\']\r\n                },\r\n            ]\r\n        };\r\n\r\n        build.alter_text = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'Customize Text\',\r\n            \'#appendIcon\': \'text_format\',\r\n            \'#to\': {\r\n                name: \'add.tile.text\'\r\n            },\r\n            \'#block\': true,\r\n            \'#color\': \'info\',\r\n            \'#outlined\': true\r\n        };\r\n\r\n        build.advanced_settings = {\r\n            \'#type\': \'accordion\',\r\n            \'#panels\': [\r\n                {\r\n                    \'#title\': \'Sound\',\r\n                    \'#content\': {\r\n                        sound_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Sound File\',\r\n                            \'#mime\': \'audio/*\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#value\': Module.fallback(data, \'sound_upload\', []),\r\n                        },\r\n                        sound_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit audio file\',\r\n                            \'#appendIcon\': \'audiotrack\',\r\n                            \'#vif\': \'~sound_upload\',\r\n                            \'#to\': {\r\n                                name: \'core.sound\'\r\n                            },\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \'#title\': \'Image\',\r\n                    \'#content\': {\r\n                        image_upload: {\r\n                            \'#type\': \'upload\',\r\n                            \'#title\': \'Image File\',\r\n                            \'#description\': \'Select your sound file.\',\r\n                            \'#persistentHint\': true,\r\n                            \'#mime\': \'image/*\',\r\n                            \'#value\': Module.fallback(data, \'image_upload\', []),\r\n                        },\r\n\r\n                        image_upload_edit: {\r\n                            \'#type\': \'redirect_button\',\r\n                            \'#title\': \'Edit image file\',\r\n                            \'#appendIcon\': \'crop_original\',\r\n                            \'#vif\': \'~image_upload\',\r\n                            \'#to\': {\r\n                                name: \'add.tile.image\'\r\n                            },\r\n                            \'#show\': false,\r\n                            \'#block\': true,\r\n                            \'#color\': \'info\',\r\n                            \'#outlined\': true\r\n                        },\r\n                    }\r\n                },\r\n            ],\r\n        };\r\n\r\n        build.delete = {\r\n            \'#type\': \'button\',\r\n            \'#title\': \'Delete\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#FF0000\',\r\n            \'#to\': {\r\n                name: \'delete.tile\',\r\n                params: {\r\n                    ...data\r\n                }\r\n            }\r\n        };\r\n\r\n        build.back = {\r\n            \'#type\': \'button\',\r\n            \'#title\': \'Cancel\',\r\n            \'#outlined\': true,\r\n            \'#block\': true,\r\n            \'#classes\': [\'mb-2\'],\r\n            \'#color\': \'#ff7f00\',\r\n            \'#to\': {\r\n                name: \'core.board\',\r\n                params: {\r\n                    pathMatch: data.pathMatch,\r\n                }\r\n            }\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: async (Module, values, Router) => {\r\n        const path = values.path;\r\n        let file_name = path.split(\'/\')[path.split(\'/\').length - 1];\r\n        const path_directory = path.replace(file_name, "");\r\n        file_name = file_name.split(\'.\')[0];\r\n\r\n        // Remove old content start.\r\n        let old_content;\r\n        try {\r\n            old_content = await Module.fileSystem.readJSON(path);\r\n        }\r\n        catch (e) {\r\n            console.error("Could not read tile.", path);\r\n        }\r\n\r\n        let old_images = Module.fallback(old_content, \'image_upload\', []);\r\n        for (let j = 0; j < old_images.length; j++) {\r\n            let image_name = old_images[j];\r\n            try {\r\n                await Module.fileSystem.remove(`${path_directory}files/${file_name}_${image_name}`);\r\n            } catch (e) {\r\n                console.warn("Could not delete image.", `${path_directory}files/${file_name}_${image_name}`, e);\r\n            }\r\n        }\r\n\r\n        let old_sounds = Module.fallback(old_content, \'sound_upload\', []);\r\n        for (let j = 0; j < old_sounds.length; j++) {\r\n            let sound_name = old_sounds[j];\r\n            try {\r\n                await Module.fileSystem.remove(`${path_directory}files/${file_name}_${sound_name}`);\r\n            } catch (e) {\r\n                console.warn("Could not delete sound.", `${path_directory}files/${file_name}_${sound_name}`, e);\r\n            }\r\n        }\r\n        // Remove old content end.\r\n\r\n        /** @var images {Array<File>} */\r\n        const images = Module.fallback(values, \'image_upload\', []);\r\n        values.image_upload = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n\r\n            /** @var image {File} */\r\n            let image = images[i];\r\n            if (!image) continue;\r\n            await Module.fileSystem.write(`${path_directory}files/${file_name}_${image.name}`, image);\r\n            values.image_upload[i] = image.name;\r\n        }\r\n\r\n        /** @var images {Array<File>} */\r\n        const sounds = Module.fallback(values, \'sound_upload\', []);\r\n        values.sound_upload = [];\r\n\r\n        for (let i = 0; i < sounds.length; i++) {\r\n\r\n            /** @var image {File} */\r\n            let sound = sounds[i];\r\n            if (!sound) continue;\r\n            await Module.fileSystem.write(`${path_directory}files/${file_name}_${sound.name}`, sound);\r\n            values.sound_upload[i] = sound.name;\r\n        }\r\n\r\n        await Module.fileSystem.write(path, JSON.stringify(values));\r\n\r\n        Router.push({\r\n            name: "core.board",\r\n            params: {\r\n                pathMatch: values.pathMatch\r\n            },\r\n        });\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/tile/TileText.js', 'const Form = {\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @description This holds information about the form.\r\n     */\r\n    "info": {\r\n        "title": "TEXT SETTINGS",\r\n        "description": "All you want in your text shall be here.",\r\n        "id": "tile_text",\r\n        "location": "settings",\r\n        "submit": false,\r\n    },\r\n\r\n    "build": (Module, data) => {\r\n        let build = {};\r\n\r\n        build.text = {\r\n            \'#type\': \'paragraph\',\r\n            \'#value\': Module.fallback(data, \'tile_title\', \'Lorem ipsum dolor sit amet\'),\r\n            \'#textColor\': \'~text_color\',\r\n        };\r\n\r\n        build.text_color = {\r\n            \'#type\': \'colorpicker\',\r\n            \'#title\': \'Color\',\r\n            \'#classCSS\': [\'mt-3\', \'mb-3\'],\r\n            \'#hideModeSwitch\': true,\r\n            \'#description\': \'This color will be the default color of the tile.\',\r\n            \'#value\': Module.fallback(data, \'text_color\', \'#32a852\'),\r\n        };\r\n\r\n        const edit = \'path\' in data ? \'edit\' : \'add\';\r\n        const tile_type = Module.fallback(data, \'tile_type\', \'tile\');\r\n\r\n        build.alter_text = {\r\n            \'#type\': \'redirect_button\',\r\n            \'#title\': \'Confirm\',\r\n            \'#prependIcon\': \'exit_to_app\',\r\n            \'#to\': {\r\n                name: `${edit}.${tile_type}`\r\n            },\r\n            \'#color\': \'green\',\r\n            \'#outlined\': true,\r\n            \'#block\': true\r\n        };\r\n\r\n        return build;\r\n    },\r\n    validate: (Module, values) => {\r\n\r\n        /**\r\n         * Return key: value for error messages.\r\n         *\r\n         * key => Resembling the field id.\r\n         * value => Resembling the the error message.\r\n         */\r\n        return true;\r\n    },\r\n\r\n    submit: (Module, values) => {\r\n\r\n        // The submitted values of the user.\r\n        return values;\r\n    },\r\n};\r\n\r\n(() => {\r\n    return Form;\r\n})();');
        await this.fileSystem.write('/modules/core/src/regions/form/TileTemplates.js', 'const Settings = {\r\n    /**\r\n     *\r\n     * @param {Module} Module\r\n     * @param Route\r\n     * @returns {{}}\r\n     */\r\n    build(Module, Route) {\r\n        let build = {};\r\n\r\n        const params = Route.params;\r\n        const tiles_per_row = 4;\r\n        const window_width = document.querySelector(\'#klickbait-js\').offsetWidth - 20;\r\n        const tile_width = window_width / tiles_per_row;\r\n\r\n        build.title = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': \'Tile Templates\',\r\n            \'#description\': \'Here you can use contributed or custom tiles created by you.\',\r\n        };\r\n\r\n        build.help_title = {\r\n            \'#type\': \'information\',\r\n            \'#title\': \'Tiles? Tiles!\',\r\n            \'#description\': \'Tiles are buttons. Tiles play music when pressed and are fully customizable. Change colour, set an image, set the color of the text and so on.\',\r\n            \'#value\': \'What are tiles?!\'\r\n        };\r\n\r\n        build.tile_column = {\r\n            \'#type\': \'one_column\',\r\n            \'#content\': {\r\n                create_tile: {\r\n                    \'#type\': \'tile_template\',\r\n                    \'#title\': \'Create a tile\',\r\n                    \'#backgroundColor\': \'#32a852\',\r\n                    \'#width\': `${tile_width}px`,\r\n                    \'#height\': `${tile_width}px`,\r\n                    \'#to\': {\r\n                        name: \'add.tile\',\r\n                        params: {\r\n                            tile_title: "Create a tile",\r\n                            tile_type: "tile",\r\n                            tile_color: \'#32a852\',\r\n                            ...params,\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        };\r\n\r\n        for (let i = 0; i < tiles_per_row; i++) {\r\n            build.tile_column[\'#content\'][`space_holder_${i}`] = {\r\n                \'#type\': \'advanced-space-holder\',\r\n                \'#width\': `${tile_width}px`,\r\n                \'#height\': `${tile_width}px`,\r\n            };\r\n        }\r\n\r\n        build.board = {\r\n            \'#type\': \'headline\',\r\n            \'#title\': \'Board Templates\',\r\n            \'#description\': \'Here you can use contributed or custom boards created by you.\',\r\n        };\r\n\r\n        build.help_board = {\r\n            \'#type\': \'information\',\r\n            \'#title\': \'Boards? Boards!\',\r\n            \'#description\':\r\n                \'Boards are buttons like tiles except for one exception. \' +\r\n                \'They don\\\'t play music. They\\\'re like folders which contain even more buttons! \' +\r\n                \'You can sort your tiles by theme, character, or some schema you invent.\',\r\n            \'#value\': \'What are Boards?!\'\r\n        };\r\n\r\n        build.board_column = {\r\n            \'#type\': \'one_column\',\r\n            \'#content\': {\r\n                create_board: {\r\n                    \'#type\': \'tile_template\',\r\n                    \'#title\': \'Create a board\',\r\n                    \'#width\': `${tile_width}px`,\r\n                    \'#height\': `${tile_width}px`,\r\n                    \'#backgroundColor\': \'#32a852\',\r\n                    \'#to\': {\r\n                        name: \'add.board\',\r\n                        params: {\r\n                            tile_title: "Create a board",\r\n                            tile_type: "board",\r\n                            tile_color: \'#32a852\',\r\n                            ...params,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        for (let i = 0; i < tiles_per_row; i++) {\r\n            build.board_column[\'#content\'][`space_holder_${i}`] = {\r\n                \'#type\': \'advanced-space-holder\',\r\n                \'#width\': `${tile_width}px`,\r\n                \'#height\': `${tile_width}px`,\r\n            };\r\n        }\r\n\r\n        build.navigation = {\r\n            \'#type\': \'floating_buttons\',\r\n            \'#content\': {\r\n                back: {\r\n                    \'#type\': \'redirect_button\',\r\n                    \'#fab\': true,\r\n                    \'#outlined\': true,\r\n                    \'#color\': \'#ff7600\',\r\n                    \'#centerIcon\': \'arrow_back\',\r\n                    \'#to\': {\r\n                        name: \'core.board\',\r\n                        params: {\r\n                            pathMatch: params.pathMatch,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return build;\r\n    }\r\n};\r\n\r\n(() => {\r\n    return Settings;\r\n})();');
    }
}
